{"version":3,"file":"dash.reporting.min.js","sourceRoot":"./src/","sources":["..\\node_modules\\browserify\\node_modules\\browser-pack\\_prelude.js","core\\FactoryMaker.js","core\\events\\EventsBase.js","streaming\\constants\\Constants.js","streaming\\metrics\\MetricsReporting.js","streaming\\metrics\\MetricsReportingEvents.js","streaming\\metrics\\controllers\\MetricsCollectionController.js","streaming\\metrics\\controllers\\MetricsController.js","streaming\\metrics\\controllers\\MetricsHandlersController.js","streaming\\metrics\\controllers\\RangeController.js","streaming\\metrics\\controllers\\ReportingController.js","streaming\\metrics\\metrics\\MetricsHandlerFactory.js","streaming\\metrics\\metrics\\handlers\\BufferLevelHandler.js","streaming\\metrics\\metrics\\handlers\\DVBErrorsHandler.js","streaming\\metrics\\metrics\\handlers\\GenericMetricHandler.js","streaming\\metrics\\metrics\\handlers\\HttpListHandler.js","streaming\\metrics\\reporting\\ReportingFactory.js","streaming\\metrics\\reporting\\reporters\\DVBReporting.js","streaming\\metrics\\utils\\DVBErrorsTranslator.js","streaming\\metrics\\utils\\HandlerHelpers.js","streaming\\metrics\\utils\\ManifestParsing.js","streaming\\metrics\\utils\\MetricSerialiser.js","streaming\\metrics\\utils\\RNG.js","streaming\\metrics\\vo\\DVBErrors.js","streaming\\metrics\\vo\\Metrics.js","streaming\\metrics\\vo\\Range.js","streaming\\metrics\\vo\\Reporting.js","streaming\\utils\\CustomTimeRanges.js","streaming\\utils\\SupervisorTools.js"],"sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n/**\r\n * @module FactoryMaker\r\n * @ignore\r\n */\r\nconst FactoryMaker = (function () {\r\n\r\n    let instance;\r\n    const singletonContexts = [];\r\n    const singletonFactories = {};\r\n    const classFactories = {};\r\n\r\n    function extend(name, childInstance, override, context) {\r\n        if (!context[name] && childInstance) {\r\n            context[name] = {\r\n                instance: childInstance,\r\n                override: override\r\n            };\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Use this method from your extended object.  this.factory is injected into your object.\r\n     * this.factory.getSingletonInstance(this.context, 'VideoModel')\r\n     * will return the video model for use in the extended object.\r\n     *\r\n     * @param {Object} context - injected into extended object as this.context\r\n     * @param {string} className - string name found in all dash.js objects\r\n     * with name __dashjs_factory_name Will be at the bottom. Will be the same as the object's name.\r\n     * @returns {*} Context aware instance of specified singleton name.\r\n     * @memberof module:FactoryMaker\r\n     * @instance\r\n     */\r\n    function getSingletonInstance(context, className) {\r\n        for (const i in singletonContexts) {\r\n            const obj = singletonContexts[i];\r\n            if (obj.context === context && obj.name === className) {\r\n                return obj.instance;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Use this method to add an singleton instance to the system.  Useful for unit testing to mock objects etc.\r\n     *\r\n     * @param {Object} context\r\n     * @param {string} className\r\n     * @param {Object} instance\r\n     * @memberof module:FactoryMaker\r\n     * @instance\r\n     */\r\n    function setSingletonInstance(context, className, instance) {\r\n        for (const i in singletonContexts) {\r\n            const obj = singletonContexts[i];\r\n            if (obj.context === context && obj.name === className) {\r\n                singletonContexts[i].instance = instance;\r\n                return;\r\n            }\r\n        }\r\n        singletonContexts.push({\r\n            name: className,\r\n            context: context,\r\n            instance: instance\r\n        });\r\n    }\r\n\r\n    /*------------------------------------------------------------------------------------------*/\r\n\r\n    // Factories storage Management\r\n\r\n    /*------------------------------------------------------------------------------------------*/\r\n\r\n    function getFactoryByName(name, factoriesArray) {\r\n        return factoriesArray[name];\r\n    }\r\n\r\n    function updateFactory(name, factory, factoriesArray) {\r\n        if (name in factoriesArray) {\r\n            factoriesArray[name] = factory;\r\n        }\r\n    }\r\n\r\n    /*------------------------------------------------------------------------------------------*/\r\n\r\n    // Class Factories Management\r\n\r\n    /*------------------------------------------------------------------------------------------*/\r\n\r\n    function updateClassFactory(name, factory) {\r\n        updateFactory(name, factory, classFactories);\r\n    }\r\n\r\n    function getClassFactoryByName(name) {\r\n        return getFactoryByName(name, classFactories);\r\n    }\r\n\r\n    function getClassFactory(classConstructor) {\r\n        let factory = getFactoryByName(classConstructor.__dashjs_factory_name, classFactories);\r\n\r\n        if (!factory) {\r\n            factory = function (context) {\r\n                if (context === undefined) {\r\n                    context = {};\r\n                }\r\n                return {\r\n                    create: function () {\r\n                        return merge(classConstructor, context, arguments);\r\n                    }\r\n                };\r\n            };\r\n\r\n            classFactories[classConstructor.__dashjs_factory_name] = factory; // store factory\r\n        }\r\n        return factory;\r\n    }\r\n\r\n    /*------------------------------------------------------------------------------------------*/\r\n\r\n    // Singleton Factory MAangement\r\n\r\n    /*------------------------------------------------------------------------------------------*/\r\n\r\n    function updateSingletonFactory(name, factory) {\r\n        updateFactory(name, factory, singletonFactories);\r\n    }\r\n\r\n    function getSingletonFactoryByName(name) {\r\n        return getFactoryByName(name, singletonFactories);\r\n    }\r\n\r\n    function getSingletonFactory(classConstructor) {\r\n        let factory = getFactoryByName(classConstructor.__dashjs_factory_name, singletonFactories);\r\n        if (!factory) {\r\n            factory = function (context) {\r\n                let instance;\r\n                if (context === undefined) {\r\n                    context = {};\r\n                }\r\n                return {\r\n                    getInstance: function () {\r\n                        // If we don't have an instance yet check for one on the context\r\n                        if (!instance) {\r\n                            instance = getSingletonInstance(context, classConstructor.__dashjs_factory_name);\r\n                        }\r\n                        // If there's no instance on the context then create one\r\n                        if (!instance) {\r\n                            instance = merge(classConstructor, context, arguments);\r\n                            singletonContexts.push({\r\n                                name: classConstructor.__dashjs_factory_name,\r\n                                context: context,\r\n                                instance: instance\r\n                            });\r\n                        }\r\n                        return instance;\r\n                    }\r\n                };\r\n            };\r\n            singletonFactories[classConstructor.__dashjs_factory_name] = factory; // store factory\r\n        }\r\n\r\n        return factory;\r\n    }\r\n\r\n    function merge(classConstructor, context, args) {\r\n\r\n        let classInstance;\r\n        const className = classConstructor.__dashjs_factory_name;\r\n        const extensionObject = context[className];\r\n\r\n        if (extensionObject) {\r\n\r\n            let extension = extensionObject.instance;\r\n\r\n            if (extensionObject.override) { //Override public methods in parent but keep parent.\r\n\r\n                classInstance = classConstructor.apply({context}, args);\r\n                extension = extension.apply({\r\n                    context,\r\n                    factory: instance,\r\n                    parent: classInstance\r\n                }, args);\r\n\r\n                for (const prop in extension) {\r\n                    if (classInstance.hasOwnProperty(prop)) {\r\n                        classInstance[prop] = extension[prop];\r\n                    }\r\n                }\r\n\r\n            } else { //replace parent object completely with new object. Same as dijon.\r\n\r\n                return extension.apply({\r\n                    context,\r\n                    factory: instance\r\n                }, args);\r\n\r\n            }\r\n        } else {\r\n            // Create new instance of the class\r\n            classInstance = classConstructor.apply({context}, args);\r\n        }\r\n\r\n        // Add getClassName function to class instance prototype (used by Debug)\r\n        classInstance.getClassName = function () {return className;};\r\n\r\n        return classInstance;\r\n    }\r\n\r\n    instance = {\r\n        extend: extend,\r\n        getSingletonInstance: getSingletonInstance,\r\n        setSingletonInstance: setSingletonInstance,\r\n        getSingletonFactory: getSingletonFactory,\r\n        getSingletonFactoryByName: getSingletonFactoryByName,\r\n        updateSingletonFactory: updateSingletonFactory,\r\n        getClassFactory: getClassFactory,\r\n        getClassFactoryByName: getClassFactoryByName,\r\n        updateClassFactory: updateClassFactory\r\n    };\r\n\r\n    return instance;\r\n\r\n}());\r\n\r\nexport default FactoryMaker;\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n/**\r\n * @class\r\n * @ignore\r\n */\r\nclass EventsBase {\r\n    extend (events, config) {\r\n        if (!events) return;\r\n\r\n        let override = config ? config.override : false;\r\n        let publicOnly = config ? config.publicOnly : false;\r\n\r\n\r\n        for (const evt in events) {\r\n            if (!events.hasOwnProperty(evt) || (this[evt] && !override)) continue;\r\n            if (publicOnly && events[evt].indexOf('public_') === -1) continue;\r\n            this[evt] = events[evt];\r\n\r\n        }\r\n    }\r\n}\r\n\r\nexport default EventsBase;","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\n/**\r\n * Constants declaration\r\n * @class\r\n * @ignore\r\n * @hideconstructor\r\n */\r\nclass Constants {\r\n\r\n    init () {\r\n        /**\r\n         *  @constant {string} STREAM Stream media type. Mainly used to report metrics relative to the full stream\r\n         *  @memberof Constants#\r\n         *  @static\r\n         */\r\n        this.STREAM = 'stream';\r\n\r\n        /**\r\n         *  @constant {string} VIDEO Video media type\r\n         *  @memberof Constants#\r\n         *  @static\r\n         */\r\n        this.VIDEO = 'video';\r\n\r\n        /**\r\n         *  @constant {string} AUDIO Audio media type\r\n         *  @memberof Constants#\r\n         *  @static\r\n         */\r\n        this.AUDIO = 'audio';\r\n\r\n        /**\r\n         *  @constant {string} TEXT Text media type\r\n         *  @memberof Constants#\r\n         *  @static\r\n         */\r\n        this.TEXT = 'text';\r\n\r\n        /**\r\n         *  @constant {string} FRAGMENTED_TEXT Fragmented text media type\r\n         *  @memberof Constants#\r\n         *  @static\r\n         */\r\n        this.FRAGMENTED_TEXT = 'fragmentedText';\r\n\r\n        /**\r\n         *  @constant {string} EMBEDDED_TEXT Embedded text media type\r\n         *  @memberof Constants#\r\n         *  @static\r\n         */\r\n        this.EMBEDDED_TEXT = 'embeddedText';\r\n\r\n        /**\r\n         *  @constant {string} MUXED Muxed (video/audio in the same chunk) media type\r\n         *  @memberof Constants#\r\n         *  @static\r\n         */\r\n        this.MUXED = 'muxed';\r\n\r\n        /**\r\n         *  @constant {string} IMAGE Image media type\r\n         *  @memberof Constants#\r\n         *  @static\r\n         */\r\n        this.IMAGE = 'image';\r\n\r\n        /**\r\n         *  @constant {string} STPP STTP Subtitles format\r\n         *  @memberof Constants#\r\n         *  @static\r\n         */\r\n        this.STPP = 'stpp';\r\n\r\n        /**\r\n         *  @constant {string} TTML STTP Subtitles format\r\n         *  @memberof Constants#\r\n         *  @static\r\n         */\r\n        this.TTML = 'ttml';\r\n\r\n        /**\r\n         *  @constant {string} VTT STTP Subtitles format\r\n         *  @memberof Constants#\r\n         *  @static\r\n         */\r\n        this.VTT = 'vtt';\r\n\r\n        /**\r\n         *  @constant {string} WVTT STTP Subtitles format\r\n         *  @memberof Constants#\r\n         *  @static\r\n         */\r\n        this.WVTT = 'wvtt';\r\n\r\n        /**\r\n         *  @constant {string} ABR_STRATEGY_DYNAMIC Dynamic Adaptive bitrate algorithm\r\n         *  @memberof Constants#\r\n         *  @static\r\n         */\r\n        this.ABR_STRATEGY_DYNAMIC = 'abrDynamic';\r\n\r\n        /**\r\n         *  @constant {string} ABR_STRATEGY_BOLA Adaptive bitrate algorithm based on Bola (buffer level)\r\n         *  @memberof Constants#\r\n         *  @static\r\n         */\r\n        this.ABR_STRATEGY_BOLA = 'abrBola';\r\n\r\n        /**\r\n         *  @constant {string} ABR_STRATEGY_THROUGHPUT Adaptive bitrate algorithm based on throughput\r\n         *  @memberof Constants#\r\n         *  @static\r\n         */\r\n        this.ABR_STRATEGY_THROUGHPUT = 'abrThroughput';\r\n\r\n        /**\r\n         *  @constant {string} MOVING_AVERAGE_SLIDING_WINDOW Moving average sliding window\r\n         *  @memberof Constants#\r\n         *  @static\r\n         */\r\n        this.MOVING_AVERAGE_SLIDING_WINDOW = 'slidingWindow';\r\n\r\n        /**\r\n         *  @constant {string} EWMA Exponential moving average\r\n         *  @memberof Constants#\r\n         *  @static\r\n         */\r\n        this.MOVING_AVERAGE_EWMA = 'ewma';\r\n\r\n        /**\r\n         *  @constant {string} BAD_ARGUMENT_ERROR Invalid Arguments type of error\r\n         *  @memberof Constants#\r\n         *  @static\r\n         */\r\n        this.BAD_ARGUMENT_ERROR = 'Invalid Arguments';\r\n\r\n        /**\r\n         *  @constant {string} MISSING_CONFIG_ERROR Missing ocnfiguration parameters type of error\r\n         *  @memberof Constants#\r\n         *  @static\r\n         */\r\n        this.MISSING_CONFIG_ERROR = 'Missing config parameter(s)';\r\n        this.LOCATION = 'Location';\r\n        this.INITIALIZE = 'initialize';\r\n        this.TEXT_SHOWING = 'showing';\r\n        this.TEXT_HIDDEN = 'hidden';\r\n        this.CC1 = 'CC1';\r\n        this.CC3 = 'CC3';\r\n        this.UTF8 = 'utf-8';\r\n        this.SCHEME_ID_URI = 'schemeIdUri';\r\n        this.START_TIME = 'starttime';\r\n        this.SERVICE_DESCRIPTION_LL_SCHEME = 'urn:dvb:dash:lowlatency:scope:2019';\r\n        this.SUPPLEMENTAL_PROPERTY_LL_SCHEME = 'urn:dvb:dash:lowlatency:critical:2019';\r\n        this.XML = 'XML';\r\n        this.ARRAY_BUFFER = 'ArrayBuffer';\r\n    }\r\n\r\n    constructor () {\r\n        this.init();\r\n    }\r\n}\r\n\r\nconst constants = new Constants();\r\nexport default constants;\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\nimport DVBErrorsTranslator from './utils/DVBErrorsTranslator';\r\nimport MetricsReportingEvents from './MetricsReportingEvents';\r\nimport MetricsCollectionController from './controllers/MetricsCollectionController';\r\nimport MetricsHandlerFactory from './metrics/MetricsHandlerFactory';\r\nimport ReportingFactory from './reporting/ReportingFactory';\r\n\r\nfunction MetricsReporting() {\r\n\r\n    let context = this.context;\r\n    let instance,\r\n        dvbErrorsTranslator;\r\n\r\n    /**\r\n     * Create a MetricsCollectionController, and a DVBErrorsTranslator\r\n     * @param {Object} config - dependancies from owner\r\n     * @return {MetricsCollectionController} Metrics Collection Controller\r\n     */\r\n    function createMetricsReporting(config) {\r\n        dvbErrorsTranslator = DVBErrorsTranslator(context).getInstance({\r\n            eventBus: config.eventBus,\r\n            dashMetrics: config.dashMetrics,\r\n            metricsConstants: config.metricsConstants,\r\n            events: config.events\r\n        });\r\n\r\n        return MetricsCollectionController(context).create(config);\r\n    }\r\n\r\n    /**\r\n     * Get the ReportingFactory to allow new reporters to be registered\r\n     * @return {ReportingFactory} Reporting Factory\r\n     */\r\n    function getReportingFactory() {\r\n        return ReportingFactory(context).getInstance();\r\n    }\r\n\r\n    /**\r\n     * Get the MetricsHandlerFactory to allow new handlers to be registered\r\n     * @return {MetricsHandlerFactory} Metrics Handler Factory\r\n     */\r\n    function getMetricsHandlerFactory() {\r\n        return MetricsHandlerFactory(context).getInstance();\r\n    }\r\n\r\n    instance = {\r\n        createMetricsReporting:     createMetricsReporting,\r\n        getReportingFactory:        getReportingFactory,\r\n        getMetricsHandlerFactory:   getMetricsHandlerFactory\r\n    };\r\n\r\n    return instance;\r\n}\r\n\r\nMetricsReporting.__dashjs_factory_name = 'MetricsReporting';\r\nconst factory = dashjs.FactoryMaker.getClassFactory(MetricsReporting); /* jshint ignore:line */\r\nfactory.events = MetricsReportingEvents;\r\ndashjs.FactoryMaker.updateClassFactory(MetricsReporting.__dashjs_factory_name, factory); /* jshint ignore:line */\r\nexport default factory;\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\nimport EventsBase from '../../core/events/EventsBase';\r\n\r\nclass MetricsReportingEvents extends EventsBase {\r\n    constructor () {\r\n        super();\r\n\r\n        this.METRICS_INITIALISATION_COMPLETE = 'internal_metricsReportingInitialized';\r\n        this.BECAME_REPORTING_PLAYER = 'internal_becameReportingPlayer';\r\n    }\r\n}\r\n\r\nlet metricsReportingEvents = new MetricsReportingEvents();\r\nexport default metricsReportingEvents;\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\nimport MetricsController from './MetricsController';\r\nimport ManifestParsing from '../utils/ManifestParsing';\r\nimport MetricsReportingEvents from '../MetricsReportingEvents';\r\n\r\nfunction MetricsCollectionController(config) {\r\n\r\n    config = config || {};\r\n    let metricsControllers = {};\r\n\r\n    let context = this.context;\r\n    let eventBus = config.eventBus;\r\n    const events = config.events;\r\n\r\n    function update(e) {\r\n        if (e.error) {\r\n            return;\r\n        }\r\n\r\n        // start by assuming all existing controllers need removing\r\n        let controllersToRemove = Object.keys(metricsControllers);\r\n\r\n        const metrics = ManifestParsing(context).getInstance({\r\n            adapter: config.adapter,\r\n            constants: config.constants\r\n        }).getMetrics(e.manifest);\r\n\r\n        metrics.forEach(m => {\r\n            const key = JSON.stringify(m);\r\n\r\n            if (!metricsControllers.hasOwnProperty(key)) {\r\n                try {\r\n                    let controller = MetricsController(context).create(config);\r\n                    controller.initialize(m);\r\n                    metricsControllers[key] = controller;\r\n                } catch (e) {\r\n                    // fail quietly\r\n                }\r\n            } else {\r\n                // we still need this controller - delete from removal list\r\n                controllersToRemove.splice(key, 1);\r\n            }\r\n        });\r\n\r\n        // now remove the unwanted controllers\r\n        controllersToRemove.forEach(c => {\r\n            metricsControllers[c].reset();\r\n            delete metricsControllers[c];\r\n        });\r\n\r\n        eventBus.trigger(\r\n            MetricsReportingEvents.METRICS_INITIALISATION_COMPLETE\r\n        );\r\n    }\r\n\r\n    function resetMetricsControllers() {\r\n        Object.keys(metricsControllers).forEach(key => {\r\n            metricsControllers[key].reset();\r\n        });\r\n\r\n        metricsControllers = {};\r\n    }\r\n\r\n    function setup() {\r\n        eventBus.on(events.MANIFEST_UPDATED, update);\r\n        eventBus.on(events.STREAM_TEARDOWN_COMPLETE, resetMetricsControllers);\r\n    }\r\n\r\n    function reset() {\r\n        eventBus.off(events.MANIFEST_UPDATED, update);\r\n        eventBus.off(events.STREAM_TEARDOWN_COMPLETE, resetMetricsControllers);\r\n    }\r\n\r\n    setup();\r\n\r\n    return {\r\n        reset: reset\r\n    };\r\n}\r\n\r\nMetricsCollectionController.__dashjs_factory_name = 'MetricsCollectionController';\r\nexport default dashjs.FactoryMaker.getClassFactory(MetricsCollectionController); /* jshint ignore:line */\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\nimport RangeController from './RangeController';\r\nimport ReportingController from './ReportingController';\r\nimport MetricsHandlersController from './MetricsHandlersController';\r\n\r\nfunction MetricsController(config) {\r\n\r\n    config = config || {};\r\n    let metricsHandlersController,\r\n        reportingController,\r\n        rangeController,\r\n        instance;\r\n\r\n    let context = this.context;\r\n\r\n    function initialize(metricsEntry) {\r\n        try {\r\n            rangeController = RangeController(context).create({\r\n                mediaElement: config.mediaElement\r\n            });\r\n\r\n            rangeController.initialize(metricsEntry.Range);\r\n\r\n            reportingController = ReportingController(context).create({\r\n                debug: config.debug,\r\n                metricsConstants: config.metricsConstants\r\n            });\r\n\r\n            reportingController.initialize(metricsEntry.Reporting, rangeController);\r\n\r\n            metricsHandlersController = MetricsHandlersController(context).create({\r\n                debug: config.debug,\r\n                eventBus: config.eventBus,\r\n                metricsConstants: config.metricsConstants,\r\n                events: config.events\r\n            });\r\n\r\n            metricsHandlersController.initialize(metricsEntry.metrics, reportingController);\r\n        } catch (e) {\r\n            reset();\r\n            throw e;\r\n        }\r\n    }\r\n\r\n    function reset() {\r\n        if (metricsHandlersController) {\r\n            metricsHandlersController.reset();\r\n        }\r\n\r\n        if (reportingController) {\r\n            reportingController.reset();\r\n        }\r\n\r\n        if (rangeController) {\r\n            rangeController.reset();\r\n        }\r\n    }\r\n\r\n    instance = {\r\n        initialize: initialize,\r\n        reset:      reset\r\n    };\r\n\r\n    return instance;\r\n}\r\n\r\nMetricsController.__dashjs_factory_name = 'MetricsController';\r\nexport default dashjs.FactoryMaker.getClassFactory(MetricsController); /* jshint ignore:line */\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\nimport MetricsHandlerFactory from '../metrics/MetricsHandlerFactory';\r\n\r\nfunction MetricsHandlersController(config) {\r\n\r\n    config = config || {};\r\n    let handlers = [];\r\n\r\n    let instance;\r\n    const context = this.context;\r\n    const eventBus = config.eventBus;\r\n    const Events = config.events;\r\n\r\n    let metricsHandlerFactory = MetricsHandlerFactory(context).getInstance({\r\n        debug: config.debug,\r\n        eventBus: config.eventBus,\r\n        metricsConstants: config.metricsConstants\r\n    });\r\n\r\n    function handle(e) {\r\n        handlers.forEach(handler => {\r\n            handler.handleNewMetric(e.metric, e.value, e.mediaType);\r\n        });\r\n    }\r\n\r\n    function initialize(metrics, reportingController) {\r\n        metrics.split(',').forEach(\r\n            (m, midx, ms) => {\r\n                let handler;\r\n\r\n                // there is a bug in ISO23009-1 where the metrics attribute\r\n                // is a comma-separated list but HttpList key can contain a\r\n                // comma enclosed by ().\r\n                if ((m.indexOf('(') !== -1) && m.indexOf(')') === -1) {\r\n                    let nextm = ms[midx + 1];\r\n\r\n                    if (nextm &&\r\n                            (nextm.indexOf('(') === -1) &&\r\n                            (nextm.indexOf(')') !== -1)) {\r\n                        m += ',' + nextm;\r\n\r\n                        // delete the next metric so forEach does not visit.\r\n                        delete ms[midx + 1];\r\n                    }\r\n                }\r\n\r\n                handler = metricsHandlerFactory.create(\r\n                    m,\r\n                    reportingController\r\n                );\r\n\r\n                if (handler) {\r\n                    handlers.push(handler);\r\n                }\r\n            }\r\n        );\r\n\r\n        eventBus.on(\r\n            Events.METRIC_ADDED,\r\n            handle,\r\n            instance\r\n        );\r\n\r\n        eventBus.on(\r\n            Events.METRIC_UPDATED,\r\n            handle,\r\n            instance\r\n        );\r\n    }\r\n\r\n    function reset() {\r\n        eventBus.off(\r\n            Events.METRIC_ADDED,\r\n            handle,\r\n            instance\r\n        );\r\n\r\n        eventBus.off(\r\n            Events.METRIC_UPDATED,\r\n            handle,\r\n            instance\r\n        );\r\n\r\n        handlers.forEach(handler => handler.reset());\r\n\r\n        handlers = [];\r\n    }\r\n\r\n    instance = {\r\n        initialize: initialize,\r\n        reset:      reset\r\n    };\r\n\r\n    return instance;\r\n}\r\n\r\nMetricsHandlersController.__dashjs_factory_name = 'MetricsHandlersController';\r\nexport default dashjs.FactoryMaker.getClassFactory(MetricsHandlersController); /* jshint ignore:line */\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\nimport CustomTimeRanges from '../../utils/CustomTimeRanges';\r\n\r\nfunction RangeController(config) {\r\n\r\n    config = config || {};\r\n    let useWallClockTime = false;\r\n    let context = this.context;\r\n    let instance,\r\n        ranges;\r\n\r\n    let mediaElement = config.mediaElement;\r\n\r\n    function initialize(rs) {\r\n        if (rs && rs.length) {\r\n            rs.forEach(r => {\r\n                let start = r.starttime;\r\n                let end = start + r.duration;\r\n\r\n                ranges.add(start, end);\r\n            });\r\n\r\n            useWallClockTime = !!rs[0]._useWallClockTime;\r\n        }\r\n    }\r\n\r\n    function reset() {\r\n        ranges.clear();\r\n    }\r\n\r\n    function setup() {\r\n        ranges = CustomTimeRanges(context).create();\r\n    }\r\n\r\n    function isEnabled() {\r\n        let numRanges = ranges.length;\r\n        let time;\r\n\r\n        if (!numRanges) {\r\n            return true;\r\n        }\r\n\r\n        // When not present, DASH Metrics reporting is requested\r\n        // for the whole duration of the content.\r\n        time = useWallClockTime ?\r\n                (new Date().getTime() / 1000) :\r\n                mediaElement.currentTime;\r\n\r\n        for (let i = 0; i < numRanges; i += 1) {\r\n            let start = ranges.start(i);\r\n            let end = ranges.end(i);\r\n\r\n            if ((start <= time) && (time < end)) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    instance = {\r\n        initialize: initialize,\r\n        reset:      reset,\r\n        isEnabled:  isEnabled\r\n    };\r\n\r\n    setup();\r\n\r\n    return instance;\r\n}\r\n\r\nRangeController.__dashjs_factory_name = 'RangeController';\r\nexport default dashjs.FactoryMaker.getClassFactory(RangeController); /* jshint ignore:line */\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\nimport ReportingFactory from '../reporting/ReportingFactory';\r\n\r\nfunction ReportingController(config) {\r\n\r\n    let reporters = [];\r\n    let instance;\r\n\r\n    const reportingFactory = ReportingFactory(this.context).getInstance(config);\r\n\r\n    function initialize(reporting, rangeController) {\r\n        // \"if multiple Reporting elements are present, it is expected that\r\n        // the client processes one of the recognized reporting schemes.\"\r\n        // to ignore this, and support multiple Reporting per Metric,\r\n        // simply change the 'some' below to 'forEach'\r\n        reporting.some(r => {\r\n            let reporter = reportingFactory.create(r, rangeController);\r\n\r\n            if (reporter) {\r\n                reporters.push(reporter);\r\n                return true;\r\n            }\r\n        });\r\n    }\r\n\r\n    function reset() {\r\n        reporters.forEach(r => r.reset());\r\n        reporters = [];\r\n    }\r\n\r\n    function report(type, vos) {\r\n        reporters.forEach(r => r.report(type, vos));\r\n    }\r\n\r\n    instance = {\r\n        initialize: initialize,\r\n        reset:      reset,\r\n        report:     report\r\n    };\r\n\r\n    return instance;\r\n}\r\n\r\nReportingController.__dashjs_factory_name = 'ReportingController';\r\nexport default dashjs.FactoryMaker.getClassFactory(ReportingController); /* jshint ignore:line */\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\nimport BufferLevel from './handlers/BufferLevelHandler';\r\nimport DVBErrors from './handlers/DVBErrorsHandler';\r\nimport HttpList from './handlers/HttpListHandler';\r\nimport GenericMetricHandler from './handlers/GenericMetricHandler';\r\n\r\nfunction MetricsHandlerFactory(config) {\r\n\r\n    config = config || {};\r\n    let instance;\r\n    const logger = config.debug ? config.debug.getLogger(instance) : {};\r\n\r\n    // group 1: key, [group 3: n [, group 5: type]]\r\n    let keyRegex = /([a-zA-Z]*)(\\(([0-9]*)(\\,\\s*([a-zA-Z]*))?\\))?/;\r\n\r\n    const context = this.context;\r\n    let knownFactoryProducts = {\r\n        BufferLevel:    BufferLevel,\r\n        DVBErrors:      DVBErrors,\r\n        HttpList:       HttpList,\r\n        PlayList:       GenericMetricHandler,\r\n        RepSwitchList:  GenericMetricHandler,\r\n        TcpList:        GenericMetricHandler\r\n    };\r\n\r\n    function create(listType, reportingController) {\r\n        var matches = listType.match(keyRegex);\r\n        var handler;\r\n\r\n        if (!matches) {\r\n            return;\r\n        }\r\n\r\n        try {\r\n            handler = knownFactoryProducts[matches[1]](context).create({\r\n                eventBus: config.eventBus,\r\n                metricsConstants: config.metricsConstants\r\n            });\r\n\r\n            handler.initialize(\r\n                matches[1],\r\n                reportingController,\r\n                matches[3],\r\n                matches[5]\r\n            );\r\n        } catch (e) {\r\n            handler = null;\r\n            logger.error(`MetricsHandlerFactory: Could not create handler for type ${matches[1]} with args ${matches[3]}, ${matches[5]} (${e.message})`);\r\n        }\r\n\r\n        return handler;\r\n    }\r\n\r\n    function register(key, handler) {\r\n        knownFactoryProducts[key] = handler;\r\n    }\r\n\r\n    function unregister(key) {\r\n        delete knownFactoryProducts[key];\r\n    }\r\n\r\n    instance = {\r\n        create:     create,\r\n        register:   register,\r\n        unregister: unregister\r\n    };\r\n\r\n    return instance;\r\n}\r\n\r\nMetricsHandlerFactory.__dashjs_factory_name = 'MetricsHandlerFactory';\r\nexport default dashjs.FactoryMaker.getSingletonFactory(MetricsHandlerFactory); /* jshint ignore:line */\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\nimport HandlerHelpers from '../../utils/HandlerHelpers';\r\n\r\nfunction BufferLevelHandler(config) {\r\n\r\n    config = config || {};\r\n    let instance,\r\n        reportingController,\r\n        n,\r\n        name,\r\n        interval,\r\n        lastReportedTime;\r\n\r\n    let context = this.context;\r\n    let handlerHelpers = HandlerHelpers(context).getInstance();\r\n\r\n    let storedVOs = [];\r\n\r\n    const metricsConstants = config.metricsConstants;\r\n\r\n    function getLowestBufferLevelVO() {\r\n        try {\r\n            return Object.keys(storedVOs).map(\r\n                key => storedVOs[key]\r\n            ).reduce(\r\n                (a, b) => {\r\n                    return (a.level < b.level) ? a : b;\r\n                }\r\n            );\r\n        } catch (e) {\r\n            return;\r\n        }\r\n    }\r\n\r\n    function intervalCallback() {\r\n        let vo = getLowestBufferLevelVO();\r\n\r\n        if (vo) {\r\n            if (lastReportedTime !== vo.t) {\r\n                lastReportedTime = vo.t;\r\n                reportingController.report(name, vo);\r\n            }\r\n        }\r\n    }\r\n\r\n    function initialize(basename, rc, n_ms) {\r\n        if (rc) {\r\n            // this will throw if n is invalid, to be\r\n            // caught by the initialize caller.\r\n            n = handlerHelpers.validateN(n_ms);\r\n            reportingController = rc;\r\n            name = handlerHelpers.reconstructFullMetricName(basename, n_ms);\r\n            interval = setInterval(intervalCallback, n);\r\n        }\r\n    }\r\n\r\n    function reset() {\r\n        clearInterval(interval);\r\n        interval = null;\r\n        n = 0;\r\n        reportingController = null;\r\n        lastReportedTime = null;\r\n    }\r\n\r\n    function handleNewMetric(metric, vo, type) {\r\n        if (metric === metricsConstants.BUFFER_LEVEL) {\r\n            storedVOs[type] = vo;\r\n        }\r\n    }\r\n\r\n    instance = {\r\n        initialize:         initialize,\r\n        reset:              reset,\r\n        handleNewMetric:    handleNewMetric\r\n    };\r\n\r\n    return instance;\r\n}\r\n\r\nBufferLevelHandler.__dashjs_factory_name = 'BufferLevelHandler';\r\nexport default dashjs.FactoryMaker.getClassFactory(BufferLevelHandler); /* jshint ignore:line */\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\nimport MetricsReportingEvents from '../../MetricsReportingEvents';\r\n\r\nfunction DVBErrorsHandler(config) {\r\n\r\n    config = config || {};\r\n    let instance,\r\n        reportingController;\r\n\r\n    let eventBus = config.eventBus;\r\n    const metricsConstants = config.metricsConstants;\r\n\r\n    function onInitialisationComplete() {\r\n        // we only want to report this once per call to initialize\r\n        eventBus.off(\r\n            MetricsReportingEvents.METRICS_INITIALISATION_COMPLETE,\r\n            onInitialisationComplete,\r\n            this\r\n        );\r\n\r\n        // Note: A Player becoming a reporting Player is itself\r\n        // something which is recorded by the DVBErrors metric.\r\n        eventBus.trigger(\r\n            MetricsReportingEvents.BECAME_REPORTING_PLAYER\r\n        );\r\n    }\r\n\r\n    function initialize(unused, rc) {\r\n        if (rc) {\r\n            reportingController = rc;\r\n\r\n            eventBus.on(\r\n                MetricsReportingEvents.METRICS_INITIALISATION_COMPLETE,\r\n                onInitialisationComplete,\r\n                this\r\n            );\r\n        }\r\n    }\r\n\r\n    function reset() {\r\n        reportingController = null;\r\n    }\r\n\r\n    function handleNewMetric(metric, vo) {\r\n        // simply pass metric straight through\r\n        if (metric === metricsConstants.DVB_ERRORS) {\r\n            if (reportingController) {\r\n                reportingController.report(metric, vo);\r\n            }\r\n        }\r\n    }\r\n\r\n    instance = {\r\n        initialize:         initialize,\r\n        reset:              reset,\r\n        handleNewMetric:    handleNewMetric\r\n    };\r\n\r\n    return instance;\r\n}\r\n\r\nexport default dashjs.FactoryMaker.getClassFactory(DVBErrorsHandler); /* jshint ignore:line */\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\n /**\r\n  * @ignore\r\n  */\r\nfunction GenericMetricHandler() {\r\n\r\n    let instance,\r\n        metricName,\r\n        reportingController;\r\n\r\n    function initialize(name, rc) {\r\n        metricName = name;\r\n        reportingController = rc;\r\n    }\r\n\r\n    function reset() {\r\n        reportingController = null;\r\n        metricName = undefined;\r\n    }\r\n\r\n    function handleNewMetric(metric, vo) {\r\n        // simply pass metric straight through\r\n        if (metric === metricName) {\r\n            if (reportingController) {\r\n                reportingController.report(metricName, vo);\r\n            }\r\n        }\r\n    }\r\n\r\n    instance = {\r\n        initialize:         initialize,\r\n        reset:              reset,\r\n        handleNewMetric:    handleNewMetric\r\n    };\r\n\r\n    return instance;\r\n}\r\n\r\nGenericMetricHandler.__dashjs_factory_name = 'GenericMetricHandler';\r\nexport default dashjs.FactoryMaker.getClassFactory(GenericMetricHandler); /* jshint ignore:line */\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\nimport HandlerHelpers from '../../utils/HandlerHelpers';\r\n\r\nfunction HttpListHandler(config) {\r\n\r\n    config = config || {};\r\n    let instance,\r\n        reportingController,\r\n        n,\r\n        type,\r\n        name,\r\n        interval;\r\n\r\n    let storedVos = [];\r\n\r\n    let handlerHelpers = HandlerHelpers(this.context).getInstance();\r\n\r\n    const metricsConstants = config.metricsConstants;\r\n\r\n    function intervalCallback() {\r\n        var vos = storedVos;\r\n\r\n        if (vos.length) {\r\n            if (reportingController) {\r\n                reportingController.report(name, vos);\r\n            }\r\n        }\r\n\r\n        storedVos = [];\r\n    }\r\n\r\n    function initialize(basename, rc, n_ms, requestType) {\r\n        if (rc) {\r\n\r\n            // this will throw if n is invalid, to be\r\n            // caught by the initialize caller.\r\n            n = handlerHelpers.validateN(n_ms);\r\n\r\n            reportingController = rc;\r\n\r\n            if (requestType && requestType.length) {\r\n                type = requestType;\r\n            }\r\n\r\n            name = handlerHelpers.reconstructFullMetricName(\r\n                basename,\r\n                n_ms,\r\n                requestType\r\n            );\r\n\r\n            interval = setInterval(intervalCallback, n);\r\n        }\r\n    }\r\n\r\n    function reset() {\r\n        clearInterval(interval);\r\n        interval = null;\r\n        n = null;\r\n        type = null;\r\n        storedVos = [];\r\n        reportingController = null;\r\n    }\r\n\r\n    function handleNewMetric(metric, vo) {\r\n        if (metric === metricsConstants.HTTP_REQUEST) {\r\n            if (!type || (type === vo.type)) {\r\n                storedVos.push(vo);\r\n            }\r\n        }\r\n    }\r\n\r\n    instance = {\r\n        initialize:         initialize,\r\n        reset:              reset,\r\n        handleNewMetric:    handleNewMetric\r\n    };\r\n\r\n    return instance;\r\n}\r\n\r\nHttpListHandler.__dashjs_factory_name = 'HttpListHandler';\r\nexport default dashjs.FactoryMaker.getClassFactory(HttpListHandler); /* jshint ignore:line */\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\nimport DVBReporting from './reporters/DVBReporting';\r\n\r\nfunction ReportingFactory(config) {\r\n    config = config || {};\r\n\r\n    const knownReportingSchemeIdUris = {\r\n        'urn:dvb:dash:reporting:2014': DVBReporting\r\n    };\r\n\r\n    const context = this.context;\r\n    let instance;\r\n    const logger = config.debug ? config.debug.getLogger(instance) : {};\r\n    const metricsConstants = config.metricsConstants;\r\n\r\n    function create(entry, rangeController) {\r\n        let reporting;\r\n\r\n        try {\r\n            reporting = knownReportingSchemeIdUris[entry.schemeIdUri](context).create({\r\n                metricsConstants: metricsConstants\r\n            });\r\n\r\n            reporting.initialize(entry, rangeController);\r\n        } catch (e) {\r\n            reporting = null;\r\n            logger.error(`ReportingFactory: could not create Reporting with schemeIdUri ${entry.schemeIdUri} (${e.message})`);\r\n        }\r\n\r\n        return reporting;\r\n    }\r\n\r\n    function register(schemeIdUri, moduleName) {\r\n        knownReportingSchemeIdUris[schemeIdUri] = moduleName;\r\n    }\r\n\r\n    function unregister(schemeIdUri) {\r\n        delete knownReportingSchemeIdUris[schemeIdUri];\r\n    }\r\n\r\n    instance = {\r\n        create:     create,\r\n        register:   register,\r\n        unregister: unregister\r\n    };\r\n\r\n    return instance;\r\n}\r\n\r\nReportingFactory.__dashjs_factory_name = 'ReportingFactory';\r\nexport default dashjs.FactoryMaker.getSingletonFactory(ReportingFactory); /* jshint ignore:line */\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\nimport MetricSerialiser from '../../utils/MetricSerialiser';\r\nimport RNG from '../../utils/RNG';\r\n\r\nfunction DVBReporting(config) {\r\n    config = config || {};\r\n    let instance;\r\n\r\n    let context = this.context;\r\n    let metricSerialiser,\r\n        randomNumberGenerator,\r\n        reportingPlayerStatusDecided,\r\n        isReportingPlayer,\r\n        reportingUrl,\r\n        rangeController;\r\n\r\n    let USE_DRAFT_DVB_SPEC = true;\r\n    let allowPendingRequestsToCompleteOnReset = true;\r\n    let pendingRequests = [];\r\n\r\n    const metricsConstants = config.metricsConstants;\r\n\r\n    function setup() {\r\n        metricSerialiser = MetricSerialiser(context).getInstance();\r\n        randomNumberGenerator = RNG(context).getInstance();\r\n\r\n        resetInitialSettings();\r\n    }\r\n\r\n    function doGetRequest(url, successCB, failureCB) {\r\n        let req = new XMLHttpRequest();\r\n        const oncomplete = function () {\r\n            let reqIndex = pendingRequests.indexOf(req);\r\n\r\n            if (reqIndex === -1) {\r\n                return;\r\n            } else {\r\n                pendingRequests.splice(reqIndex, 1);\r\n            }\r\n\r\n            if ((req.status >= 200) && (req.status < 300)) {\r\n                if (successCB) {\r\n                    successCB();\r\n                }\r\n            } else {\r\n                if (failureCB) {\r\n                    failureCB();\r\n                }\r\n            }\r\n        };\r\n\r\n        pendingRequests.push(req);\r\n\r\n        try {\r\n            req.open('GET', url);\r\n            req.onloadend = oncomplete;\r\n            req.onerror = oncomplete;\r\n            req.send();\r\n        } catch (e) {\r\n            req.onerror();\r\n        }\r\n    }\r\n\r\n    function report(type, vos) {\r\n        if (!Array.isArray(vos)) {\r\n            vos = [vos];\r\n        }\r\n\r\n        // If the Player is not a reporting Player, then the Player shall\r\n        // not report any errors.\r\n        // ... In addition to any time restrictions specified by a Range\r\n        // element within the Metrics element.\r\n        if (isReportingPlayer && rangeController.isEnabled()) {\r\n\r\n            // This reporting mechanism operates by creating one HTTP GET\r\n            // request for every entry in the top level list of the metric.\r\n            vos.forEach(function (vo) {\r\n                let url = metricSerialiser.serialise(vo);\r\n\r\n                // this has been proposed for errata\r\n                if (USE_DRAFT_DVB_SPEC && (type !== metricsConstants.DVB_ERRORS)) {\r\n                    url = `metricname=${type}&${url}`;\r\n                }\r\n\r\n                // Take the value of the @reportingUrl attribute, append a\r\n                // question mark ('?') character and then append the string\r\n                // created in the previous step.\r\n                url = `${reportingUrl}?${url}`;\r\n\r\n                // Make an HTTP GET request to the URL contained within the\r\n                // string created in the previous step.\r\n                doGetRequest(url, null, function () {\r\n                    // If the Player is unable to make the report, for\r\n                    // example because the @reportingUrl is invalid, the\r\n                    // host cannot be reached, or an HTTP status code other\r\n                    // than one in the 200 series is received, the Player\r\n                    // shall cease being a reporting Player for the\r\n                    // duration of the MPD.\r\n                    isReportingPlayer = false;\r\n                });\r\n            });\r\n        }\r\n    }\r\n\r\n    function initialize(entry, rc) {\r\n        let probability;\r\n\r\n        rangeController = rc;\r\n\r\n        reportingUrl = entry['dvb:reportingUrl'];\r\n\r\n        // If a required attribute is missing, the Reporting descriptor may\r\n        // be ignored by the Player\r\n        if (!reportingUrl) {\r\n            throw new Error(\r\n                'required parameter missing (dvb:reportingUrl)'\r\n            );\r\n        }\r\n\r\n        // A Player's status, as a reporting Player or not, shall remain\r\n        // static for the duration of the MPD, regardless of MPD updates.\r\n        // (i.e. only calling reset (or failure) changes this state)\r\n        if (!reportingPlayerStatusDecided) {\r\n            // NOTE: DVB spec has a typo where it incorrectly references the\r\n            // priority attribute, which should be probability\r\n            probability = entry['dvb:probability'] || entry['dvb:priority'] || 0;\r\n            // If the @priority attribute is set to 1000, it shall be a reporting Player.\r\n            // If the @priority attribute is missing, the Player shall not be a reporting Player.\r\n            // For any other value of the @probability attribute, it shall decide at random whether to be a\r\n            // reporting Player, such that the probability of being one is @probability/1000.\r\n            if (probability && (probability === 1000 || ((probability / 1000) >= randomNumberGenerator.random()))) {\r\n                isReportingPlayer = true;\r\n            }\r\n\r\n            reportingPlayerStatusDecided = true;\r\n        }\r\n    }\r\n\r\n    function resetInitialSettings() {\r\n        reportingPlayerStatusDecided = false;\r\n        isReportingPlayer = false;\r\n        reportingUrl = null;\r\n        rangeController = null;\r\n    }\r\n\r\n    function reset() {\r\n        if (!allowPendingRequestsToCompleteOnReset) {\r\n            pendingRequests.forEach(req => req.abort());\r\n            pendingRequests = [];\r\n        }\r\n\r\n        resetInitialSettings();\r\n    }\r\n\r\n    instance = {\r\n        report:     report,\r\n        initialize: initialize,\r\n        reset:      reset\r\n    };\r\n\r\n    setup();\r\n\r\n    return instance;\r\n}\r\n\r\nDVBReporting.__dashjs_factory_name = 'DVBReporting';\r\nexport default dashjs.FactoryMaker.getClassFactory(DVBReporting); /* jshint ignore:line */\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\nimport DVBErrors from '../vo/DVBErrors';\r\nimport MetricsReportingEvents from '../MetricsReportingEvents';\r\n\r\nfunction DVBErrorsTranslator(config) {\r\n\r\n    config = config || {};\r\n    let instance,\r\n        mpd;\r\n    const eventBus = config.eventBus;\r\n    const dashMetrics = config.dashMetrics;\r\n    const metricsConstants = config.metricsConstants;\r\n    //MediaPlayerEvents have been added to Events in MediaPlayer class\r\n    const Events = config.events;\r\n\r\n    function report(vo) {\r\n        let o = new DVBErrors();\r\n\r\n        if (!mpd) {\r\n            return;\r\n        }\r\n\r\n        for (const key in vo) {\r\n            if (vo.hasOwnProperty(key)) {\r\n                o[key] = vo[key];\r\n            }\r\n        }\r\n\r\n        if (!o.mpdurl) {\r\n            o.mpdurl = mpd.originalUrl || mpd.url;\r\n        }\r\n\r\n        if (!o.terror) {\r\n            o.terror = new Date();\r\n        }\r\n\r\n        dashMetrics.addDVBErrors(o);\r\n    }\r\n\r\n    function onManifestUpdate(e) {\r\n        if (e.error) {\r\n            return;\r\n        }\r\n\r\n        mpd = e.manifest;\r\n    }\r\n\r\n    function onServiceLocationChanged(e) {\r\n        report({\r\n            errorcode:          DVBErrors.BASE_URL_CHANGED,\r\n            servicelocation:    e.entry\r\n        });\r\n    }\r\n\r\n    function onBecameReporter() {\r\n        report({\r\n            errorcode: DVBErrors.BECAME_REPORTER\r\n        });\r\n    }\r\n\r\n    function handleHttpMetric(vo) {\r\n        if ((vo.responsecode === 0) ||      // connection failure - unknown\r\n                (vo.responsecode >= 400) || // HTTP error status code\r\n                (vo.responsecode < 100) ||  // unknown status codes\r\n                (vo.responsecode >= 600)) { // unknown status codes\r\n            report({\r\n                errorcode:          vo.responsecode || DVBErrors.CONNECTION_ERROR,\r\n                url:                vo.url,\r\n                terror:             vo.tresponse,\r\n                servicelocation:    vo._serviceLocation\r\n            });\r\n        }\r\n    }\r\n\r\n    function onMetricEvent(e) {\r\n        switch (e.metric) {\r\n        case metricsConstants.HTTP_REQUEST:\r\n            handleHttpMetric(e.value);\r\n            break;\r\n        default:\r\n            break;\r\n        }\r\n    }\r\n\r\n    function onPlaybackError(e) {\r\n        let reason = e.error ? e.error.code : 0;\r\n        let errorcode;\r\n\r\n        switch (reason) {\r\n            case MediaError.MEDIA_ERR_NETWORK:\r\n                errorcode = DVBErrors.CONNECTION_ERROR;\r\n                break;\r\n            case MediaError.MEDIA_ERR_DECODE:\r\n                errorcode = DVBErrors.CORRUPT_MEDIA_OTHER;\r\n                break;\r\n            default:\r\n                return;\r\n        }\r\n\r\n        report({\r\n            errorcode: errorcode\r\n        });\r\n    }\r\n\r\n    function initialise() {\r\n        eventBus.on(Events.MANIFEST_UPDATED, onManifestUpdate, instance);\r\n        eventBus.on(\r\n            Events.SERVICE_LOCATION_BLACKLIST_CHANGED,\r\n            onServiceLocationChanged,\r\n            instance\r\n        );\r\n        eventBus.on(Events.METRIC_ADDED, onMetricEvent, instance);\r\n        eventBus.on(Events.METRIC_UPDATED, onMetricEvent, instance);\r\n        eventBus.on(Events.PLAYBACK_ERROR, onPlaybackError, instance);\r\n        eventBus.on(\r\n            MetricsReportingEvents.BECAME_REPORTING_PLAYER,\r\n            onBecameReporter,\r\n            instance\r\n        );\r\n    }\r\n\r\n    function reset() {\r\n        eventBus.off(Events.MANIFEST_UPDATED, onManifestUpdate, instance);\r\n        eventBus.off(\r\n            Events.SERVICE_LOCATION_BLACKLIST_CHANGED,\r\n            onServiceLocationChanged,\r\n            instance\r\n        );\r\n        eventBus.off(Events.METRIC_ADDED, onMetricEvent, instance);\r\n        eventBus.off(Events.METRIC_UPDATED, onMetricEvent, instance);\r\n        eventBus.off(Events.PLAYBACK_ERROR, onPlaybackError, instance);\r\n        eventBus.off(\r\n            MetricsReportingEvents.BECAME_REPORTING_PLAYER,\r\n            onBecameReporter,\r\n            instance\r\n        );\r\n    }\r\n\r\n    instance = {\r\n        initialise: initialise,\r\n        reset:      reset\r\n    };\r\n\r\n    initialise();\r\n\r\n    return instance;\r\n}\r\n\r\nDVBErrorsTranslator.__dashjs_factory_name = 'DVBErrorsTranslator';\r\nexport default dashjs.FactoryMaker.getSingletonFactory(DVBErrorsTranslator); /* jshint ignore:line */\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\n /**\r\n  * @ignore\r\n  */\r\nfunction HandlerHelpers() {\r\n    return {\r\n        reconstructFullMetricName: function (key, n, type) {\r\n            let mn = key;\r\n\r\n            if (n) {\r\n                mn += '(' + n;\r\n\r\n                if (type && type.length) {\r\n                    mn += ',' + type;\r\n                }\r\n\r\n                mn += ')';\r\n            }\r\n\r\n            return mn;\r\n        },\r\n\r\n        validateN: function (n_ms) {\r\n            if (!n_ms) {\r\n                throw new Error('missing n');\r\n            }\r\n\r\n            if (isNaN(n_ms)) {\r\n                throw new Error('n is NaN');\r\n            }\r\n\r\n            // n is a positive integer is defined to refer to the metric\r\n            // in which the buffer level is recorded every n ms.\r\n            if (n_ms < 0) {\r\n                throw new Error('n must be positive');\r\n            }\r\n\r\n            return n_ms;\r\n        }\r\n    };\r\n}\r\n\r\nHandlerHelpers.__dashjs_factory_name = 'HandlerHelpers';\r\nexport default dashjs.FactoryMaker.getSingletonFactory(HandlerHelpers); /* jshint ignore:line */\r\n","import Metrics from '../vo/Metrics';\r\nimport Range from '../vo/Range';\r\nimport Reporting from '../vo/Reporting';\r\n\r\nfunction ManifestParsing (config) {\r\n    config = config || {};\r\n    let instance;\r\n    let adapter = config.adapter;\r\n    const constants = config.constants;\r\n\r\n    function getMetricsRangeStartTime(manifest, dynamic, range) {\r\n        let voPeriods,\r\n            reportingStartTime;\r\n        let presentationStartTime = 0;\r\n\r\n        if (dynamic) {\r\n            // For services with MPD@type='dynamic', the start time is\r\n            // indicated in wall clock time by adding the value of this\r\n            // attribute to the value of the MPD@availabilityStartTime\r\n            // attribute.\r\n            presentationStartTime = adapter.getAvailabilityStartTime(manifest) / 1000;\r\n        } else {\r\n            // For services with MPD@type='static', the start time is indicated\r\n            // in Media Presentation time and is relative to the PeriodStart\r\n            // time of the first Period in this MPD.\r\n            voPeriods = adapter.getRegularPeriods(manifest);\r\n\r\n            if (voPeriods.length) {\r\n                presentationStartTime = voPeriods[0].start;\r\n            }\r\n        }\r\n\r\n        // When not present, DASH Metrics collection is\r\n        // requested from the beginning of content\r\n        // consumption.\r\n        reportingStartTime = presentationStartTime;\r\n\r\n        if (range && range.hasOwnProperty(constants.START_TIME)) {\r\n            reportingStartTime += range.starttime;\r\n        }\r\n\r\n        return reportingStartTime;\r\n    }\r\n\r\n    function getMetrics(manifest) {\r\n        let metrics = [];\r\n\r\n        if (manifest && manifest.Metrics_asArray) {\r\n            manifest.Metrics_asArray.forEach(metric => {\r\n                var metricEntry = new Metrics();\r\n                var isDynamic = adapter.getIsDynamic(manifest);\r\n\r\n                if (metric.hasOwnProperty('metrics')) {\r\n                    metricEntry.metrics = metric.metrics;\r\n                } else {\r\n                    return;\r\n                }\r\n\r\n                if (metric.Range_asArray) {\r\n                    metric.Range_asArray.forEach(range => {\r\n                        var rangeEntry = new Range();\r\n\r\n                        rangeEntry.starttime =\r\n                            getMetricsRangeStartTime(manifest, isDynamic, range);\r\n\r\n                        if (range.hasOwnProperty('duration')) {\r\n                            rangeEntry.duration = range.duration;\r\n                        } else {\r\n                            // if not present, the value is identical to the\r\n                            // Media Presentation duration.\r\n                            rangeEntry.duration = adapter.getDuration(manifest);\r\n                        }\r\n\r\n                        rangeEntry._useWallClockTime = isDynamic;\r\n\r\n                        metricEntry.Range.push(rangeEntry);\r\n                    });\r\n                }\r\n\r\n                if (metric.Reporting_asArray) {\r\n                    metric.Reporting_asArray.forEach(reporting => {\r\n                        var reportingEntry = new Reporting();\r\n\r\n                        if (reporting.hasOwnProperty(constants.SCHEME_ID_URI)) {\r\n                            reportingEntry.schemeIdUri = reporting.schemeIdUri;\r\n                        } else {\r\n                            // Invalid Reporting. schemeIdUri must be set. Ignore.\r\n                            return;\r\n                        }\r\n\r\n                        for (const prop in reporting) {\r\n                            if (reporting.hasOwnProperty(prop)) {\r\n                                reportingEntry[prop] = reporting[prop];\r\n                            }\r\n                        }\r\n\r\n                        metricEntry.Reporting.push(reportingEntry);\r\n                    });\r\n                } else {\r\n                    // Invalid Metrics. At least one reporting must be present. Ignore\r\n                    return;\r\n                }\r\n\r\n                metrics.push(metricEntry);\r\n            });\r\n        }\r\n\r\n        return metrics;\r\n    }\r\n\r\n    instance = {\r\n        getMetrics: getMetrics\r\n    };\r\n\r\n    return instance;\r\n}\r\n\r\nManifestParsing.__dashjs_factory_name = 'ManifestParsing';\r\nexport default dashjs.FactoryMaker.getSingletonFactory(ManifestParsing); /* jshint ignore:line */","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\n/**\r\n * @ignore\r\n */\r\nfunction MetricSerialiser() {\r\n\r\n    // For each entry in the top level list within the metric (in the case\r\n    // of the DVBErrors metric each entry corresponds to an \"error event\"\r\n    // described in clause 10.8.4) the Player shall:\r\n    function serialise(metric) {\r\n        let pairs = [];\r\n        let obj = [];\r\n        let key,\r\n            value;\r\n\r\n        // Take each (key, value) pair from the metric entry and create a\r\n        // string consisting of the name of the key, followed by an equals\r\n        // ('=') character, followed by the string representation of the\r\n        // value. The string representation of the value is created based\r\n        // on the type of the value following the instructions in Table 22.\r\n        for (key in metric) {\r\n            if (metric.hasOwnProperty(key) && (key.indexOf('_') !== 0)) {\r\n                value = metric[key];\r\n\r\n                // we want to ensure that keys still end up in the report\r\n                // even if there is no value\r\n                if ((value === undefined) || (value === null)) {\r\n                    value = '';\r\n                }\r\n\r\n                // DVB A168 10.12.4 Table 22\r\n                if (Array.isArray(value)) {\r\n                    // if trace or similar is null, do not include in output\r\n                    if (!value.length) {\r\n                        continue;\r\n                    }\r\n\r\n                    obj = [];\r\n\r\n                    value.forEach(function (v) {\r\n                        let isBuiltIn = Object.prototype.toString.call(v).slice(8, -1) !== 'Object';\r\n\r\n                        obj.push(isBuiltIn ? v : serialise(v));\r\n                    });\r\n\r\n                    value = obj.map(encodeURIComponent).join(',');\r\n                } else if (typeof value === 'string') {\r\n                    value = encodeURIComponent(value);\r\n                } else if (value instanceof Date) {\r\n                    value = value.toISOString();\r\n                } else if (typeof value === 'number') {\r\n                    value = Math.round(value);\r\n                }\r\n\r\n                pairs.push(key + '=' + value);\r\n            }\r\n        }\r\n\r\n        // Concatenate the strings created in the previous step with an\r\n        // ampersand ('&') character between each one.\r\n        return pairs.join('&');\r\n    }\r\n\r\n    return {\r\n        serialise: serialise\r\n    };\r\n}\r\n\r\nMetricSerialiser.__dashjs_factory_name = 'MetricSerialiser';\r\nexport default dashjs.FactoryMaker.getSingletonFactory(MetricSerialiser); /* jshint ignore:line */\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\n /**\r\n  * @ignore\r\n  */\r\nfunction RNG() {\r\n\r\n    // check whether secure random numbers are available. if not, revert to\r\n    // using Math.random\r\n    let crypto = window.crypto || window.msCrypto;\r\n\r\n    // could just as easily use any other array type by changing line below\r\n    let ArrayType = Uint32Array;\r\n    let MAX_VALUE = Math.pow(2, ArrayType.BYTES_PER_ELEMENT * 8) - 1;\r\n\r\n    // currently there is only one client for this code, and that only uses\r\n    // a single random number per initialisation. may want to increase this\r\n    // number if more consumers in the future\r\n    let NUM_RANDOM_NUMBERS = 10;\r\n\r\n    let randomNumbers,\r\n        index,\r\n        instance;\r\n\r\n    function initialise() {\r\n        if (crypto) {\r\n            if (!randomNumbers) {\r\n                randomNumbers = new ArrayType(NUM_RANDOM_NUMBERS);\r\n            }\r\n            crypto.getRandomValues(randomNumbers);\r\n            index = 0;\r\n        }\r\n    }\r\n\r\n    function rand(min, max) {\r\n        let r;\r\n\r\n        if (!min) {\r\n            min = 0;\r\n        }\r\n\r\n        if (!max) {\r\n            max = 1;\r\n        }\r\n\r\n        if (crypto) {\r\n            if (index === randomNumbers.length) {\r\n                initialise();\r\n            }\r\n\r\n            r = randomNumbers[index] / MAX_VALUE;\r\n            index += 1;\r\n        } else {\r\n            r = Math.random();\r\n        }\r\n\r\n        return (r * (max - min)) + min;\r\n    }\r\n\r\n    instance = {\r\n        random: rand\r\n    };\r\n\r\n    initialise();\r\n\r\n    return instance;\r\n}\r\n\r\nRNG.__dashjs_factory_name = 'RNG';\r\nexport default dashjs.FactoryMaker.getSingletonFactory(RNG); /* jshint ignore:line */\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n/**\r\n * @class\r\n * @ignore\r\n */\r\nclass DVBErrors {\r\n    constructor() {\r\n        this.mpdurl = null;\r\n        // String - Absolute URL from which the MPD was originally\r\n        // retrieved (MPD updates will not change this value).\r\n\r\n        this.errorcode = null;\r\n        // String - The value of errorcode depends upon the type\r\n        // of error being reported. For an error listed in the\r\n        // ErrorType column below the value is as described in the\r\n        // Value column.\r\n        //\r\n        // ErrorType                                            Value\r\n        // ---------                                            -----\r\n        // HTTP error status code                               HTTP status code\r\n        // Unknown HTTP status code                             HTTP status code\r\n        // SSL connection failed                                \"SSL\" followed by SSL alert value\r\n        // DNS resolution failed                                \"C00\"\r\n        // Host unreachable                                     \"C01\"\r\n        // Connection refused                                   \"C02\"\r\n        // Connection error – Not otherwise specified           \"C03\"\r\n        // Corrupt media – ISO BMFF container cannot be parsed  \"M00\"\r\n        // Corrupt media – Not otherwise specified              \"M01\"\r\n        // Changing Base URL in use due to errors               \"F00\"\r\n        // Becoming an error reporting Player                   \"S00\"\r\n\r\n        this.terror = null;\r\n        // Real-Time - Date and time at which error occurred in UTC,\r\n        // formatted as a combined date and time according to ISO 8601.\r\n\r\n        this.url = null;\r\n        // String - Absolute URL from which data was being requested\r\n        // when this error occurred. If the error report is in relation\r\n        // to corrupt media or changing BaseURL, this may be a null\r\n        // string if the URL from which the media was obtained or\r\n        // which led to the change of BaseURL is no longer known.\r\n\r\n        this.ipaddress = null;\r\n        // String - IP Address which the host name in \"url\" resolved to.\r\n        // If the error report is in relation to corrupt media or\r\n        // changing BaseURL, this may be a null string if the URL\r\n        // from which the media was obtained or which led to the\r\n        // change of BaseURL is no longer known.\r\n\r\n        this.servicelocation = null;\r\n        // String - The value of the serviceLocation field in the\r\n        // BaseURL being used. In the event of this report indicating\r\n        // a change of BaseURL this is the value from the BaseURL\r\n        // being moved from.\r\n    }\r\n}\r\n\r\nDVBErrors.SSL_CONNECTION_FAILED_PREFIX = 'SSL';\r\nDVBErrors.DNS_RESOLUTION_FAILED =        'C00';\r\nDVBErrors.HOST_UNREACHABLE =             'C01';\r\nDVBErrors.CONNECTION_REFUSED =           'C02';\r\nDVBErrors.CONNECTION_ERROR =             'C03';\r\nDVBErrors.CORRUPT_MEDIA_ISOBMFF =        'M00';\r\nDVBErrors.CORRUPT_MEDIA_OTHER =          'M01';\r\nDVBErrors.BASE_URL_CHANGED =             'F00';\r\nDVBErrors.BECAME_REPORTER =              'S00';\r\n\r\nexport default DVBErrors;\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n/**\r\n * @class\r\n * @ignore\r\n */\r\nclass Metrics {\r\n    constructor() {\r\n\r\n        this.metrics = '';\r\n        this.Range = [];\r\n        this.Reporting = [];\r\n    }\r\n}\r\n\r\nexport default Metrics;\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n/**\r\n * @class\r\n * @ignore\r\n */\r\nclass Range {\r\n    constructor() {\r\n\r\n        // as defined in ISO23009-1\r\n        this.starttime = 0;\r\n        this.duration = Infinity;\r\n\r\n        // for internal use\r\n        this._useWallClockTime = false;\r\n    }\r\n}\r\n\r\nexport default Range;\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n/**\r\n * @class\r\n * @ignore\r\n */\r\nclass Reporting {\r\n    constructor() {\r\n        // Reporting is a DescriptorType and doesn't have any additional fields\r\n        this.schemeIdUri = '';\r\n        this.value = '';\r\n    }\r\n}\r\n\r\nexport default Reporting;\r\n","/**\r\n* The copyright in this software is being made available under the BSD License,\r\n* included below. This software may be subject to other third party and contributor\r\n* rights, including patent rights, and no such rights are granted under this license.\r\n*\r\n* Copyright (c) 2013, Dash Industry Forum.\r\n* All rights reserved.\r\n*\r\n* Redistribution and use in source and binary forms, with or without modification,\r\n* are permitted provided that the following conditions are met:\r\n*  * Redistributions of source code must retain the above copyright notice, this\r\n*  list of conditions and the following disclaimer.\r\n*  * Redistributions in binary form must reproduce the above copyright notice,\r\n*  this list of conditions and the following disclaimer in the documentation and/or\r\n*  other materials provided with the distribution.\r\n*  * Neither the name of Dash Industry Forum nor the names of its\r\n*  contributors may be used to endorse or promote products derived from this software\r\n*  without specific prior written permission.\r\n*\r\n*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n*  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n*  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n*  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n*  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n*  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n*  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n*  POSSIBILITY OF SUCH DAMAGE.\r\n*/\r\nimport FactoryMaker from '../../core/FactoryMaker';\r\nimport { checkInteger } from '../utils/SupervisorTools';\r\n\r\nfunction CustomTimeRanges(/*config*/) {\r\n    let customTimeRangeArray = [];\r\n    let length = 0;\r\n\r\n    function add(start, end) {\r\n        let i = 0;\r\n\r\n        for (i = 0; (i < this.customTimeRangeArray.length) && (start > this.customTimeRangeArray[i].start); i++);\r\n\r\n        this.customTimeRangeArray.splice(i, 0, {start: start,end: end});\r\n\r\n        for (i = 0; i < this.customTimeRangeArray.length - 1; i++) {\r\n            if (this.mergeRanges(i,i + 1)) {\r\n                i--;\r\n            }\r\n        }\r\n        this.length = this.customTimeRangeArray.length;\r\n    }\r\n\r\n    function clear() {\r\n        this.customTimeRangeArray = [];\r\n        this.length = 0;\r\n    }\r\n\r\n    function remove(start, end) {\r\n        for (let i = 0; i < this.customTimeRangeArray.length; i++) {\r\n            if (start <= this.customTimeRangeArray[i].start && end >= this.customTimeRangeArray[i].end) {\r\n                //      |--------------Range i-------|\r\n                //|---------------Range to remove ---------------|\r\n                //    or\r\n                //|--------------Range i-------|\r\n                //|--------------Range to remove ---------------|\r\n                //    or\r\n                //                 |--------------Range i-------|\r\n                //|--------------Range to remove ---------------|\r\n                this.customTimeRangeArray.splice(i,1);\r\n                i--;\r\n\r\n            } else if (start > this.customTimeRangeArray[i].start && end < this.customTimeRangeArray[i].end) {\r\n                //|-----------------Range i----------------|\r\n                //        |-------Range to remove -----|\r\n                this.customTimeRangeArray.splice(i + 1, 0, {start: end,end: this.customTimeRangeArray[i].end});\r\n                this.customTimeRangeArray[i].end = start;\r\n                break;\r\n            } else if ( start > this.customTimeRangeArray[i].start && start < this.customTimeRangeArray[i].end) {\r\n                //|-----------Range i----------|\r\n                //                    |---------Range to remove --------|\r\n                //    or\r\n                //|-----------------Range i----------------|\r\n                //            |-------Range to remove -----|\r\n                this.customTimeRangeArray[i].end = start;\r\n            } else if ( end > this.customTimeRangeArray[i].start && end < this.customTimeRangeArray[i].end) {\r\n                //                     |-----------Range i----------|\r\n                //|---------Range to remove --------|\r\n                //            or\r\n                //|-----------------Range i----------------|\r\n                //|-------Range to remove -----|\r\n                this.customTimeRangeArray[i].start = end;\r\n            }\r\n        }\r\n\r\n        this.length = this.customTimeRangeArray.length;\r\n    }\r\n\r\n    function mergeRanges(rangeIndex1, rangeIndex2) {\r\n        let range1 = this.customTimeRangeArray[rangeIndex1];\r\n        let range2 = this.customTimeRangeArray[rangeIndex2];\r\n\r\n        if (range1.start <=  range2.start && range2.start <= range1.end && range1.end <= range2.end) {\r\n            //|-----------Range1----------|\r\n            //                    |-----------Range2----------|\r\n            range1.end = range2.end;\r\n            this.customTimeRangeArray.splice(rangeIndex2,1);\r\n            return true;\r\n\r\n        } else if (range2.start <= range1.start && range1.start <= range2.end && range2.end <= range1.end) {\r\n            //                |-----------Range1----------|\r\n            //|-----------Range2----------|\r\n            range1.start = range2.start;\r\n            this.customTimeRangeArray.splice(rangeIndex2,1);\r\n            return true;\r\n        } else if (range2.start <= range1.start && range1.start <= range2.end && range1.end <= range2.end) {\r\n            //      |--------Range1-------|\r\n            //|---------------Range2--------------|\r\n            this.customTimeRangeArray.splice(rangeIndex1,1);\r\n            return true;\r\n        } else if (range1.start <= range2.start && range2.start <= range1.end && range2.end <= range1.end) {\r\n            //|-----------------Range1--------------|\r\n            //        |-----------Range2----------|\r\n            this.customTimeRangeArray.splice(rangeIndex2,1);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function start(index) {\r\n        checkInteger(index);\r\n\r\n        if (index >= this.customTimeRangeArray.length || index < 0) {\r\n            return NaN;\r\n        }\r\n\r\n        return this.customTimeRangeArray[index].start;\r\n    }\r\n\r\n    function end(index) {\r\n        checkInteger(index);\r\n\r\n        if (index >= this.customTimeRangeArray.length || index < 0) {\r\n            return NaN;\r\n        }\r\n\r\n        return this.customTimeRangeArray[index].end;\r\n    }\r\n\r\n    return {\r\n        customTimeRangeArray: customTimeRangeArray,\r\n        length: length,\r\n        add: add,\r\n        clear: clear,\r\n        remove: remove,\r\n        mergeRanges: mergeRanges,\r\n        start: start,\r\n        end: end\r\n    };\r\n}\r\nCustomTimeRanges.__dashjs_factory_name = 'CustomTimeRanges';\r\nexport default FactoryMaker.getClassFactory(CustomTimeRanges);\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\nimport Constants from '../constants/Constants';\r\n\r\nexport function checkParameterType(parameter, type) {\r\n    if (typeof parameter !== type) {\r\n        throw Constants.BAD_ARGUMENT_ERROR;\r\n    }\r\n}\r\n\r\nexport function checkInteger(parameter) {\r\n    const isInt = parameter !== null && !isNaN(parameter) && (parameter % 1 === 0);\r\n\r\n    if (!isInt) {\r\n        throw Constants.BAD_ARGUMENT_ERROR + ' : argument is not an integer';\r\n    }\r\n}\r\n\r\nexport function checkRange(parameter, min, max) {\r\n    if (parameter < min || parameter > max) {\r\n        throw Constants.BAD_ARGUMENT_ERROR + ' : argument out of range';\r\n    }\r\n}\r\n\r\nexport function checkIsVideoOrAudioType(type) {\r\n    if (typeof type !== 'string' || (type !== Constants.AUDIO && type !== Constants.VIDEO)) {\r\n        throw Constants.BAD_ARGUMENT_ERROR;\r\n    }\r\n}"],"names":["f","g","exports","module","define","amd","window","global","self","this","dashjs","MetricsReporting","r","e","n","t","o","i","c","require","u","a","Error","code","p","call","length","1","_dereq_","instance","singletonContexts","singletonFactories","classFactories","FactoryMaker","undefined","extend","name","childInstance","override","context","getSingletonInstance","setSingletonInstance","className","obj","push","getSingletonFactory","classConstructor","factory","getFactoryByName","__dashjs_factory_name","getInstance","merge","arguments","getSingletonFactoryByName","updateSingletonFactory","updateFactory","getClassFactory","create","getClassFactoryByName","updateClassFactory","factoriesArray","args","classInstance","extensionObject","prop","extension","apply","parent","hasOwnProperty","getClassName","EventsBase","events","config","evt","publicOnly","indexOf","Constants","init","constants","STREAM","VIDEO","AUDIO","TEXT","FRAGMENTED_TEXT","EMBEDDED_TEXT","MUXED","IMAGE","STPP","TTML","VTT","WVTT","ABR_STRATEGY_DYNAMIC","ABR_STRATEGY_BOLA","ABR_STRATEGY_THROUGHPUT","MOVING_AVERAGE_SLIDING_WINDOW","MOVING_AVERAGE_EWMA","BAD_ARGUMENT_ERROR","MISSING_CONFIG_ERROR","LOCATION","INITIALIZE","TEXT_SHOWING","TEXT_HIDDEN","CC1","CC3","UTF8","SCHEME_ID_URI","START_TIME","SERVICE_DESCRIPTION_LL_SCHEME","SUPPLEMENTAL_PROPERTY_LL_SCHEME","XML","ARRAY_BUFFER","createMetricsReporting","_utilsDVBErrorsTranslator2","eventBus","dashMetrics","metricsConstants","_controllersMetricsCollectionController2","getReportingFactory","_reportingReportingFactory2","getMetricsHandlerFactory","_metricsMetricsHandlerFactory2","_MetricsReportingEvents2","MetricsReportingEvents","_get","Object","getPrototypeOf","prototype","METRICS_INITIALISATION_COMPLETE","BECAME_REPORTING_PLAYER","metricsReportingEvents","MetricsCollectionController","metricsControllers","update","controllersToRemove","error","keys","_utilsManifestParsing2","adapter","getMetrics","manifest","forEach","m","key","JSON","stringify","splice","controller","_MetricsController2","initialize","reset","trigger","resetMetricsControllers","on","MANIFEST_UPDATED","STREAM_TEARDOWN_COMPLETE","off","MetricsController","metricsHandlersController","reportingController","rangeController","metricsEntry","_RangeController2","mediaElement","Range","_ReportingController2","debug","Reporting","_MetricsHandlersController2","metrics","MetricsHandlersController","handlers","Events","metricsHandlerFactory","handle","handler","handleNewMetric","metric","value","mediaType","split","midx","ms","nextm","METRIC_ADDED","METRIC_UPDATED","RangeController","useWallClockTime","ranges","rs","start","starttime","end","duration","add","_useWallClockTime","clear","isEnabled","time","numRanges","Date","getTime","currentTime","_utilsCustomTimeRanges2","ReportingController","reporters","reportingFactory","reporting","some","reporter","report","type","vos","MetricsHandlerFactory","logger","getLogger","keyRegex","knownFactoryProducts","BufferLevel","_handlersBufferLevelHandler2","DVBErrors","_handlersDVBErrorsHandler2","HttpList","_handlersHttpListHandler2","PlayList","_handlersGenericMetricHandler2","RepSwitchList","TcpList","listType","matches","match","message","register","unregister","BufferLevelHandler","interval","lastReportedTime","handlerHelpers","_utilsHandlerHelpers2","storedVOs","intervalCallback","vo","map","reduce","b","level","getLowestBufferLevelVO","basename","rc","n_ms","validateN","reconstructFullMetricName","setInterval","clearInterval","BUFFER_LEVEL","onInitialisationComplete","unused","DVB_ERRORS","GenericMetricHandler","metricName","HttpListHandler","storedVos","requestType","HTTP_REQUEST","ReportingFactory","knownReportingSchemeIdUris","urn:dvb:dash:reporting:2014","_reportersDVBReporting2","entry","schemeIdUri","moduleName","DVBReporting","metricSerialiser","randomNumberGenerator","reportingPlayerStatusDecided","isReportingPlayer","reportingUrl","pendingRequests","doGetRequest","url","successCB","failureCB","oncomplete","reqIndex","req","status","XMLHttpRequest","open","onloadend","onerror","send","resetInitialSettings","Array","isArray","serialise","probability","random","_utilsMetricSerialiser2","_utilsRNG2","DVBErrorsTranslator","mpd","_voDVBErrors2","mpdurl","originalUrl","terror","addDVBErrors","onManifestUpdate","onServiceLocationChanged","errorcode","BASE_URL_CHANGED","servicelocation","onBecameReporter","BECAME_REPORTER","onMetricEvent","responsecode","CONNECTION_ERROR","tresponse","_serviceLocation","onPlaybackError","MediaError","MEDIA_ERR_NETWORK","MEDIA_ERR_DECODE","CORRUPT_MEDIA_OTHER","initialise","SERVICE_LOCATION_BLACKLIST_CHANGED","PLAYBACK_ERROR","HandlerHelpers","mn","isNaN","ManifestParsing","Metrics_asArray","metricEntry","_voMetrics2","isDynamic","getIsDynamic","Range_asArray","range","reportingStartTime","presentationStartTime","rangeEntry","_voRange2","getAvailabilityStartTime","voPeriods","getRegularPeriods","getDuration","Reporting_asArray","reportingEntry","_voReporting2","MetricSerialiser","pairs","v","isBuiltIn","toString","slice","encodeURIComponent","join","toISOString","Math","round","RNG","crypto","msCrypto","ArrayType","Uint32Array","MAX_VALUE","pow","BYTES_PER_ELEMENT","NUM_RANDOM_NUMBERS","randomNumbers","index","getRandomValues","min","max","ipaddress","SSL_CONNECTION_FAILED_PREFIX","DNS_RESOLUTION_FAILED","HOST_UNREACHABLE","CONNECTION_REFUSED","CORRUPT_MEDIA_ISOBMFF","Metrics","Infinity","CustomTimeRanges","customTimeRangeArray","mergeRanges","remove","rangeIndex1","rangeIndex2","range1","range2","_utilsSupervisorTools","checkInteger","NaN","_coreFactoryMaker2","parameter","_constantsConstants2"],"mappings":"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"}