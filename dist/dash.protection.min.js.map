{"version":3,"file":"dash.protection.min.js","sourceRoot":"./src/","sources":["..\\node_modules\\browserify\\node_modules\\browser-pack\\_prelude.js","core\\errors\\ErrorsBase.js","core\\events\\EventsBase.js","streaming\\constants\\ProtectionConstants.js","streaming\\protection\\CommonEncryption.js","streaming\\protection\\Protection.js","streaming\\protection\\ProtectionEvents.js","streaming\\protection\\controllers\\ProtectionController.js","streaming\\protection\\controllers\\ProtectionKeyController.js","streaming\\protection\\drm\\KeySystemClearKey.js","streaming\\protection\\drm\\KeySystemPlayReady.js","streaming\\protection\\drm\\KeySystemW3CClearKey.js","streaming\\protection\\drm\\KeySystemWidevine.js","streaming\\protection\\errors\\ProtectionErrors.js","streaming\\protection\\models\\ProtectionModel_01b.js","streaming\\protection\\models\\ProtectionModel_21Jan2015.js","streaming\\protection\\models\\ProtectionModel_3Feb2014.js","streaming\\protection\\servers\\ClearKey.js","streaming\\protection\\servers\\DRMToday.js","streaming\\protection\\servers\\PlayReady.js","streaming\\protection\\servers\\ThePlatform.js","streaming\\protection\\servers\\Widevine.js","streaming\\protection\\vo\\ClearKeyKeySet.js","streaming\\protection\\vo\\KeyMessage.js","streaming\\protection\\vo\\KeyPair.js","streaming\\protection\\vo\\KeySystemAccess.js","streaming\\protection\\vo\\KeySystemConfiguration.js","streaming\\protection\\vo\\MediaCapability.js","streaming\\protection\\vo\\NeedKey.js","streaming\\vo\\DashJSError.js"],"sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n/**\r\n * @class\r\n * @ignore\r\n */\r\nclass ErrorsBase {\r\n    extend (errors, config) {\r\n        if (!errors) return;\r\n\r\n        let override = config ? config.override : false;\r\n        let publicOnly = config ? config.publicOnly : false;\r\n\r\n\r\n        for (const err in errors) {\r\n            if (!errors.hasOwnProperty(err) || (this[err] && !override)) continue;\r\n            if (publicOnly && errors[err].indexOf('public_') === -1) continue;\r\n            this[err] = errors[err];\r\n\r\n        }\r\n    }\r\n}\r\n\r\nexport default ErrorsBase;","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n/**\r\n * @class\r\n * @ignore\r\n */\r\nclass EventsBase {\r\n    extend (events, config) {\r\n        if (!events) return;\r\n\r\n        let override = config ? config.override : false;\r\n        let publicOnly = config ? config.publicOnly : false;\r\n\r\n\r\n        for (const evt in events) {\r\n            if (!events.hasOwnProperty(evt) || (this[evt] && !override)) continue;\r\n            if (publicOnly && events[evt].indexOf('public_') === -1) continue;\r\n            this[evt] = events[evt];\r\n\r\n        }\r\n    }\r\n}\r\n\r\nexport default EventsBase;","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\n/**\r\n * Protection Constants declaration\r\n * @class\r\n * @ignore\r\n */\r\nclass ProtectionConstants {\r\n\r\n    init () {\r\n        this.CLEARKEY_KEYSTEM_STRING = 'org.w3.clearkey';\r\n        this.WIDEVINE_KEYSTEM_STRING = 'com.widevine.alpha';\r\n        this.PLAYREADY_KEYSTEM_STRING = 'com.microsoft.playready';\r\n    }\r\n\r\n    constructor () {\r\n        this.init();\r\n    }\r\n}\r\n\r\nlet constants = new ProtectionConstants();\r\nexport default constants;\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\n/**\r\n * @class\r\n * @ignore\r\n */\r\nclass CommonEncryption {\r\n    /**\r\n     * Find and return the ContentProtection element in the given array\r\n     * that indicates support for MPEG Common Encryption\r\n     *\r\n     * @param {Array} cpArray array of content protection elements\r\n     * @returns {Object|null} the Common Encryption content protection element or\r\n     * null if one was not found\r\n     */\r\n    static findCencContentProtection(cpArray) {\r\n        let retVal = null;\r\n        for (let i = 0; i < cpArray.length; ++i) {\r\n            let cp = cpArray[i];\r\n            if (cp.schemeIdUri.toLowerCase() === 'urn:mpeg:dash:mp4protection:2011' &&\r\n                (cp.value.toLowerCase() === 'cenc' || cp.value.toLowerCase() === 'cbcs'))\r\n                retVal = cp;\r\n        }\r\n        return retVal;\r\n    }\r\n\r\n    /**\r\n     * Returns just the data portion of a single PSSH\r\n     *\r\n     * @param {ArrayBuffer} pssh - the PSSH\r\n     * @return {ArrayBuffer} data portion of the PSSH\r\n     */\r\n    static getPSSHData(pssh) {\r\n        let offset = 8; // Box size and type fields\r\n        let view = new DataView(pssh);\r\n\r\n        // Read version\r\n        let version = view.getUint8(offset);\r\n\r\n        offset += 20; // Version (1), flags (3), system ID (16)\r\n\r\n        if (version > 0) {\r\n            offset += 4 + (16 * view.getUint32(offset)); // Key ID count (4) and All key IDs (16*count)\r\n        }\r\n\r\n        offset += 4; // Data size\r\n        return pssh.slice(offset);\r\n    }\r\n\r\n    /**\r\n     * Returns the PSSH associated with the given key system from the concatenated\r\n     * list of PSSH boxes in the given initData\r\n     *\r\n     * @param {KeySystem} keySystem the desired\r\n     * key system\r\n     * @param {ArrayBuffer} initData 'cenc' initialization data.  Concatenated list of PSSH.\r\n     * @returns {ArrayBuffer|null} The PSSH box data corresponding to the given key system, null if not found\r\n     * or null if a valid association could not be found.\r\n     */\r\n    static getPSSHForKeySystem(keySystem, initData) {\r\n        let psshList = CommonEncryption.parsePSSHList(initData);\r\n        if (keySystem && psshList.hasOwnProperty(keySystem.uuid.toLowerCase())) {\r\n            return psshList[keySystem.uuid.toLowerCase()];\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Parse a standard common encryption PSSH which contains a simple\r\n     * base64-encoding of the init data\r\n     *\r\n     * @param {Object} cpData the ContentProtection element\r\n     * @param {BASE64} BASE64 reference\r\n     * @returns {ArrayBuffer|null} the init data or null if not found\r\n     */\r\n    static parseInitDataFromContentProtection(cpData, BASE64) {\r\n        if ('pssh' in cpData) {\r\n\r\n            // Remove whitespaces and newlines from pssh text\r\n            cpData.pssh.__text = cpData.pssh.__text.replace(/\\r?\\n|\\r/g, '').replace(/\\s+/g, '');\r\n\r\n            return BASE64.decodeArray(cpData.pssh.__text).buffer;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Parses list of PSSH boxes into keysystem-specific PSSH data\r\n     *\r\n     * @param {ArrayBuffer} data - the concatenated list of PSSH boxes as provided by\r\n     * CDM as initialization data when CommonEncryption content is detected\r\n     * @returns {Object|Array} an object that has a property named according to each of\r\n     * the detected key system UUIDs (e.g. 00000000-0000-0000-0000-0000000000)\r\n     * and a ArrayBuffer (the entire PSSH box) as the property value\r\n     */\r\n    static parsePSSHList(data) {\r\n\r\n        if (data === null || data === undefined)\r\n            return [];\r\n\r\n        let dv = new DataView(data.buffer || data); // data.buffer first for Uint8Array support\r\n        let done = false;\r\n        let pssh = {};\r\n\r\n        // TODO: Need to check every data read for end of buffer\r\n        let byteCursor = 0;\r\n        while (!done) {\r\n\r\n            let size,\r\n                nextBox,\r\n                version,\r\n                systemID,\r\n                psshDataSize;\r\n            let boxStart = byteCursor;\r\n\r\n            if (byteCursor >= dv.buffer.byteLength)\r\n                break;\r\n\r\n            /* Box size */\r\n            size = dv.getUint32(byteCursor);\r\n            nextBox = byteCursor + size;\r\n            byteCursor += 4;\r\n\r\n            /* Verify PSSH */\r\n            if (dv.getUint32(byteCursor) !== 0x70737368) {\r\n                byteCursor = nextBox;\r\n                continue;\r\n            }\r\n            byteCursor += 4;\r\n\r\n            /* Version must be 0 or 1 */\r\n            version = dv.getUint8(byteCursor);\r\n            if (version !== 0 && version !== 1) {\r\n                byteCursor = nextBox;\r\n                continue;\r\n            }\r\n            byteCursor++;\r\n\r\n            byteCursor += 3; /* skip flags */\r\n\r\n            // 16-byte UUID/SystemID\r\n            systemID = '';\r\n            let i, val;\r\n            for (i = 0; i < 4; i++) {\r\n                val = dv.getUint8(byteCursor + i).toString(16);\r\n                systemID += (val.length === 1) ? '0' + val : val;\r\n            }\r\n            byteCursor += 4;\r\n            systemID += '-';\r\n            for (i = 0; i < 2; i++) {\r\n                val = dv.getUint8(byteCursor + i).toString(16);\r\n                systemID += (val.length === 1) ? '0' + val : val;\r\n            }\r\n            byteCursor += 2;\r\n            systemID += '-';\r\n            for (i = 0; i < 2; i++) {\r\n                val = dv.getUint8(byteCursor + i).toString(16);\r\n                systemID += (val.length === 1) ? '0' + val : val;\r\n            }\r\n            byteCursor += 2;\r\n            systemID += '-';\r\n            for (i = 0; i < 2; i++) {\r\n                val = dv.getUint8(byteCursor + i).toString(16);\r\n                systemID += (val.length === 1) ? '0' + val : val;\r\n            }\r\n            byteCursor += 2;\r\n            systemID += '-';\r\n            for (i = 0; i < 6; i++) {\r\n                val = dv.getUint8(byteCursor + i).toString(16);\r\n                systemID += (val.length === 1) ? '0' + val : val;\r\n            }\r\n            byteCursor += 6;\r\n\r\n            systemID = systemID.toLowerCase();\r\n\r\n            /* PSSH Data Size */\r\n            psshDataSize = dv.getUint32(byteCursor);\r\n            byteCursor += 4;\r\n\r\n            /* PSSH Data */\r\n            pssh[systemID] = dv.buffer.slice(boxStart, nextBox);\r\n            byteCursor = nextBox;\r\n        }\r\n\r\n        return pssh;\r\n    }\r\n}\r\n\r\nexport default CommonEncryption;\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\nimport ProtectionController from './controllers/ProtectionController';\r\nimport ProtectionKeyController from './controllers/ProtectionKeyController';\r\nimport ProtectionEvents from './ProtectionEvents';\r\nimport ProtectionErrors from './errors/ProtectionErrors';\r\nimport ProtectionModel_21Jan2015 from './models/ProtectionModel_21Jan2015';\r\nimport ProtectionModel_3Feb2014 from './models/ProtectionModel_3Feb2014';\r\nimport ProtectionModel_01b from './models/ProtectionModel_01b';\r\n\r\nconst APIS_ProtectionModel_01b = [\r\n    // Un-prefixed as per spec\r\n    {\r\n        // Video Element\r\n        generateKeyRequest: 'generateKeyRequest',\r\n        addKey: 'addKey',\r\n        cancelKeyRequest: 'cancelKeyRequest',\r\n\r\n        // Events\r\n        needkey: 'needkey',\r\n        keyerror: 'keyerror',\r\n        keyadded: 'keyadded',\r\n        keymessage: 'keymessage'\r\n    },\r\n    // Webkit-prefixed (early Chrome versions and Chrome with EME disabled in chrome://flags)\r\n    {\r\n        // Video Element\r\n        generateKeyRequest: 'webkitGenerateKeyRequest',\r\n        addKey: 'webkitAddKey',\r\n        cancelKeyRequest: 'webkitCancelKeyRequest',\r\n\r\n        // Events\r\n        needkey: 'webkitneedkey',\r\n        keyerror: 'webkitkeyerror',\r\n        keyadded: 'webkitkeyadded',\r\n        keymessage: 'webkitkeymessage'\r\n    }\r\n];\r\n\r\nconst APIS_ProtectionModel_3Feb2014 = [\r\n    // Un-prefixed as per spec\r\n    // Chrome 38-39 (and some earlier versions) with chrome://flags -- Enable Encrypted Media Extensions\r\n    {\r\n        // Video Element\r\n        setMediaKeys: 'setMediaKeys',\r\n        // MediaKeys\r\n        MediaKeys: 'MediaKeys',\r\n        // MediaKeySession\r\n        release: 'close',\r\n\r\n        // Events\r\n        needkey: 'needkey',\r\n        error: 'keyerror',\r\n        message: 'keymessage',\r\n        ready: 'keyadded',\r\n        close: 'keyclose'\r\n    },\r\n    // MS-prefixed (IE11, Windows 8.1)\r\n    {\r\n        // Video Element\r\n        setMediaKeys: 'msSetMediaKeys',\r\n        // MediaKeys\r\n        MediaKeys: 'MSMediaKeys',\r\n        // MediaKeySession\r\n        release: 'close',\r\n        // Events\r\n        needkey: 'msneedkey',\r\n        error: 'mskeyerror',\r\n        message: 'mskeymessage',\r\n        ready: 'mskeyadded',\r\n        close: 'mskeyclose'\r\n    }\r\n];\r\n\r\nfunction Protection() {\r\n    let instance;\r\n    const context = this.context;\r\n\r\n    /**\r\n     * Create a ProtectionController and associated ProtectionModel for use with\r\n     * a single piece of content.\r\n     *\r\n     * @param {Object} config\r\n     * @return {ProtectionController} protection controller\r\n     *\r\n     */\r\n    function createProtectionSystem(config) {\r\n        let controller = null;\r\n\r\n        const protectionKeyController = ProtectionKeyController(context).getInstance();\r\n        protectionKeyController.setConfig({ debug: config.debug, BASE64: config.BASE64 });\r\n        protectionKeyController.initialize();\r\n\r\n        let protectionModel =  getProtectionModel(config);\r\n\r\n        if (!controller && protectionModel) {//TODO add ability to set external controller if still needed at all?\r\n            controller = ProtectionController(context).create({\r\n                protectionModel: protectionModel,\r\n                protectionKeyController: protectionKeyController,\r\n                eventBus: config.eventBus,\r\n                debug: config.debug,\r\n                events: config.events,\r\n                BASE64: config.BASE64,\r\n                constants: config.constants\r\n            });\r\n            config.capabilities.setEncryptedMediaSupported(true);\r\n        }\r\n        return controller;\r\n    }\r\n\r\n    function getProtectionModel(config) {\r\n        const debug = config.debug;\r\n        const logger = debug.getLogger(instance);\r\n        const eventBus = config.eventBus;\r\n        const errHandler = config.errHandler;\r\n        const videoElement = config.videoModel ? config.videoModel.getElement() : null;\r\n\r\n        if ((!videoElement || videoElement.onencrypted !== undefined) &&\r\n            (!videoElement || videoElement.mediaKeys !== undefined)) {\r\n            logger.info('EME detected on this user agent! (ProtectionModel_21Jan2015)');\r\n            return ProtectionModel_21Jan2015(context).create({ debug: debug, eventBus: eventBus, events: config.events });\r\n        } else if (getAPI(videoElement, APIS_ProtectionModel_3Feb2014)) {\r\n            logger.info('EME detected on this user agent! (ProtectionModel_3Feb2014)');\r\n            return ProtectionModel_3Feb2014(context).create({ debug: debug, eventBus: eventBus, events: config.events, api: getAPI(videoElement, APIS_ProtectionModel_3Feb2014) });\r\n        } else if (getAPI(videoElement, APIS_ProtectionModel_01b)) {\r\n            logger.info('EME detected on this user agent! (ProtectionModel_01b)');\r\n            return ProtectionModel_01b(context).create({ debug: debug, eventBus: eventBus, errHandler: errHandler, events: config.events, api: getAPI(videoElement, APIS_ProtectionModel_01b) });\r\n        } else {\r\n            logger.warn('No supported version of EME detected on this user agent! - Attempts to play encrypted content will fail!');\r\n            return null;\r\n        }\r\n    }\r\n\r\n    function getAPI(videoElement, apis) {\r\n        for (let i = 0; i < apis.length; i++) {\r\n            const api = apis[i];\r\n            // detect if api is supported by browser\r\n            // check only first function in api -> should be fine\r\n            if (typeof videoElement[api[Object.keys(api)[0]]] !== 'function') {\r\n                continue;\r\n            }\r\n\r\n            return api;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    instance = {\r\n        createProtectionSystem: createProtectionSystem\r\n    };\r\n\r\n    return instance;\r\n}\r\n\r\nProtection.__dashjs_factory_name = 'Protection';\r\nconst factory = dashjs.FactoryMaker.getClassFactory(Protection); /* jshint ignore:line */\r\nfactory.events = ProtectionEvents;\r\nfactory.errors = ProtectionErrors;\r\ndashjs.FactoryMaker.updateClassFactory(Protection.__dashjs_factory_name, factory); /* jshint ignore:line */\r\nexport default factory;\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\nimport EventsBase from '../../core/events/EventsBase';\r\n/**\r\n * @class\r\n  */\r\nclass ProtectionEvents extends EventsBase {\r\n    /**\r\n     * @description Public facing external events to be used when including protection package.\r\n     * All public events will be aggregated into the MediaPlayerEvents Class and can be accessed\r\n     * via MediaPlayer.events.  public_ is the prefix that we use to move event names to MediaPlayerEvents.\r\n     */\r\n    constructor () {\r\n        super();\r\n\r\n        /**\r\n         * Event ID for events delivered when the protection set receives\r\n         * a key message from the CDM\r\n         *\r\n         * @ignore\r\n         */\r\n        this.INTERNAL_KEY_MESSAGE = 'internalKeyMessage';\r\n\r\n        /**\r\n         * Event ID for events delivered when a key system selection procedure\r\n         * completes\r\n         * @ignore\r\n         */\r\n        this.INTERNAL_KEY_SYSTEM_SELECTED = 'internalKeySystemSelected';\r\n\r\n        /**\r\n         * Event ID for events delivered when the status of one decryption keys has changed\r\n         * @ignore\r\n         */\r\n        this.INTERNAL_KEY_STATUS_CHANGED = 'internalkeyStatusChanged';\r\n\r\n        /**\r\n         * Event ID for events delivered when a new key has been added\r\n         *\r\n         * @constant\r\n         * @deprecated The latest versions of the EME specification no longer\r\n         * use this event.  {@MediaPlayer.models.protectionModel.eventList.KEY_STATUSES_CHANGED}\r\n         * is preferred.\r\n         * @event ProtectionEvents#KEY_ADDED\r\n         */\r\n        this.KEY_ADDED = 'public_keyAdded';\r\n        /**\r\n         * Event ID for events delivered when an error is encountered by the CDM\r\n         * while processing a license server response message\r\n         * @event ProtectionEvents#KEY_ERROR\r\n         */\r\n        this.KEY_ERROR = 'public_keyError';\r\n\r\n        /**\r\n         * Event ID for events delivered when the protection set receives\r\n         * a key message from the CDM\r\n         * @event ProtectionEvents#KEY_MESSAGE\r\n         */\r\n        this.KEY_MESSAGE = 'public_keyMessage';\r\n\r\n        /**\r\n         * Event ID for events delivered when a key session close\r\n         * process has completed\r\n         * @event ProtectionEvents#KEY_SESSION_CLOSED\r\n         */\r\n        this.KEY_SESSION_CLOSED = 'public_keySessionClosed';\r\n\r\n        /**\r\n         * Event ID for events delivered when a new key sessions creation\r\n         * process has completed\r\n         * @event ProtectionEvents#KEY_SESSION_CREATED\r\n         */\r\n        this.KEY_SESSION_CREATED = 'public_keySessionCreated';\r\n\r\n        /**\r\n         * Event ID for events delivered when a key session removal\r\n         * process has completed\r\n         * @event ProtectionEvents#KEY_SESSION_REMOVED\r\n         */\r\n        this.KEY_SESSION_REMOVED = 'public_keySessionRemoved';\r\n\r\n        /**\r\n         * Event ID for events delivered when the status of one or more\r\n         * decryption keys has changed\r\n         * @event ProtectionEvents#KEY_STATUSES_CHANGED\r\n         */\r\n        this.KEY_STATUSES_CHANGED = 'public_keyStatusesChanged';\r\n\r\n        /**\r\n         * Event ID for events delivered when a key system access procedure\r\n         * has completed\r\n         * @ignore\r\n         */\r\n        this.KEY_SYSTEM_ACCESS_COMPLETE = 'public_keySystemAccessComplete';\r\n\r\n        /**\r\n         * Event ID for events delivered when a key system selection procedure\r\n         * completes\r\n         * @event ProtectionEvents#KEY_SYSTEM_SELECTED\r\n         */\r\n        this.KEY_SYSTEM_SELECTED = 'public_keySystemSelected';\r\n\r\n        /**\r\n         * Event ID for events delivered when a license request procedure\r\n         * has completed\r\n         * @event ProtectionEvents#LICENSE_REQUEST_COMPLETE\r\n         */\r\n        this.LICENSE_REQUEST_COMPLETE = 'public_licenseRequestComplete';\r\n\r\n        /**\r\n         * Event ID for needkey/encrypted events\r\n         * @ignore\r\n         */\r\n        this.NEED_KEY = 'needkey';\r\n\r\n        /**\r\n         * Event ID for events delivered when the Protection system is detected and created.\r\n         * @event ProtectionEvents#PROTECTION_CREATED\r\n         */\r\n        this.PROTECTION_CREATED = 'public_protectioncreated';\r\n\r\n        /**\r\n         * Event ID for events delivered when the Protection system is destroyed.\r\n         * @event ProtectionEvents#PROTECTION_DESTROYED\r\n         */\r\n        this.PROTECTION_DESTROYED = 'public_protectiondestroyed';\r\n\r\n        /**\r\n         * Event ID for events delivered when a new server certificate has\r\n         * been delivered to the CDM\r\n         * @ignore\r\n         */\r\n        this.SERVER_CERTIFICATE_UPDATED = 'serverCertificateUpdated';\r\n\r\n        /**\r\n         * Event ID for events delivered when the process of shutting down\r\n         * a protection set has completed\r\n         * @ignore\r\n         */\r\n        this.TEARDOWN_COMPLETE =  'protectionTeardownComplete';\r\n\r\n        /**\r\n         * Event ID for events delivered when a HTMLMediaElement has been\r\n         * associated with the protection set\r\n         * @ignore\r\n         */\r\n        this.VIDEO_ELEMENT_SELECTED = 'videoElementSelected';\r\n    }\r\n}\r\n\r\nlet protectionEvents = new ProtectionEvents();\r\nexport default protectionEvents;\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\nimport CommonEncryption from '../CommonEncryption';\r\nimport MediaCapability from '../vo/MediaCapability';\r\nimport KeySystemConfiguration from '../vo/KeySystemConfiguration';\r\nimport ProtectionErrors from '../errors/ProtectionErrors';\r\nimport DashJSError from '../../vo/DashJSError';\r\n\r\nconst NEEDKEY_BEFORE_INITIALIZE_RETRIES = 5;\r\nconst NEEDKEY_BEFORE_INITIALIZE_TIMEOUT = 500;\r\n\r\nconst LICENSE_SERVER_REQUEST_RETRIES = 3;\r\nconst LICENSE_SERVER_REQUEST_RETRY_INTERVAL = 1000;\r\nconst LICENSE_SERVER_REQUEST_DEFAULT_TIMEOUT = 8000;\r\n\r\n/**\r\n * @module ProtectionController\r\n * @description Provides access to media protection information and functionality.  Each\r\n * ProtectionController manages a single {@link MediaPlayer.models.ProtectionModel}\r\n * which encapsulates a set of protection information (EME APIs, selected key system,\r\n * key sessions).  The APIs of ProtectionController mostly align with the latest EME\r\n * APIs.  Key system selection is mostly automated when combined with app-overrideable\r\n * functionality provided in {@link ProtectionKeyController}.\r\n * @todo ProtectionController does almost all of its tasks automatically after init() is\r\n * called.  Applications might want more control over this process and want to go through\r\n * each step manually (key system selection, session creation, session maintenance).\r\n * @param {Object} config\r\n */\r\n\r\nfunction ProtectionController(config) {\r\n\r\n    config = config || {};\r\n    const protectionKeyController = config.protectionKeyController;\r\n    let protectionModel = config.protectionModel;\r\n    const eventBus = config.eventBus;\r\n    const events = config.events;\r\n    const debug = config.debug;\r\n    const BASE64 = config.BASE64;\r\n    const constants = config.constants;\r\n    let needkeyRetries = [];\r\n\r\n    let instance,\r\n        logger,\r\n        pendingNeedKeyData,\r\n        mediaInfoArr,\r\n        protDataSet,\r\n        sessionType,\r\n        robustnessLevel,\r\n        keySystem;\r\n\r\n    function setup() {\r\n        logger = debug.getLogger(instance);\r\n        pendingNeedKeyData = [];\r\n        mediaInfoArr = [];\r\n        sessionType = 'temporary';\r\n        robustnessLevel = '';\r\n    }\r\n\r\n    function checkConfig() {\r\n        if (!eventBus || !eventBus.hasOwnProperty('on') || !protectionKeyController || !protectionKeyController.hasOwnProperty('getSupportedKeySystemsFromContentProtection')) {\r\n            throw new Error('Missing config parameter(s)');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Initialize this protection system with a given audio\r\n     * or video stream information.\r\n     *\r\n     * @param {StreamInfo} [mediaInfo] Media information\r\n     * @memberof module:ProtectionController\r\n     * @instance\r\n     * @todo This API will change when we have better support for allowing applications\r\n     * to select different adaptation sets for playback.  Right now it is clunky for\r\n     * applications to create {@link StreamInfo} with the right information,\r\n     * @ignore\r\n     */\r\n    function initializeForMedia(mediaInfo) {\r\n        // Not checking here if a session for similar KS/KID combination is already created\r\n        // because still don't know which keysystem will be selected.\r\n        // Once Keysystem is selected and before creating the session, we will do that check\r\n        // so we create the strictly necessary DRM sessions\r\n        if (!mediaInfo) {\r\n            throw new Error('mediaInfo can not be null or undefined');\r\n        }\r\n\r\n        checkConfig();\r\n\r\n        eventBus.on(events.INTERNAL_KEY_MESSAGE, onKeyMessage, this);\r\n        eventBus.on(events.INTERNAL_KEY_STATUS_CHANGED, onKeyStatusChanged, this);\r\n\r\n        mediaInfoArr.push(mediaInfo);\r\n\r\n        // ContentProtection elements are specified at the AdaptationSet level, so the CP for audio\r\n        // and video will be the same.  Just use one valid MediaInfo object\r\n        const supportedKS = protectionKeyController.getSupportedKeySystemsFromContentProtection(mediaInfo.contentProtection);\r\n        if (supportedKS && supportedKS.length > 0) {\r\n            selectKeySystem(supportedKS, true);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns a set of supported key systems and CENC initialization data\r\n     * from the given array of ContentProtection elements.  Only\r\n     * key systems that are supported by this player will be returned.\r\n     * Key systems are returned in priority order (highest first).\r\n     *\r\n     * @param {Array.<Object>} cps - array of content protection elements parsed\r\n     * from the manifest\r\n     * @returns {Array.<Object>} array of objects indicating which supported key\r\n     * systems were found.  Empty array is returned if no\r\n     * supported key systems were found\r\n     * @memberof module:ProtectionKeyController\r\n     * @instance\r\n     * @ignore\r\n     */\r\n    function getSupportedKeySystemsFromContentProtection(cps) {\r\n        checkConfig();\r\n        return protectionKeyController.getSupportedKeySystemsFromContentProtection(cps);\r\n    }\r\n\r\n    /**\r\n     * Create a new key session associated with the given initialization data from\r\n     * the MPD or from the PSSH box in the media\r\n     *\r\n     * @param {ArrayBuffer} initData the initialization data\r\n     * @param {Uint8Array} cdmData the custom data to provide to licenser\r\n     * @memberof module:ProtectionController\r\n     * @instance\r\n     * @fires ProtectionController#KeySessionCreated\r\n     * @todo In older versions of the EME spec, there was a one-to-one relationship between\r\n     * initialization data and key sessions.  That is no longer true in the latest APIs.  This\r\n     * API will need to modified (and a new \"generateRequest(keySession, initData)\" API created)\r\n     * to come up to speed with the latest EME standard\r\n     * @ignore\r\n     */\r\n    function createKeySession(initData, cdmData) {\r\n        const initDataForKS = CommonEncryption.getPSSHForKeySystem(keySystem, initData);\r\n        const protData = getProtData(keySystem);\r\n        if (initDataForKS) {\r\n\r\n            // Check for duplicate initData\r\n            const currentInitData = protectionModel.getAllInitData();\r\n            for (let i = 0; i < currentInitData.length; i++) {\r\n                if (protectionKeyController.initDataEquals(initDataForKS, currentInitData[i])) {\r\n                    logger.warn('DRM: Ignoring initData because we have already seen it!');\r\n                    return;\r\n                }\r\n            }\r\n            try {\r\n                protectionModel.createKeySession(initDataForKS, protData, getSessionType(keySystem), cdmData);\r\n            } catch (error) {\r\n                eventBus.trigger(events.KEY_SESSION_CREATED, {\r\n                    data: null,\r\n                    error: new DashJSError(ProtectionErrors.KEY_SESSION_CREATED_ERROR_CODE, ProtectionErrors.KEY_SESSION_CREATED_ERROR_MESSAGE + error.message)\r\n                });\r\n            }\r\n        } else if (initData) {\r\n            protectionModel.createKeySession(initData, protData, getSessionType(keySystem), cdmData);\r\n        } else {\r\n            eventBus.trigger(events.KEY_SESSION_CREATED, {\r\n                data: null,\r\n                error: new DashJSError(ProtectionErrors.KEY_SESSION_CREATED_ERROR_CODE, ProtectionErrors.KEY_SESSION_CREATED_ERROR_MESSAGE + 'Selected key system is ' + (keySystem ? keySystem.systemString : null) + '.  needkey/encrypted event contains no initData corresponding to that key system!')\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Loads a key session with the given session ID from persistent storage.  This\r\n     * essentially creates a new key session\r\n     *\r\n     * @param {string} sessionID\r\n     * @param {string} initData\r\n     * @memberof module:ProtectionController\r\n     * @instance\r\n     * @fires ProtectionController#KeySessionCreated\r\n     * @ignore\r\n     */\r\n    function loadKeySession(sessionID, initData) {\r\n        checkConfig();\r\n        protectionModel.loadKeySession(sessionID, initData, getSessionType(keySystem));\r\n    }\r\n\r\n    /**\r\n     * Removes the given key session from persistent storage and closes the session\r\n     * as if {@link ProtectionController#closeKeySession}\r\n     * was called\r\n     *\r\n     * @param {SessionToken} sessionToken the session\r\n     * token\r\n     * @memberof module:ProtectionController\r\n     * @instance\r\n     * @fires ProtectionController#KeySessionRemoved\r\n     * @fires ProtectionController#KeySessionClosed\r\n     * @ignore\r\n     */\r\n    function removeKeySession(sessionToken) {\r\n        checkConfig();\r\n        protectionModel.removeKeySession(sessionToken);\r\n    }\r\n\r\n    /**\r\n     * Closes the key session and releases all associated decryption keys.  These\r\n     * keys will no longer be available for decrypting media\r\n     *\r\n     * @param {SessionToken} sessionToken the session\r\n     * token\r\n     * @memberof module:ProtectionController\r\n     * @instance\r\n     * @fires ProtectionController#KeySessionClosed\r\n     * @ignore\r\n     */\r\n    function closeKeySession(sessionToken) {\r\n        checkConfig();\r\n        protectionModel.closeKeySession(sessionToken);\r\n    }\r\n\r\n    /**\r\n     * Sets a server certificate for use by the CDM when signing key messages\r\n     * intended for a particular license server.  This will fire\r\n     * an error event if a key system has not yet been selected.\r\n     *\r\n     * @param {ArrayBuffer} serverCertificate a CDM-specific license server\r\n     * certificate\r\n     * @memberof module:ProtectionController\r\n     * @instance\r\n     * @fires ProtectionController#ServerCertificateUpdated\r\n     */\r\n    function setServerCertificate(serverCertificate) {\r\n        checkConfig();\r\n        protectionModel.setServerCertificate(serverCertificate);\r\n    }\r\n\r\n    /**\r\n     * Associate this protection system with the given HTMLMediaElement.  This\r\n     * causes the system to register for needkey/encrypted events from the given\r\n     * element and provides a destination for setting of MediaKeys\r\n     *\r\n     * @param {HTMLMediaElement} element the media element to which the protection\r\n     * system should be associated\r\n     * @memberof module:ProtectionController\r\n     * @instance\r\n     */\r\n    function setMediaElement(element) {\r\n        checkConfig();\r\n        if (element) {\r\n            protectionModel.setMediaElement(element);\r\n            eventBus.on(events.NEED_KEY, onNeedKey, this);\r\n        } else if (element === null) {\r\n            protectionModel.setMediaElement(element);\r\n            eventBus.off(events.NEED_KEY, onNeedKey, this);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets the session type to use when creating key sessions.  Either \"temporary\" or\r\n     * \"persistent-license\".  Default is \"temporary\".\r\n     *\r\n     * @param {string} value the session type\r\n     * @memberof module:ProtectionController\r\n     * @instance\r\n     */\r\n    function setSessionType(value) {\r\n        sessionType = value;\r\n    }\r\n\r\n    /**\r\n     * Sets the robustness level for video and audio capabilities. Optional to remove Chrome warnings.\r\n     * Possible values are SW_SECURE_CRYPTO, SW_SECURE_DECODE, HW_SECURE_CRYPTO, HW_SECURE_CRYPTO, HW_SECURE_DECODE, HW_SECURE_ALL.\r\n     *\r\n     * @param {string} level the robustness level\r\n     * @memberof module:ProtectionController\r\n     * @instance\r\n     */\r\n    function setRobustnessLevel(level) {\r\n        robustnessLevel = level;\r\n    }\r\n\r\n    /**\r\n     * Attach KeySystem-specific data to use for license acquisition with EME\r\n     *\r\n     * @param {Object} data an object containing property names corresponding to\r\n     * key system name strings (e.g. \"org.w3.clearkey\") and associated values\r\n     * being instances of {@link ProtectionData}\r\n     * @memberof module:ProtectionController\r\n     * @instance\r\n     * @ignore\r\n     */\r\n    function setProtectionData(data) {\r\n        protDataSet = data;\r\n        protectionKeyController.setProtectionData(data);\r\n    }\r\n\r\n    /**\r\n     * Stop method is called when current playback is stopped/resetted.\r\n     *\r\n     * @memberof module:ProtectionController\r\n     * @instance\r\n     */\r\n    function stop() {\r\n        if (protectionModel) {\r\n            protectionModel.stop();\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * Destroys all protection data associated with this protection set.  This includes\r\n     * deleting all key sessions. In the case of persistent key sessions, the sessions\r\n     * will simply be unloaded and not deleted.  Additionally, if this protection set is\r\n     * associated with a HTMLMediaElement, it will be detached from that element.\r\n     *\r\n     * @memberof module:ProtectionController\r\n     * @instance\r\n     * @ignore\r\n     */\r\n    function reset() {\r\n        checkConfig();\r\n\r\n        eventBus.off(events.INTERNAL_KEY_MESSAGE, onKeyMessage, this);\r\n        eventBus.off(events.INTERNAL_KEY_STATUS_CHANGED, onKeyStatusChanged, this);\r\n\r\n        setMediaElement(null);\r\n\r\n        keySystem = undefined;//TODO-Refactor look at why undefined is needed for this. refactor\r\n\r\n        if (protectionModel) {\r\n            protectionModel.reset();\r\n            protectionModel = null;\r\n        }\r\n\r\n        needkeyRetries.forEach(retryTimeout => clearTimeout(retryTimeout));\r\n        needkeyRetries = [];\r\n\r\n        mediaInfoArr = [];\r\n    }\r\n\r\n    ///////////////\r\n    // Private\r\n    ///////////////\r\n\r\n    function getProtData(keySystem) {\r\n        let protData = null;\r\n        if (keySystem) {\r\n            const keySystemString = keySystem.systemString;\r\n\r\n            if (protDataSet) {\r\n                protData = (keySystemString in protDataSet) ? protDataSet[keySystemString] : null;\r\n            }\r\n        }\r\n        return protData;\r\n    }\r\n\r\n    function getKeySystemConfiguration(keySystem) {\r\n        const protData = getProtData(keySystem);\r\n        const audioCapabilities = [];\r\n        const videoCapabilities = [];\r\n        const audioRobustness = (protData && protData.audioRobustness && protData.audioRobustness.length > 0) ? protData.audioRobustness : robustnessLevel;\r\n        const videoRobustness = (protData && protData.videoRobustness && protData.videoRobustness.length > 0) ? protData.videoRobustness : robustnessLevel;\r\n        const ksSessionType = getSessionType(keySystem);\r\n        const distinctiveIdentifier = (protData && protData.distinctiveIdentifier) ? protData.distinctiveIdentifier : 'optional';\r\n        const persistentState = (protData && protData.persistentState) ? protData.persistentState : (ksSessionType === 'temporary') ? 'optional' : 'required';\r\n\r\n        mediaInfoArr.forEach((media) => {\r\n            if (media.type === constants.AUDIO) {\r\n                audioCapabilities.push(new MediaCapability(media.codec, audioRobustness));\r\n            } else if (media.type === constants.VIDEO) {\r\n                videoCapabilities.push(new MediaCapability(media.codec, videoRobustness));\r\n            }\r\n        });\r\n\r\n        return new KeySystemConfiguration(\r\n            audioCapabilities, videoCapabilities, distinctiveIdentifier,\r\n            persistentState,\r\n            [ksSessionType]);\r\n    }\r\n\r\n    function getSessionType(keySystem) {\r\n        const protData = getProtData(keySystem);\r\n        const ksSessionType = (protData && protData.sessionType) ? protData.sessionType : sessionType;\r\n        return ksSessionType;\r\n    }\r\n\r\n    function selectKeySystem(supportedKS, fromManifest) {\r\n        const self = this;\r\n        const requestedKeySystems = [];\r\n\r\n        // Reorder key systems according to priority order provided in protectionData\r\n        supportedKS = supportedKS.sort((ksA, ksB) => {\r\n            let indexA = (protDataSet && protDataSet[ksA.ks.systemString] && protDataSet[ksA.ks.systemString].priority >= 0) ? protDataSet[ksA.ks.systemString].priority : supportedKS.length;\r\n            let indexB = (protDataSet && protDataSet[ksB.ks.systemString] && protDataSet[ksB.ks.systemString].priority >= 0) ? protDataSet[ksB.ks.systemString].priority : supportedKS.length;\r\n            return indexA - indexB;\r\n        });\r\n\r\n        let ksIdx;\r\n        if (keySystem) {\r\n            // We have a key system\r\n            for (ksIdx = 0; ksIdx < supportedKS.length; ksIdx++) {\r\n                if (keySystem === supportedKS[ksIdx].ks) {\r\n\r\n                    requestedKeySystems.push({\r\n                        ks: supportedKS[ksIdx].ks,\r\n                        configs: [getKeySystemConfiguration(keySystem)]\r\n                    });\r\n\r\n                    // Ensure that we would be granted key system access using the key\r\n                    // system and codec information\r\n                    const onKeySystemAccessComplete = function (event) {\r\n                        eventBus.off(events.KEY_SYSTEM_ACCESS_COMPLETE, onKeySystemAccessComplete, self);\r\n                        if (event.error) {\r\n                            if (!fromManifest) {\r\n                                eventBus.trigger(events.KEY_SYSTEM_SELECTED, {error: new DashJSError(ProtectionErrors.KEY_SYSTEM_ACCESS_DENIED_ERROR_CODE, ProtectionErrors.KEY_SYSTEM_ACCESS_DENIED_ERROR_MESSAGE + event.error)});\r\n                            }\r\n                        } else {\r\n                            logger.info('DRM: KeySystem Access Granted');\r\n                            eventBus.trigger(events.KEY_SYSTEM_SELECTED, {data: event.data});\r\n                            const protData = getProtData(keySystem);\r\n                            if (protectionKeyController.isClearKey(keySystem)) {\r\n                                // For Clearkey: if parameters for generating init data was provided by the user, use them for generating\r\n                                // initData and overwrite possible initData indicated in encrypted event (EME)\r\n                                if (protData && protData.hasOwnProperty('clearkeys')) {\r\n                                    const initData = {kids: Object.keys(protData.clearkeys)};\r\n                                    supportedKS[ksIdx].initData = new TextEncoder().encode(JSON.stringify(initData));\r\n                                }\r\n                            }\r\n                            if (supportedKS[ksIdx].sessionId) {\r\n                                // Load MediaKeySession with sessionId\r\n                                loadKeySession(supportedKS[ksIdx].sessionId, supportedKS[ksIdx].initData);\r\n                            } else if (supportedKS[ksIdx].initData) {\r\n                                // Create new MediaKeySession with initData\r\n                                createKeySession(supportedKS[ksIdx].initData, supportedKS[ksIdx].cdmData);\r\n                            }\r\n                        }\r\n                    };\r\n                    eventBus.on(events.KEY_SYSTEM_ACCESS_COMPLETE, onKeySystemAccessComplete, self);\r\n                    protectionModel.requestKeySystemAccess(requestedKeySystems);\r\n                    break;\r\n                }\r\n            }\r\n        } else if (keySystem === undefined) {\r\n            // First time through, so we need to select a key system\r\n            keySystem = null;\r\n            pendingNeedKeyData.push(supportedKS);\r\n\r\n            // Add all key systems to our request list since we have yet to select a key system\r\n            for (let i = 0; i < supportedKS.length; i++) {\r\n                requestedKeySystems.push({\r\n                    ks: supportedKS[i].ks,\r\n                    configs: [getKeySystemConfiguration(supportedKS[i].ks)]\r\n                });\r\n            }\r\n\r\n            let keySystemAccess;\r\n            const onKeySystemAccessComplete = function (event) {\r\n                eventBus.off(events.KEY_SYSTEM_ACCESS_COMPLETE, onKeySystemAccessComplete, self);\r\n                if (event.error) {\r\n                    keySystem = undefined;\r\n                    eventBus.off(events.INTERNAL_KEY_SYSTEM_SELECTED, onKeySystemSelected, self);\r\n                    if (!fromManifest) {\r\n                        eventBus.trigger(events.KEY_SYSTEM_SELECTED, {\r\n                            data: null,\r\n                            error: new DashJSError(ProtectionErrors.KEY_SYSTEM_ACCESS_DENIED_ERROR_CODE, ProtectionErrors.KEY_SYSTEM_ACCESS_DENIED_ERROR_MESSAGE + event.error)\r\n                        });\r\n                    }\r\n                } else {\r\n                    keySystemAccess = event.data;\r\n                    logger.info('DRM: KeySystem Access Granted (' + keySystemAccess.keySystem.systemString + ')!  Selecting key system...');\r\n                    protectionModel.selectKeySystem(keySystemAccess);\r\n                }\r\n            };\r\n            var onKeySystemSelected = function (event) {\r\n                eventBus.off(events.INTERNAL_KEY_SYSTEM_SELECTED, onKeySystemSelected, self);\r\n                eventBus.off(events.KEY_SYSTEM_ACCESS_COMPLETE, onKeySystemAccessComplete, self);\r\n                if (!event.error) {\r\n                    if (!protectionModel) {\r\n                        return;\r\n                    }\r\n                    keySystem = protectionModel.getKeySystem();\r\n                    eventBus.trigger(events.KEY_SYSTEM_SELECTED, {data: keySystemAccess});\r\n                    // Set server certificate from protData\r\n                    const protData = getProtData(keySystem);\r\n                    if (protData && protData.serverCertificate && protData.serverCertificate.length > 0) {\r\n                        protectionModel.setServerCertificate(BASE64.decodeArray(protData.serverCertificate).buffer);\r\n                    }\r\n                    for (let i = 0; i < pendingNeedKeyData.length; i++) {\r\n                        for (ksIdx = 0; ksIdx < pendingNeedKeyData[i].length; ksIdx++) {\r\n                            if (keySystem === pendingNeedKeyData[i][ksIdx].ks) {\r\n                                if (protectionKeyController.isClearKey(keySystem)) {\r\n                                    // For Clearkey: if parameters for generating init data was provided by the user, use them for generating\r\n                                    // initData and overwrite possible initData indicated in encrypted event (EME)\r\n                                    if (protData && protData.hasOwnProperty('clearkeys')) {\r\n                                        const initData = {kids: Object.keys(protData.clearkeys)};\r\n                                        pendingNeedKeyData[i][ksIdx].initData = new TextEncoder().encode(JSON.stringify(initData));\r\n                                    }\r\n                                }\r\n                                if (pendingNeedKeyData[i][ksIdx].sessionId) {\r\n                                    // Load MediaKeySession with sessionId\r\n                                    loadKeySession(pendingNeedKeyData[i][ksIdx].sessionId, pendingNeedKeyData[i][ksIdx].initData);\r\n                                } else if (pendingNeedKeyData[i][ksIdx].initData !== null) {\r\n                                    // Create new MediaKeySession with initData\r\n                                    createKeySession(pendingNeedKeyData[i][ksIdx].initData, pendingNeedKeyData[i][ksIdx].cdmData);\r\n                                }\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n                } else {\r\n                    keySystem = undefined;\r\n                    if (!fromManifest) {\r\n                        eventBus.trigger(events.KEY_SYSTEM_SELECTED, {\r\n                            data: null,\r\n                            error: new DashJSError(ProtectionErrors.KEY_SYSTEM_ACCESS_DENIED_ERROR_CODE, ProtectionErrors.KEY_SYSTEM_ACCESS_DENIED_ERROR_MESSAGE + 'Error selecting key system! -- ' + event.error)\r\n                        });\r\n                    }\r\n                }\r\n            };\r\n            eventBus.on(events.INTERNAL_KEY_SYSTEM_SELECTED, onKeySystemSelected, self);\r\n            eventBus.on(events.KEY_SYSTEM_ACCESS_COMPLETE, onKeySystemAccessComplete, self);\r\n            protectionModel.requestKeySystemAccess(requestedKeySystems);\r\n        } else {\r\n            // We are in the process of selecting a key system, so just save the data\r\n            pendingNeedKeyData.push(supportedKS);\r\n        }\r\n    }\r\n\r\n    function sendLicenseRequestCompleteEvent(data, error) {\r\n        eventBus.trigger(events.LICENSE_REQUEST_COMPLETE, {data: data, error: error});\r\n    }\r\n\r\n    function onKeyStatusChanged(e) {\r\n        if (e.error) {\r\n            eventBus.trigger(events.KEY_STATUSES_CHANGED, {data: null, error: e.error});\r\n        } else {\r\n            logger.debug('DRM: key status = ' + e.status);\r\n        }\r\n    }\r\n\r\n    function onKeyMessage(e) {\r\n        logger.debug('DRM: onKeyMessage');\r\n\r\n        // Dispatch event to applications indicating we received a key message\r\n        const keyMessage = e.data;\r\n        eventBus.trigger(events.KEY_MESSAGE, {data: keyMessage});\r\n        const messageType = (keyMessage.messageType) ? keyMessage.messageType : 'license-request';\r\n        const message = keyMessage.message;\r\n        const sessionToken = keyMessage.sessionToken;\r\n        const protData = getProtData(keySystem);\r\n        const keySystemString = keySystem ? keySystem.systemString : null;\r\n        const licenseServerData = protectionKeyController.getLicenseServer(keySystem, protData, messageType);\r\n        const eventData = {sessionToken: sessionToken, messageType: messageType};\r\n\r\n        // Ensure message from CDM is not empty\r\n        if (!message || message.byteLength === 0) {\r\n            sendLicenseRequestCompleteEvent(eventData, new DashJSError(ProtectionErrors.MEDIA_KEY_MESSAGE_NO_CHALLENGE_ERROR_CODE, ProtectionErrors.MEDIA_KEY_MESSAGE_NO_CHALLENGE_ERROR_MESSAGE));\r\n            return;\r\n        }\r\n\r\n        // Message not destined for license server\r\n        if (!licenseServerData) {\r\n            logger.debug('DRM: License server request not required for this message (type = ' + e.data.messageType + ').  Session ID = ' + sessionToken.getSessionID());\r\n            sendLicenseRequestCompleteEvent(eventData);\r\n            return;\r\n        }\r\n\r\n        // Perform any special handling for ClearKey\r\n        if (protectionKeyController.isClearKey(keySystem)) {\r\n            const clearkeys = protectionKeyController.processClearKeyLicenseRequest(keySystem, protData, message);\r\n            if (clearkeys) {\r\n                logger.debug('DRM: ClearKey license request handled by application!');\r\n                sendLicenseRequestCompleteEvent(eventData);\r\n                protectionModel.updateKeySession(sessionToken, clearkeys);\r\n                return;\r\n            }\r\n        }\r\n\r\n        // All remaining key system scenarios require a request to a remote license server\r\n        // Determine license server URL\r\n        let url = null;\r\n        if (protData && protData.serverURL) {\r\n            const serverURL = protData.serverURL;\r\n            if (typeof serverURL === 'string' && serverURL !== '') {\r\n                url = serverURL;\r\n            } else if (typeof serverURL === 'object' && serverURL.hasOwnProperty(messageType)) {\r\n                url = serverURL[messageType];\r\n            }\r\n        } else if (protData && protData.laURL && protData.laURL !== '') {\r\n            // TODO: Deprecated!\r\n            url = protData.laURL;\r\n        } else {\r\n            // For clearkey use the url defined in the manifest\r\n            if (protectionKeyController.isClearKey(keySystem)) {\r\n                url = keySystem.getLicenseServerUrlFromMediaInfo(mediaInfoArr);\r\n            } else {\r\n                const psshData = CommonEncryption.getPSSHData(sessionToken.initData);\r\n                url = keySystem.getLicenseServerURLFromInitData(psshData);\r\n                if (!url) {\r\n                    url = e.data.laURL;\r\n                }\r\n            }\r\n        }\r\n        // Possibly update or override the URL based on the message\r\n        url = licenseServerData.getServerURLFromMessage(url, message, messageType);\r\n\r\n        // Ensure valid license server URL\r\n        if (!url) {\r\n            sendLicenseRequestCompleteEvent(eventData, new DashJSError(ProtectionErrors.MEDIA_KEY_MESSAGE_NO_LICENSE_SERVER_URL_ERROR_CODE, ProtectionErrors.MEDIA_KEY_MESSAGE_NO_LICENSE_SERVER_URL_ERROR_MESSAGE));\r\n            return;\r\n        }\r\n\r\n        // Set optional XMLHttpRequest headers from protection data and message\r\n        const reqHeaders = {};\r\n        let withCredentials = false;\r\n        const updateHeaders = function (headers) {\r\n            if (headers) {\r\n                for (const key in headers) {\r\n                    if ('authorization' === key.toLowerCase()) {\r\n                        withCredentials = true;\r\n                    }\r\n                    reqHeaders[key] = headers[key];\r\n                }\r\n            }\r\n        };\r\n        if (protData) {\r\n            updateHeaders(protData.httpRequestHeaders);\r\n        }\r\n        updateHeaders(keySystem.getRequestHeadersFromMessage(message));\r\n\r\n        // Overwrite withCredentials property from protData if present\r\n        if (protData && typeof protData.withCredentials == 'boolean') {\r\n            withCredentials = protData.withCredentials;\r\n        }\r\n\r\n        const reportError = function (xhr, eventData, keySystemString, messageType) {\r\n            const errorMsg = ((xhr.response) ? licenseServerData.getErrorResponse(xhr.response, keySystemString, messageType) : 'NONE');\r\n            sendLicenseRequestCompleteEvent(eventData, new DashJSError(ProtectionErrors.MEDIA_KEY_MESSAGE_LICENSER_ERROR_CODE,\r\n                ProtectionErrors.MEDIA_KEY_MESSAGE_LICENSER_ERROR_MESSAGE + keySystemString + ' update, XHR complete. status is \"' +\r\n                xhr.statusText + '\" (' + xhr.status + '), readyState is ' + xhr.readyState + '.  Response is ' + errorMsg));\r\n        };\r\n\r\n        const onLoad = function (xhr) {\r\n            if (!protectionModel) {\r\n                return;\r\n            }\r\n\r\n            if (xhr.status === 200) {\r\n                const licenseMessage = licenseServerData.getLicenseMessage(xhr.response, keySystemString, messageType);\r\n                if (licenseMessage !== null) {\r\n                    sendLicenseRequestCompleteEvent(eventData);\r\n                    protectionModel.updateKeySession(sessionToken, licenseMessage);\r\n                } else {\r\n                    reportError(xhr, eventData, keySystemString, messageType);\r\n                }\r\n            } else {\r\n                reportError(xhr, eventData, keySystemString, messageType);\r\n            }\r\n        };\r\n\r\n        const onAbort = function (xhr) {\r\n            sendLicenseRequestCompleteEvent(eventData, new DashJSError(ProtectionErrors.MEDIA_KEY_MESSAGE_LICENSER_ERROR_CODE,\r\n                ProtectionErrors.MEDIA_KEY_MESSAGE_LICENSER_ERROR_MESSAGE + keySystemString + ' update, XHR aborted. status is \"' +\r\n                xhr.statusText + '\" (' + xhr.status + '), readyState is ' + xhr.readyState));\r\n        };\r\n\r\n        const onError = function (xhr) {\r\n            sendLicenseRequestCompleteEvent(eventData, new DashJSError(ProtectionErrors.MEDIA_KEY_MESSAGE_LICENSER_ERROR_CODE,\r\n                ProtectionErrors.MEDIA_KEY_MESSAGE_LICENSER_ERROR_MESSAGE + keySystemString + ' update, XHR error. status is \"' +\r\n                xhr.statusText + '\" (' + xhr.status + '), readyState is ' + xhr.readyState));\r\n        };\r\n\r\n        //const reqPayload = keySystem.getLicenseRequestFromMessage(message);\r\n        const reqPayload = keySystem.getLicenseRequestFromMessage(message);\r\n        const reqMethod = licenseServerData.getHTTPMethod(messageType);\r\n        const responseType = licenseServerData.getResponseType(keySystemString, messageType);\r\n        const timeout = protData && !isNaN(protData.httpTimeout) ? protData.httpTimeout : LICENSE_SERVER_REQUEST_DEFAULT_TIMEOUT;\r\n\r\n        doLicenseRequest(url, reqHeaders, reqMethod, responseType, withCredentials, reqPayload,\r\n            LICENSE_SERVER_REQUEST_RETRIES, timeout, onLoad, onAbort, onError);\r\n    }\r\n\r\n    // Implement license requests with a retry mechanism to avoid temporary network issues to affect playback experience\r\n    function doLicenseRequest(url, headers, method, responseType, withCredentials, payload, retriesCount, timeout, onLoad, onAbort, onError) {\r\n        const xhr = new XMLHttpRequest();\r\n\r\n        xhr.open(method, url, true);\r\n        xhr.responseType = responseType;\r\n        xhr.withCredentials = withCredentials;\r\n        if (timeout > 0) {\r\n            xhr.timeout = timeout;\r\n        }\r\n        for (const key in headers) {\r\n            xhr.setRequestHeader(key, headers[key]);\r\n        }\r\n\r\n        const retryRequest = function () {\r\n            // fail silently and retry\r\n            retriesCount--;\r\n            setTimeout(function () {\r\n                doLicenseRequest(url, headers, method, responseType, withCredentials, payload,\r\n                    retriesCount, timeout, onLoad, onAbort, onError);\r\n            }, LICENSE_SERVER_REQUEST_RETRY_INTERVAL);\r\n        };\r\n\r\n        xhr.onload = function () {\r\n            if (this.status === 200 || retriesCount <= 0) {\r\n                onLoad(this);\r\n            } else {\r\n                logger.warn('License request failed (' + this.status + '). Retrying it... Pending retries: ' + retriesCount);\r\n                retryRequest();\r\n            }\r\n        };\r\n\r\n        xhr.ontimeout = xhr.onerror = function () {\r\n            if (retriesCount <= 0) {\r\n                onError(this);\r\n            } else {\r\n                logger.warn('License request network request failed . Retrying it... Pending retries: ' + retriesCount);\r\n                retryRequest();\r\n            }\r\n        };\r\n\r\n        xhr.onabort = function () {\r\n            onAbort(this);\r\n        };\r\n\r\n        xhr.send(payload);\r\n    }\r\n\r\n    function onNeedKey(event, retry) {\r\n        logger.debug('DRM: onNeedKey');\r\n        // Ignore non-cenc initData\r\n        if (event.key.initDataType !== 'cenc') {\r\n            logger.warn('DRM:  Only \\'cenc\\' initData is supported!  Ignoring initData of type: ' + event.key.initDataType);\r\n            return;\r\n        }\r\n\r\n        if (mediaInfoArr.length === 0) {\r\n            logger.warn('DRM: onNeedKey called before initializeForMedia, wait until initialized');\r\n            retry = typeof retry === 'undefined' ? 1 : retry + 1;\r\n            if (retry < NEEDKEY_BEFORE_INITIALIZE_RETRIES) {\r\n                needkeyRetries.push(setTimeout(() => {\r\n                    onNeedKey(event, retry);\r\n                }, NEEDKEY_BEFORE_INITIALIZE_TIMEOUT));\r\n                return;\r\n            }\r\n\r\n        }\r\n\r\n        // Some browsers return initData as Uint8Array (IE), some as ArrayBuffer (Chrome).\r\n        // Convert to ArrayBuffer\r\n        let abInitData = event.key.initData;\r\n        if (ArrayBuffer.isView(abInitData)) {\r\n            abInitData = abInitData.buffer;\r\n        }\r\n\r\n        // If key system has already been selected and initData already seen, then do nothing\r\n        if (keySystem) {\r\n            const initDataForKS = CommonEncryption.getPSSHForKeySystem(keySystem, abInitData);\r\n            if (initDataForKS) {\r\n\r\n                // Check for duplicate initData\r\n                const currentInitData = protectionModel.getAllInitData();\r\n                for (let i = 0; i < currentInitData.length; i++) {\r\n                    if (protectionKeyController.initDataEquals(initDataForKS, currentInitData[i])) {\r\n                        logger.warn('DRM: Ignoring initData because we have already seen it!');\r\n                        return;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        logger.debug('DRM: initData:', String.fromCharCode.apply(null, new Uint8Array(abInitData)));\r\n\r\n        const supportedKS = protectionKeyController.getSupportedKeySystems(abInitData, protDataSet);\r\n        if (supportedKS.length === 0) {\r\n            logger.debug('DRM: Received needkey event with initData, but we don\\'t support any of the key systems!');\r\n            return;\r\n        }\r\n\r\n        selectKeySystem(supportedKS, false);\r\n    }\r\n\r\n    function getKeySystems() {\r\n        return protectionKeyController ? protectionKeyController.getKeySystems() : [];\r\n    }\r\n\r\n    function setKeySystems(keySystems) {\r\n        if (protectionKeyController) {\r\n            protectionKeyController.setKeySystems(keySystems);\r\n        }\r\n    }\r\n\r\n    instance = {\r\n        initializeForMedia: initializeForMedia,\r\n        createKeySession: createKeySession,\r\n        loadKeySession: loadKeySession,\r\n        removeKeySession: removeKeySession,\r\n        closeKeySession: closeKeySession,\r\n        setServerCertificate: setServerCertificate,\r\n        setMediaElement: setMediaElement,\r\n        setSessionType: setSessionType,\r\n        setRobustnessLevel: setRobustnessLevel,\r\n        setProtectionData: setProtectionData,\r\n        getSupportedKeySystemsFromContentProtection: getSupportedKeySystemsFromContentProtection,\r\n        getKeySystems: getKeySystems,\r\n        setKeySystems: setKeySystems,\r\n        stop: stop,\r\n        reset: reset\r\n    };\r\n\r\n    setup();\r\n    return instance;\r\n}\r\n\r\nProtectionController.__dashjs_factory_name = 'ProtectionController';\r\nexport default dashjs.FactoryMaker.getClassFactory(ProtectionController); /* jshint ignore:line */\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\nimport CommonEncryption from './../CommonEncryption';\r\nimport KeySystemClearKey from './../drm/KeySystemClearKey';\r\nimport KeySystemW3CClearKey from './../drm/KeySystemW3CClearKey';\r\nimport KeySystemWidevine from './../drm/KeySystemWidevine';\r\nimport KeySystemPlayReady from './../drm/KeySystemPlayReady';\r\nimport DRMToday from './../servers/DRMToday';\r\nimport ThePlatform from './../servers/ThePlatform';\r\nimport PlayReady from './../servers/PlayReady';\r\nimport Widevine from './../servers/Widevine';\r\nimport ClearKey from './../servers/ClearKey';\r\nimport ProtectionConstants from '../../constants/ProtectionConstants';\r\n\r\n/**\r\n * @module ProtectionKeyController\r\n * @ignore\r\n * @description Media protection key system functionality that can be modified/overridden by applications\r\n */\r\nfunction ProtectionKeyController() {\r\n\r\n    let context = this.context;\r\n\r\n    let instance,\r\n        debug,\r\n        logger,\r\n        keySystems,\r\n        BASE64,\r\n        clearkeyKeySystem,\r\n        clearkeyW3CKeySystem;\r\n\r\n    function setConfig(config) {\r\n        if (!config) return;\r\n\r\n        if (config.debug) {\r\n            debug = config.debug;\r\n            logger = debug.getLogger(instance);\r\n        }\r\n\r\n        if (config.BASE64) {\r\n            BASE64 = config.BASE64;\r\n        }\r\n    }\r\n\r\n    function initialize() {\r\n        keySystems = [];\r\n\r\n        let keySystem;\r\n\r\n        // PlayReady\r\n        keySystem = KeySystemPlayReady(context).getInstance({ BASE64: BASE64 });\r\n        keySystems.push(keySystem);\r\n\r\n        // Widevine\r\n        keySystem = KeySystemWidevine(context).getInstance({ BASE64: BASE64 });\r\n        keySystems.push(keySystem);\r\n\r\n        // ClearKey\r\n        keySystem = KeySystemClearKey(context).getInstance({ BASE64: BASE64 });\r\n        keySystems.push(keySystem);\r\n        clearkeyKeySystem = keySystem;\r\n\r\n        // W3C ClearKey\r\n        keySystem = KeySystemW3CClearKey(context).getInstance({ BASE64: BASE64, debug: debug });\r\n        keySystems.push(keySystem);\r\n        clearkeyW3CKeySystem = keySystem;\r\n    }\r\n\r\n    /**\r\n     * Returns a prioritized list of key systems supported\r\n     * by this player (not necessarily those supported by the\r\n     * user agent)\r\n     *\r\n     * @returns {Array.<KeySystem>} a prioritized\r\n     * list of key systems\r\n     * @memberof module:ProtectionKeyController\r\n     * @instance\r\n     */\r\n    function getKeySystems() {\r\n        return keySystems;\r\n    }\r\n\r\n    /**\r\n     * Sets the prioritized list of key systems to be supported\r\n     * by this player.\r\n     *\r\n     * @param {Array.<KeySystem>} newKeySystems the new prioritized\r\n     * list of key systems\r\n     * @memberof module:ProtectionKeyController\r\n     * @instance\r\n     */\r\n    function setKeySystems(newKeySystems) {\r\n        keySystems = newKeySystems;\r\n    }\r\n\r\n    /**\r\n     * Returns the key system associated with the given key system string\r\n     * name (i.e. 'org.w3.clearkey')\r\n     *\r\n     * @param {string} systemString the system string\r\n     * @returns {KeySystem|null} the key system\r\n     * or null if no supported key system is associated with the given key\r\n     * system string\r\n     * @memberof module:ProtectionKeyController\r\n     * @instance\r\n     */\r\n    function getKeySystemBySystemString(systemString) {\r\n        for (let i = 0; i < keySystems.length; i++) {\r\n            if (keySystems[i].systemString === systemString) {\r\n                return keySystems[i];\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Determines whether the given key system is ClearKey.  This is\r\n     * necessary because the EME spec defines ClearKey and its method\r\n     * for providing keys to the key session; and this method has changed\r\n     * between the various API versions.  Our EME-specific ProtectionModels\r\n     * must know if the system is ClearKey so that it can format the keys\r\n     * according to the particular spec version.\r\n     *\r\n     * @param {Object} keySystem the key\r\n     * @returns {boolean} true if this is the ClearKey key system, false\r\n     * otherwise\r\n     * @memberof module:ProtectionKeyController\r\n     * @instance\r\n     */\r\n    function isClearKey(keySystem) {\r\n        return (keySystem === clearkeyKeySystem || keySystem === clearkeyW3CKeySystem);\r\n    }\r\n\r\n    /**\r\n     * Check equality of initData array buffers.\r\n     *\r\n     * @param {ArrayBuffer} initData1 - first initData\r\n     * @param {ArrayBuffer} initData2 - second initData\r\n     * @returns {boolean} true if the initData arrays are equal in size and\r\n     * contents, false otherwise\r\n     * @memberof module:ProtectionKeyController\r\n     * @instance\r\n     */\r\n    function initDataEquals(initData1, initData2) {\r\n        if (initData1.byteLength === initData2.byteLength) {\r\n            let data1 = new Uint8Array(initData1);\r\n            let data2 = new Uint8Array(initData2);\r\n\r\n            for (let j = 0; j < data1.length; j++) {\r\n                if (data1[j] !== data2[j]) {\r\n                    return false;\r\n                }\r\n            }\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Returns a set of supported key systems and CENC initialization data\r\n     * from the given array of ContentProtection elements.  Only\r\n     * key systems that are supported by this player will be returned.\r\n     * Key systems are returned in priority order (highest first).\r\n     *\r\n     * @param {Array.<Object>} cps - array of content protection elements parsed\r\n     * from the manifest\r\n     * @returns {Array.<Object>} array of objects indicating which supported key\r\n     * systems were found.  Empty array is returned if no\r\n     * supported key systems were found\r\n     * @memberof module:ProtectionKeyController\r\n     * @instance\r\n     */\r\n    function getSupportedKeySystemsFromContentProtection(cps) {\r\n        let cp, ks, ksIdx, cpIdx;\r\n        let supportedKS = [];\r\n\r\n        if (cps) {\r\n            const cencContentProtection = CommonEncryption.findCencContentProtection(cps);\r\n            for (ksIdx = 0; ksIdx < keySystems.length; ++ksIdx) {\r\n                ks = keySystems[ksIdx];\r\n                for (cpIdx = 0; cpIdx < cps.length; ++cpIdx) {\r\n                    cp = cps[cpIdx];\r\n                    if (cp.schemeIdUri.toLowerCase() === ks.schemeIdURI) {\r\n                        // Look for DRM-specific ContentProtection\r\n                        let initData = ks.getInitData(cp, cencContentProtection);\r\n\r\n                        supportedKS.push({\r\n                            ks: keySystems[ksIdx],\r\n                            initData: initData,\r\n                            cdmData: ks.getCDMData(),\r\n                            sessionId: ks.getSessionId(cp)\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return supportedKS;\r\n    }\r\n\r\n    /**\r\n     * Returns key systems supported by this player for the given PSSH\r\n     * initializationData. Only key systems supported by this player\r\n     * that have protection data present will be returned.  Key systems are returned in priority order\r\n     * (highest priority first)\r\n     *\r\n     * @param {ArrayBuffer} initData Concatenated PSSH data for all DRMs\r\n     * supported by the content\r\n     * @param {ProtectionData} protDataSet user specified protection data - license server url etc\r\n     * supported by the content\r\n     * @returns {Array.<Object>} array of objects indicating which supported key\r\n     * systems were found.  Empty array is returned if no\r\n     * supported key systems were found\r\n     * @memberof module:ProtectionKeyController\r\n     * @instance\r\n     */\r\n    function getSupportedKeySystems(initData, protDataSet) {\r\n        let supportedKS = [];\r\n        let pssh = CommonEncryption.parsePSSHList(initData);\r\n        let ks, keySystemString, shouldNotFilterOutKeySystem;\r\n\r\n        for (let ksIdx = 0; ksIdx < keySystems.length; ++ksIdx) {\r\n            ks = keySystems[ksIdx];\r\n            keySystemString = ks.systemString;\r\n            shouldNotFilterOutKeySystem = (protDataSet) ? keySystemString in protDataSet : true;\r\n\r\n            if (ks.uuid in pssh && shouldNotFilterOutKeySystem) {\r\n                supportedKS.push({\r\n                    ks: ks,\r\n                    initData: pssh[ks.uuid],\r\n                    cdmData: ks.getCDMData(),\r\n                    sessionId: ks.getSessionId()\r\n                });\r\n            }\r\n        }\r\n        return supportedKS;\r\n    }\r\n\r\n    /**\r\n     * Returns the license server implementation data that should be used for this request.\r\n     *\r\n     * @param {KeySystem} keySystem the key system\r\n     * associated with this license request\r\n     * @param {ProtectionData} protData protection data to use for the\r\n     * request\r\n     * @param {string} [messageType=\"license-request\"] the message type associated with this\r\n     * request.  Supported message types can be found\r\n     * {@link https://w3c.github.io/encrypted-media/#idl-def-MediaKeyMessageType|here}.\r\n     * @returns {LicenseServer|null} the license server\r\n     * implementation that should be used for this request or null if the player should not\r\n     * pass messages of the given type to a license server\r\n     * @memberof module:ProtectionKeyController\r\n     * @instance\r\n     *\r\n     */\r\n    function getLicenseServer(keySystem, protData, messageType) {\r\n        console.log('ProtectionKeyController getLicenseServer', arguments);\r\n\r\n        // Our default server implementations do not do anything with \"license-release\" or\r\n        // \"individualization-request\" messages, so we just send a success event\r\n        if (messageType === 'license-release' || messageType === 'individualization-request') {\r\n            return null;\r\n        }\r\n\r\n        let licenseServerData = null;\r\n        if (protData && protData.hasOwnProperty('theplatform')) {\r\n            console.log(JSON.stringify(protData));\r\n            console.log('ProtectionKeyController.js::Its the platform');\r\n            licenseServerData = ThePlatform(context).getInstance({ tpData: protData.theplatform, BASE64: BASE64 });\r\n        } else if (protData && protData.hasOwnProperty('drmtoday')) {\r\n            licenseServerData = DRMToday(context).getInstance({ BASE64: BASE64 });\r\n        } else if (keySystem.systemString === ProtectionConstants.WIDEVINE_KEYSTEM_STRING) {\r\n            licenseServerData = Widevine(context).getInstance();\r\n        } else if (keySystem.systemString === ProtectionConstants.PLAYREADY_KEYSTEM_STRING) {\r\n            licenseServerData = PlayReady(context).getInstance();\r\n        } else if (keySystem.systemString === ProtectionConstants.CLEARKEY_KEYSTEM_STRING) {\r\n            licenseServerData = ClearKey(context).getInstance();\r\n        }\r\n\r\n        return licenseServerData;\r\n    }\r\n\r\n    /**\r\n     * Allows application-specific retrieval of ClearKey keys.\r\n     *\r\n     * @param {KeySystem} clearkeyKeySystem They exact ClearKey System to be used\r\n     * @param {ProtectionData} protData protection data to use for the\r\n     * request\r\n     * @param {ArrayBuffer} message the key message from the CDM\r\n     * @return {ClearKeyKeySet|null} the clear keys associated with\r\n     * the request or null if no keys can be returned by this function\r\n     * @memberof module:ProtectionKeyController\r\n     * @instance\r\n     */\r\n    function processClearKeyLicenseRequest(clearkeyKeySystem, protData, message) {\r\n        try {\r\n            return clearkeyKeySystem.getClearKeysFromProtectionData(protData, message);\r\n        } catch (error) {\r\n            logger.error('Failed to retrieve clearkeys from ProtectionData');\r\n            return null;\r\n        }\r\n    }\r\n\r\n    function setProtectionData(protectionDataSet) {\r\n        var getProtectionData = function (keySystemString) {\r\n            var protData = null;\r\n            if (protectionDataSet) {\r\n                protData = (keySystemString in protectionDataSet) ? protectionDataSet[keySystemString] : null;\r\n            }\r\n            return protData;\r\n        };\r\n\r\n        for (var i = 0; i < keySystems.length; i++) {\r\n            var keySystem = keySystems[i];\r\n            if (keySystem.hasOwnProperty('init')) {\r\n                keySystem.init(getProtectionData(keySystem.systemString));\r\n            }\r\n        }\r\n    }\r\n\r\n    instance = {\r\n        initialize: initialize,\r\n        setProtectionData: setProtectionData,\r\n        isClearKey: isClearKey,\r\n        initDataEquals: initDataEquals,\r\n        getKeySystems: getKeySystems,\r\n        setKeySystems: setKeySystems,\r\n        getKeySystemBySystemString: getKeySystemBySystemString,\r\n        getSupportedKeySystemsFromContentProtection: getSupportedKeySystemsFromContentProtection,\r\n        getSupportedKeySystems: getSupportedKeySystems,\r\n        getLicenseServer: getLicenseServer,\r\n        processClearKeyLicenseRequest: processClearKeyLicenseRequest,\r\n        setConfig: setConfig\r\n    };\r\n\r\n    return instance;\r\n}\r\n\r\nProtectionKeyController.__dashjs_factory_name = 'ProtectionKeyController';\r\nexport default dashjs.FactoryMaker.getSingletonFactory(ProtectionKeyController); /* jshint ignore:line */\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\nimport KeyPair from '../vo/KeyPair';\r\nimport ClearKeyKeySet from '../vo/ClearKeyKeySet';\r\nimport CommonEncryption from '../CommonEncryption';\r\nimport ProtectionConstants from '../../constants/ProtectionConstants';\r\n\r\nconst uuid = 'e2719d58-a985-b3c9-781a-b030af78d30e';\r\nconst systemString = ProtectionConstants.CLEARKEY_KEYSTEM_STRING;\r\nconst schemeIdURI = 'urn:uuid:' + uuid;\r\n\r\nfunction KeySystemClearKey(config) {\r\n\r\n    config = config || {};\r\n    let instance;\r\n    const BASE64 = config.BASE64;\r\n    const LICENSE_SERVER_MANIFEST_CONFIGURATIONS = {\r\n        attributes: ['Laurl', 'laurl'],\r\n        prefixes: ['clearkey', 'dashif']\r\n    };\r\n\r\n    /**\r\n     * Returns desired clearkeys (as specified in the CDM message) from protection data\r\n     *\r\n     * @param {ProtectionData} protectionData the protection data\r\n     * @param {ArrayBuffer} message the ClearKey CDM message\r\n     * @returns {ClearKeyKeySet} the key set or null if none found\r\n     * @throws {Error} if a keyID specified in the CDM message was not found in the\r\n     * protection data\r\n     * @memberof KeySystemClearKey\r\n     */\r\n    function getClearKeysFromProtectionData(protectionData, message) {\r\n        let clearkeySet = null;\r\n        if (protectionData) {\r\n            // ClearKey is the only system that does not require a license server URL, so we\r\n            // handle it here when keys are specified in protection data\r\n            const jsonMsg = JSON.parse(String.fromCharCode.apply(null, new Uint8Array(message)));\r\n            const keyPairs = [];\r\n            for (let i = 0; i < jsonMsg.kids.length; i++) {\r\n                const clearkeyID = jsonMsg.kids[i];\r\n                const clearkey = (protectionData.clearkeys && protectionData.clearkeys.hasOwnProperty(clearkeyID)) ? protectionData.clearkeys[clearkeyID] : null;\r\n                if (!clearkey) {\r\n                    throw new Error('DRM: ClearKey keyID (' + clearkeyID + ') is not known!');\r\n                }\r\n                // KeyIDs from CDM are not base64 padded.  Keys may or may not be padded\r\n                keyPairs.push(new KeyPair(clearkeyID, clearkey));\r\n            }\r\n            clearkeySet = new ClearKeyKeySet(keyPairs);\r\n        }\r\n        return clearkeySet;\r\n    }\r\n\r\n    function getInitData(cp, cencContentProtection) {\r\n        try {\r\n            let initData = CommonEncryption.parseInitDataFromContentProtection(cp, BASE64);\r\n\r\n            if (!initData && cencContentProtection) {\r\n                const cencDefaultKid = cencDefaultKidToBase64Representation(cencContentProtection['cenc:default_KID']);\r\n                const data = {kids: [cencDefaultKid]};\r\n                initData = new TextEncoder().encode(JSON.stringify(data));\r\n            }\r\n\r\n            return initData;\r\n        } catch (e) {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    function cencDefaultKidToBase64Representation(cencDefaultKid) {\r\n        try {\r\n            let kid = cencDefaultKid.replace(/-/g, '');\r\n            kid = btoa(kid.match(/\\w{2}/g).map((a) => {\r\n                return String.fromCharCode(parseInt(a, 16));\r\n            }).join(''));\r\n            return kid.replace(/=/g, '');\r\n        } catch (e) {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    function getRequestHeadersFromMessage(/*message*/) {\r\n        // Set content type to application/json by default\r\n        return {\r\n            'Content-Type': 'application/json'\r\n        };\r\n    }\r\n\r\n    function getLicenseRequestFromMessage(message) {\r\n        return JSON.parse(String.fromCharCode.apply(null, new Uint8Array(message)));\r\n    }\r\n\r\n    function getLicenseServerURLFromInitData(/*initData*/) {\r\n        return null;\r\n    }\r\n\r\n    function getLicenseServerUrlFromMediaInfo(mediaInfo) {\r\n        try {\r\n            if (!mediaInfo || mediaInfo.length === 0) {\r\n                return null;\r\n            }\r\n            let i = 0;\r\n            let licenseServer = null;\r\n            while (i < mediaInfo.length && !licenseServer) {\r\n                const info = mediaInfo[i];\r\n                if (info && info.contentProtection && info.contentProtection.length > 0) {\r\n                    const clearkeyProtData = info.contentProtection.filter((cp) => {\r\n                        return cp.schemeIdUri && cp.schemeIdUri === schemeIdURI;\r\n                    });\r\n                    if (clearkeyProtData && clearkeyProtData.length > 0) {\r\n                        let j = 0;\r\n                        while (j < clearkeyProtData.length && !licenseServer) {\r\n                            const ckData = clearkeyProtData[j];\r\n                            let k = 0;\r\n                            while (k < LICENSE_SERVER_MANIFEST_CONFIGURATIONS.attributes.length && !licenseServer) {\r\n                                let l = 0;\r\n                                const attribute = LICENSE_SERVER_MANIFEST_CONFIGURATIONS.attributes[k];\r\n                                while (l < LICENSE_SERVER_MANIFEST_CONFIGURATIONS.prefixes.length && !licenseServer) {\r\n                                    const prefix = LICENSE_SERVER_MANIFEST_CONFIGURATIONS.prefixes[l];\r\n                                    if (ckData[attribute] && ckData[attribute].__prefix && ckData[attribute].__prefix === prefix && ckData[attribute].__text) {\r\n                                        licenseServer = ckData[attribute].__text;\r\n                                    }\r\n                                    l += 1;\r\n                                }\r\n                                k += 1;\r\n                            }\r\n                            j += 1;\r\n                        }\r\n                    }\r\n                }\r\n                i += 1;\r\n            }\r\n            return licenseServer;\r\n        } catch\r\n            (e) {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    function getCDMData() {\r\n        return null;\r\n    }\r\n\r\n    function getSessionId(/*cp*/) {\r\n        return null;\r\n    }\r\n\r\n    instance = {\r\n        uuid: uuid,\r\n        schemeIdURI: schemeIdURI,\r\n        systemString: systemString,\r\n        getInitData: getInitData,\r\n        getRequestHeadersFromMessage: getRequestHeadersFromMessage,\r\n        getLicenseRequestFromMessage: getLicenseRequestFromMessage,\r\n        getLicenseServerURLFromInitData: getLicenseServerURLFromInitData,\r\n        getCDMData: getCDMData,\r\n        getSessionId: getSessionId,\r\n        getLicenseServerUrlFromMediaInfo,\r\n        getClearKeysFromProtectionData: getClearKeysFromProtectionData\r\n    };\r\n\r\n    return instance;\r\n}\r\n\r\nKeySystemClearKey.__dashjs_factory_name = 'KeySystemClearKey';\r\nexport default dashjs.FactoryMaker.getSingletonFactory(KeySystemClearKey); /* jshint ignore:line */\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\n/**\r\n * Microsoft PlayReady DRM\r\n *\r\n * @class\r\n * @implements KeySystem\r\n */\r\nimport CommonEncryption from '../CommonEncryption';\r\nimport ProtectionConstants from '../../constants/ProtectionConstants';\r\n\r\nconst uuid = '9a04f079-9840-4286-ab92-e65be0885f95';\r\nconst systemString = ProtectionConstants.PLAYREADY_KEYSTEM_STRING;\r\nconst schemeIdURI = 'urn:uuid:' + uuid;\r\nconst PRCDMData = '<PlayReadyCDMData type=\"LicenseAcquisition\"><LicenseAcquisition version=\"1.0\" Proactive=\"false\"><CustomData encoding=\"base64encoded\">%CUSTOMDATA%</CustomData></LicenseAcquisition></PlayReadyCDMData>';\r\nlet protData;\r\n\r\nfunction KeySystemPlayReady(config) {\r\n\r\n    config = config || {};\r\n    let instance;\r\n    let messageFormat = 'utf-16';\r\n    const BASE64 = config.BASE64;\r\n\r\n    function checkConfig() {\r\n        if (!BASE64 || !BASE64.hasOwnProperty('decodeArray') || !BASE64.hasOwnProperty('decodeArray') ) {\r\n            throw new Error('Missing config parameter(s)');\r\n        }\r\n    }\r\n\r\n    function getRequestHeadersFromMessage(message) {\r\n        let msg,\r\n            xmlDoc;\r\n        const headers = {};\r\n        const parser = new DOMParser();\r\n        const dataview = (messageFormat === 'utf-16') ? new Uint16Array(message) : new Uint8Array(message);\r\n\r\n        msg = String.fromCharCode.apply(null, dataview);\r\n        xmlDoc = parser.parseFromString(msg, 'application/xml');\r\n\r\n        const headerNameList = xmlDoc.getElementsByTagName('name');\r\n        const headerValueList = xmlDoc.getElementsByTagName('value');\r\n        for (let i = 0; i < headerNameList.length; i++) {\r\n            headers[headerNameList[i].childNodes[0].nodeValue] = headerValueList[i].childNodes[0].nodeValue;\r\n        }\r\n        // Some versions of the PlayReady CDM return 'Content' instead of 'Content-Type'.\r\n        // this is NOT w3c conform and license servers may reject the request!\r\n        // -> rename it to proper w3c definition!\r\n        if (headers.hasOwnProperty('Content')) {\r\n            headers['Content-Type'] = headers.Content;\r\n            delete headers.Content;\r\n        }\r\n        // Set Content-Type header by default if not provided in the the CDM message (<PlayReadyKeyMessage/>)\r\n        // or if the message contains directly the challenge itself (Ex: LG SmartTVs)\r\n        if (!headers.hasOwnProperty('Content-Type')) {\r\n            headers['Content-Type'] = 'text/xml; charset=utf-8';\r\n        }\r\n        return headers;\r\n    }\r\n\r\n    function getLicenseRequestFromMessage(message) {\r\n        let licenseRequest = null;\r\n        const parser = new DOMParser();\r\n        const dataview = (messageFormat === 'utf-16') ? new Uint16Array(message) : new Uint8Array(message);\r\n\r\n        checkConfig();\r\n        const msg = String.fromCharCode.apply(null, dataview);\r\n        const xmlDoc = parser.parseFromString(msg, 'application/xml');\r\n\r\n        if (xmlDoc.getElementsByTagName('PlayReadyKeyMessage')[0]) {\r\n            const Challenge = xmlDoc.getElementsByTagName('Challenge')[0].childNodes[0].nodeValue;\r\n            if (Challenge) {\r\n                licenseRequest = BASE64.decode(Challenge);\r\n            }\r\n        } else {\r\n            // The message from CDM is not a wrapped message as on IE11 and Edge,\r\n            // thus it contains direclty the challenge itself\r\n            // (note that the xmlDoc at this point may be unreadable since it may have been interpreted as UTF-16)\r\n            return message;\r\n        }\r\n\r\n        return licenseRequest;\r\n    }\r\n\r\n    function getLicenseServerURLFromInitData(initData) {\r\n        if (initData) {\r\n            const data = new DataView(initData);\r\n            const numRecords = data.getUint16(4, true);\r\n            let offset = 6;\r\n            const parser = new DOMParser();\r\n\r\n            for (let i = 0; i < numRecords; i++) {\r\n                // Parse the PlayReady Record header\r\n                const recordType = data.getUint16(offset, true);\r\n                offset += 2;\r\n                const recordLength = data.getUint16(offset, true);\r\n                offset += 2;\r\n                if (recordType !== 0x0001) {\r\n                    offset += recordLength;\r\n                    continue;\r\n                }\r\n\r\n                const recordData = initData.slice(offset, offset + recordLength);\r\n                const record = String.fromCharCode.apply(null, new Uint16Array(recordData));\r\n                const xmlDoc = parser.parseFromString(record, 'application/xml');\r\n\r\n                // First try <LA_URL>\r\n                if (xmlDoc.getElementsByTagName('LA_URL')[0]) {\r\n                    const laurl = xmlDoc.getElementsByTagName('LA_URL')[0].childNodes[0].nodeValue;\r\n                    if (laurl) {\r\n                        return laurl;\r\n                    }\r\n                }\r\n\r\n                // Optionally, try <LUI_URL>\r\n                if (xmlDoc.getElementsByTagName('LUI_URL')[0]) {\r\n                    const luiurl = xmlDoc.getElementsByTagName('LUI_URL')[0].childNodes[0].nodeValue;\r\n                    if (luiurl) {\r\n                        return luiurl;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    function getInitData(cpData) {\r\n        // * desc@ getInitData\r\n        // *   generate PSSH data from PROHeader defined in MPD file\r\n        // *   PSSH format:\r\n        // *   size (4)\r\n        // *   box type(PSSH) (8)\r\n        // *   Protection SystemID (16)\r\n        // *   protection system data size (4) - length of decoded PROHeader\r\n        // *   decoded PROHeader data from MPD file\r\n        const PSSHBoxType = new Uint8Array([0x70, 0x73, 0x73, 0x68, 0x00, 0x00, 0x00, 0x00]); //'PSSH' 8 bytes\r\n        const playreadySystemID = new Uint8Array([0x9a, 0x04, 0xf0, 0x79, 0x98, 0x40, 0x42, 0x86, 0xab, 0x92, 0xe6, 0x5b, 0xe0, 0x88, 0x5f, 0x95]);\r\n\r\n        let byteCursor = 0;\r\n        let uint8arraydecodedPROHeader = null;\r\n\r\n        let PROSize,\r\n            PSSHSize,\r\n            PSSHBoxBuffer,\r\n            PSSHBox,\r\n            PSSHData;\r\n\r\n        checkConfig();\r\n        if (!cpData) {\r\n            return null;\r\n        }\r\n        // Handle common encryption PSSH\r\n        if ('pssh' in cpData) {\r\n            return CommonEncryption.parseInitDataFromContentProtection(cpData, BASE64);\r\n        }\r\n        // Handle native MS PlayReady ContentProtection elements\r\n        if ('pro' in cpData) {\r\n            uint8arraydecodedPROHeader = BASE64.decodeArray(cpData.pro.__text);\r\n        }\r\n        else if ('prheader' in cpData) {\r\n            uint8arraydecodedPROHeader = BASE64.decodeArray(cpData.prheader.__text);\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n\r\n        PROSize = uint8arraydecodedPROHeader.length;\r\n        PSSHSize = 0x4 + PSSHBoxType.length + playreadySystemID.length + 0x4 + PROSize;\r\n\r\n        PSSHBoxBuffer = new ArrayBuffer(PSSHSize);\r\n\r\n        PSSHBox = new Uint8Array(PSSHBoxBuffer);\r\n        PSSHData = new DataView(PSSHBoxBuffer);\r\n\r\n        PSSHData.setUint32(byteCursor, PSSHSize);\r\n        byteCursor += 0x4;\r\n\r\n        PSSHBox.set(PSSHBoxType, byteCursor);\r\n        byteCursor += PSSHBoxType.length;\r\n\r\n        PSSHBox.set(playreadySystemID, byteCursor);\r\n        byteCursor += playreadySystemID.length;\r\n\r\n        PSSHData.setUint32(byteCursor, PROSize);\r\n        byteCursor += 0x4;\r\n\r\n        PSSHBox.set(uint8arraydecodedPROHeader, byteCursor);\r\n        byteCursor += PROSize;\r\n\r\n        return PSSHBox.buffer;\r\n    }\r\n\r\n    /**\r\n     * It seems that some PlayReady implementations return their XML-based CDM\r\n     * messages using UTF16, while others return them as UTF8.  Use this function\r\n     * to modify the message format to expect when parsing CDM messages.\r\n     *\r\n     * @param {string} format the expected message format.  Either \"utf-8\" or \"utf-16\".\r\n     * @throws {Error} Specified message format is not one of \"utf8\" or \"utf16\"\r\n     */\r\n    function setPlayReadyMessageFormat(format) {\r\n        if (format !== 'utf-8' && format !== 'utf-16') {\r\n            throw new Error('Specified message format is not one of \"utf-8\" or \"utf-16\"');\r\n        }\r\n        messageFormat = format;\r\n    }\r\n\r\n    /**\r\n     * Initialize the Key system with protection data\r\n     * @param {Object} protectionData the protection data\r\n     */\r\n    function init(protectionData) {\r\n        if (protectionData) {\r\n            protData = protectionData;\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * Get Playready Custom data\r\n     */\r\n    function getCDMData() {\r\n        let customData,\r\n            cdmData,\r\n            cdmDataBytes,\r\n            i;\r\n\r\n        checkConfig();\r\n        if (protData && protData.cdmData) {\r\n            // Convert custom data into multibyte string\r\n            customData = [];\r\n            for (i = 0; i < protData.cdmData.length; ++i) {\r\n                customData.push(protData.cdmData.charCodeAt(i));\r\n                customData.push(0);\r\n            }\r\n            customData = String.fromCharCode.apply(null, customData);\r\n\r\n            // Encode in Base 64 the custom data string\r\n            customData = BASE64.encode(customData);\r\n\r\n            // Initialize CDM data with Base 64 encoded custom data\r\n            // (see https://msdn.microsoft.com/en-us/library/dn457361.aspx)\r\n            cdmData = PRCDMData.replace('%CUSTOMDATA%', customData);\r\n\r\n            // Convert CDM data into multibyte characters\r\n            cdmDataBytes = [];\r\n            for (i = 0; i < cdmData.length; ++i) {\r\n                cdmDataBytes.push(cdmData.charCodeAt(i));\r\n                cdmDataBytes.push(0);\r\n            }\r\n\r\n            return new Uint8Array(cdmDataBytes).buffer;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    function getSessionId(cp) {\r\n        // Get sessionId from protectionData or from manifest\r\n        if (protData && protData.sessionId) {\r\n            return protData.sessionId;\r\n        } else if (cp && cp.sessionId) {\r\n            return cp.sessionId;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    instance = {\r\n        uuid: uuid,\r\n        schemeIdURI: schemeIdURI,\r\n        systemString: systemString,\r\n        getInitData: getInitData,\r\n        getRequestHeadersFromMessage: getRequestHeadersFromMessage,\r\n        getLicenseRequestFromMessage: getLicenseRequestFromMessage,\r\n        getLicenseServerURLFromInitData: getLicenseServerURLFromInitData,\r\n        getCDMData: getCDMData,\r\n        getSessionId: getSessionId,\r\n        setPlayReadyMessageFormat: setPlayReadyMessageFormat,\r\n        init: init\r\n    };\r\n\r\n    return instance;\r\n}\r\n\r\nKeySystemPlayReady.__dashjs_factory_name = 'KeySystemPlayReady';\r\nexport default dashjs.FactoryMaker.getSingletonFactory(KeySystemPlayReady); /* jshint ignore:line */\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\nimport KeyPair from '../vo/KeyPair';\r\nimport ClearKeyKeySet from '../vo/ClearKeyKeySet';\r\nimport CommonEncryption from '../CommonEncryption';\r\nimport ProtectionConstants from '../../constants/ProtectionConstants';\r\n\r\nconst uuid = '1077efec-c0b2-4d02-ace3-3c1e52e2fb4b';\r\nconst systemString = ProtectionConstants.CLEARKEY_KEYSTEM_STRING;\r\nconst schemeIdURI = 'urn:uuid:' + uuid;\r\n\r\nfunction KeySystemW3CClearKey(config) {\r\n    let instance;\r\n    const BASE64 = config.BASE64;\r\n    const logger = config.debug.getLogger(instance);\r\n    /**\r\n     * Returns desired clearkeys (as specified in the CDM message) from protection data\r\n     *\r\n     * @param {ProtectionDataSet} protectionData the protection data\r\n     * @param {ArrayBuffer} message the ClearKey CDM message\r\n     * @returns {ClearKeyKeySet} the key set or null if none found\r\n     * @throws {Error} if a keyID specified in the CDM message was not found in the\r\n     * protection data\r\n     * @memberof KeySystemClearKey\r\n     */\r\n    function getClearKeysFromProtectionData(protectionData, message) {\r\n        let clearkeySet = null;\r\n        if (protectionData) {\r\n            // ClearKey is the only system that does not require a license server URL, so we\r\n            // handle it here when keys are specified in protection data\r\n            const jsonMsg = JSON.parse(String.fromCharCode.apply(null, new Uint8Array(message)));\r\n            const keyPairs = [];\r\n            for (let i = 0; i < jsonMsg.kids.length; i++) {\r\n                const clearkeyID = jsonMsg.kids[i];\r\n                const clearkey = (protectionData.clearkeys && protectionData.clearkeys.hasOwnProperty(clearkeyID)) ? protectionData.clearkeys[clearkeyID] : null;\r\n                if (!clearkey) {\r\n                    throw new Error('DRM: ClearKey keyID (' + clearkeyID + ') is not known!');\r\n                }\r\n                // KeyIDs from CDM are not base64 padded.  Keys may or may not be padded\r\n                keyPairs.push(new KeyPair(clearkeyID, clearkey));\r\n            }\r\n            clearkeySet = new ClearKeyKeySet(keyPairs);\r\n\r\n            logger.warn('ClearKey schemeIdURI is using W3C Common PSSH systemID (1077efec-c0b2-4d02-ace3-3c1e52e2fb4b) in Content Protection. See DASH-IF IOP v4.1 section 7.6.2.4');\r\n        }\r\n        return clearkeySet;\r\n    }\r\n\r\n    function getInitData(cp) {\r\n        return CommonEncryption.parseInitDataFromContentProtection(cp, BASE64);\r\n    }\r\n\r\n    function getRequestHeadersFromMessage(/*message*/) {\r\n        return null;\r\n    }\r\n\r\n    function getLicenseRequestFromMessage(message) {\r\n        return new Uint8Array(message);\r\n    }\r\n\r\n    function getLicenseServerURLFromInitData(/*initData*/) {\r\n        return null;\r\n    }\r\n\r\n    function getCDMData() {\r\n        return null;\r\n    }\r\n\r\n    function getSessionId(/*cp*/) {\r\n        return null;\r\n    }\r\n\r\n    instance = {\r\n        uuid: uuid,\r\n        schemeIdURI: schemeIdURI,\r\n        systemString: systemString,\r\n        getInitData: getInitData,\r\n        getRequestHeadersFromMessage: getRequestHeadersFromMessage,\r\n        getLicenseRequestFromMessage: getLicenseRequestFromMessage,\r\n        getLicenseServerURLFromInitData: getLicenseServerURLFromInitData,\r\n        getCDMData: getCDMData,\r\n        getSessionId: getSessionId,\r\n        getClearKeysFromProtectionData: getClearKeysFromProtectionData\r\n    };\r\n\r\n    return instance;\r\n}\r\n\r\nKeySystemW3CClearKey.__dashjs_factory_name = 'KeySystemW3CClearKey';\r\nexport default dashjs.FactoryMaker.getSingletonFactory(KeySystemW3CClearKey); /* jshint ignore:line */\r\n\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\n/**\r\n * Google Widevine DRM\r\n *\r\n * @class\r\n * @implements MediaPlayer.dependencies.protection.KeySystem\r\n */\r\n\r\nimport CommonEncryption from '../CommonEncryption';\r\nimport ProtectionConstants from '../../constants/ProtectionConstants';\r\n\r\nconst uuid = 'edef8ba9-79d6-4ace-a3c8-27dcd51d21ed';\r\nconst systemString = ProtectionConstants.WIDEVINE_KEYSTEM_STRING;\r\nconst schemeIdURI = 'urn:uuid:' + uuid;\r\n\r\nfunction KeySystemWidevine(config) {\r\n\r\n    function log(...args) { args.unshift('KeySystemWidevine'); console.log.apply(console, args); }\r\n\r\n    log('KeySystemWidevine: ' + JSON.stringify(config));\r\n\r\n    config = config || {};\r\n    let instance;\r\n    let protData = null;\r\n    const BASE64 = config.BASE64;\r\n\r\n    function init(protectionData) {\r\n        log('init ' + JSON.stringify(protectionData));\r\n        if (protectionData) {\r\n            protData = protectionData;\r\n        }\r\n    }\r\n\r\n    function getInitData(cp) {\r\n        log('getInitData ' + JSON.stringify(cp));\r\n        return CommonEncryption.parseInitDataFromContentProtection(cp, BASE64);\r\n    }\r\n\r\n    function getRequestHeadersFromMessage( message ) {\r\n        if (protData && protData.theplatform) {\r\n            log('getRequestHeadersFromMessage::message is::' + JSON.stringify(message));\r\n            const headers = {};\r\n            headers['Content-Type'] = 'application/json; charset=UTF-8';\r\n            return headers;\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    function getLicenseRequestFromMessage(message) {\r\n        log('getLicenseRequestFromMessage ' + JSON.stringify(message));\r\n        if (protData && protData.theplatform) {\r\n            const tp = protData.theplatform;\r\n            var widevineChallenge = _arrayBufferToBase64(message);\r\n            console.log('KeySystemWidevine.js::getLicenseRequestFromMessage::4');\r\n            var requestContents = {\r\n                'getWidevineLicense': {\r\n                    'releasePid': tp.releasePid,\r\n                    'widevineChallenge': widevineChallenge\r\n                }\r\n            };\r\n\r\n            log('getLicenseRequestFromMessage::requestContents is::' + JSON.stringify(requestContents));\r\n\r\n            return JSON.stringify(requestContents);\r\n\r\n        } else {\r\n            return new Uint8Array(message);\r\n        }\r\n    }\r\n\r\n    function getLicenseServerURLFromInitData( /*initData*/ ) {\r\n        return null;\r\n    }\r\n\r\n    function getCDMData() {\r\n        return null;\r\n    }\r\n\r\n    function getSessionId(cp) {\r\n        log('getSessionId ' + JSON.stringify(cp));\r\n        // Get sessionId from protectionData or from manifest\r\n        if (protData && protData.sessionId) {\r\n            return protData.sessionId;\r\n        } else if (cp && cp.sessionId) {\r\n            return cp.sessionId;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    function _arrayBufferToBase64( buffer ) {\r\n        var binary = '';\r\n        var bytes = new Uint8Array( buffer );\r\n        var len = bytes.byteLength;\r\n        for (var i = 0; i < len; i++) {\r\n            binary += String.fromCharCode( bytes[ i ] );\r\n        }\r\n        return window.btoa( binary );\r\n    }\r\n\r\n    instance = {\r\n        uuid: uuid,\r\n        schemeIdURI: schemeIdURI,\r\n        systemString: systemString,\r\n        init: init,\r\n        getInitData: getInitData,\r\n        getRequestHeadersFromMessage: getRequestHeadersFromMessage,\r\n        getLicenseRequestFromMessage: getLicenseRequestFromMessage,\r\n        getLicenseServerURLFromInitData: getLicenseServerURLFromInitData,\r\n        getCDMData: getCDMData,\r\n        getSessionId: getSessionId\r\n    };\r\n\r\n    return instance;\r\n}\r\n\r\nKeySystemWidevine.__dashjs_factory_name = 'KeySystemWidevine';\r\nexport default dashjs.FactoryMaker.getSingletonFactory(KeySystemWidevine); /* jshint ignore:line */\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\nimport ErrorsBase from '../../../core/errors/ErrorsBase';\r\n/**\r\n * @class\r\n */\r\nclass ProtectionErrors extends ErrorsBase {\r\n\tconstructor () {\r\n        super();\r\n\r\n        /**\r\n         *  Generid key Error code\r\n         */\r\n        this.MEDIA_KEYERR_CODE = 100;\r\n        /**\r\n         *  Error code returned by keyerror api for ProtectionModel_01b\r\n         */\r\n        this.MEDIA_KEYERR_UNKNOWN_CODE = 101;\r\n        /**\r\n         *  Error code returned by keyerror api for ProtectionModel_01b\r\n         */\r\n        this.MEDIA_KEYERR_CLIENT_CODE = 102;\r\n        /**\r\n         *  Error code returned by keyerror api for ProtectionModel_01b\r\n         */\r\n        this.MEDIA_KEYERR_SERVICE_CODE = 103;\r\n        /**\r\n         *  Error code returned by keyerror api for ProtectionModel_01b\r\n         */\r\n        this.MEDIA_KEYERR_OUTPUT_CODE = 104;\r\n        /**\r\n         *  Error code returned by keyerror api for ProtectionModel_01b\r\n         */\r\n        this.MEDIA_KEYERR_HARDWARECHANGE_CODE = 105;\r\n        /**\r\n         *  Error code returned by keyerror api for ProtectionModel_01b\r\n         */\r\n        this.MEDIA_KEYERR_DOMAIN_CODE = 106;\r\n\r\n        /**\r\n         *  Error code returned when an error occured in keymessage event for ProtectionModel_01b\r\n         */\r\n        this.MEDIA_KEY_MESSAGE_ERROR_CODE = 107;\r\n        /**\r\n         *  Error code returned when challenge is invalid in keymessage event (event triggered by CDM)\r\n         */\r\n        this.MEDIA_KEY_MESSAGE_NO_CHALLENGE_ERROR_CODE = 108;\r\n        /**\r\n         *  Error code returned when License server certificate has not been successfully updated\r\n         */\r\n        this.SERVER_CERTIFICATE_UPDATED_ERROR_CODE = 109;\r\n        /**\r\n         *  Error code returned when license validity has expired\r\n         */\r\n        this.KEY_STATUS_CHANGED_EXPIRED_ERROR_CODE = 110;\r\n        /**\r\n         *  Error code returned when no licenser url is defined\r\n         */\r\n        this.MEDIA_KEY_MESSAGE_NO_LICENSE_SERVER_URL_ERROR_CODE = 111;\r\n        /**\r\n         *  Error code returned when key system access is denied\r\n         */\r\n        this.KEY_SYSTEM_ACCESS_DENIED_ERROR_CODE = 112;\r\n        /**\r\n         *  Error code returned when key session has not been successfully created\r\n         */\r\n        this.KEY_SESSION_CREATED_ERROR_CODE = 113;\r\n        /**\r\n         *  Error code returned when license request failed after a keymessage event has been triggered\r\n         */\r\n        this.MEDIA_KEY_MESSAGE_LICENSER_ERROR_CODE = 114;\r\n\r\n        this.MEDIA_KEYERR_UNKNOWN_MESSAGE = 'An unspecified error occurred. This value is used for errors that don\\'t match any of the other codes.';\r\n        this.MEDIA_KEYERR_CLIENT_MESSAGE = 'The Key System could not be installed or updated.';\r\n        this.MEDIA_KEYERR_SERVICE_MESSAGE = 'The message passed into update indicated an error from the license service.';\r\n        this.MEDIA_KEYERR_OUTPUT_MESSAGE = 'There is no available output device with the required characteristics for the content protection system.';\r\n        this.MEDIA_KEYERR_HARDWARECHANGE_MESSAGE = 'A hardware configuration change caused a content protection error.';\r\n        this.MEDIA_KEYERR_DOMAIN_MESSAGE = 'An error occurred in a multi-device domain licensing configuration. The most common error is a failure to join the domain.';\r\n        this.MEDIA_KEY_MESSAGE_ERROR_MESSAGE = 'Multiple key sessions were creates with a user-agent that does not support sessionIDs!! Unpredictable behavior ahead!';\r\n        this.MEDIA_KEY_MESSAGE_NO_CHALLENGE_ERROR_MESSAGE = 'DRM: Empty key message from CDM';\r\n        this.SERVER_CERTIFICATE_UPDATED_ERROR_MESSAGE = 'Error updating server certificate -- ';\r\n        this.KEY_STATUS_CHANGED_EXPIRED_ERROR_MESSAGE = 'DRM: KeyStatusChange error! -- License has expired';\r\n        this.MEDIA_KEY_MESSAGE_NO_LICENSE_SERVER_URL_ERROR_MESSAGE = 'DRM: No license server URL specified!';\r\n        this.KEY_SYSTEM_ACCESS_DENIED_ERROR_MESSAGE = 'DRM: KeySystem Access Denied! -- ';\r\n        this.KEY_SESSION_CREATED_ERROR_MESSAGE = 'DRM: unable to create session! --';\r\n        this.MEDIA_KEY_MESSAGE_LICENSER_ERROR_MESSAGE = 'DRM: licenser error! --';\r\n    }\r\n}\r\n\r\nlet protectionErrors = new ProtectionErrors();\r\nexport default protectionErrors;","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\n/**\r\n * Initial implementation of EME\r\n *\r\n * Implemented by Google Chrome prior to v36\r\n *\r\n * @implements ProtectionModel\r\n * @class\r\n */\r\nimport ProtectionKeyController from '../controllers/ProtectionKeyController';\r\nimport NeedKey from '../vo/NeedKey';\r\nimport DashJSError from '../../vo/DashJSError';\r\nimport KeyMessage from '../vo/KeyMessage';\r\nimport KeySystemConfiguration from '../vo/KeySystemConfiguration';\r\nimport KeySystemAccess from '../vo/KeySystemAccess';\r\nimport ProtectionErrors from '../errors/ProtectionErrors';\r\n\r\nfunction ProtectionModel_01b(config) {\r\n\r\n    config = config || {};\r\n    const context = this.context;\r\n    const eventBus = config.eventBus;//Need to pass in here so we can use same instance since this is optional module\r\n    const events = config.events;\r\n    const debug = config.debug;\r\n    const api = config.api;\r\n    const errHandler = config.errHandler;\r\n\r\n    let instance,\r\n        logger,\r\n        videoElement,\r\n        keySystem,\r\n        protectionKeyController,\r\n\r\n        // With this version of the EME APIs, sessionIDs are not assigned to\r\n        // sessions until the first key message is received.  We are assuming\r\n        // that in the case of multiple sessions, key messages will be received\r\n        // in the order that generateKeyRequest() is called.\r\n        // Holding spot for newly-created sessions until we determine whether or\r\n        // not the CDM supports sessionIDs\r\n        pendingSessions,\r\n\r\n        // List of sessions that have been initialized.  Only the first position will\r\n        // be used in the case that the CDM does not support sessionIDs\r\n        sessions,\r\n\r\n        // Not all CDMs support the notion of sessionIDs.  Without sessionIDs\r\n        // there is no way for us to differentiate between sessions, therefore\r\n        // we must only allow a single session.  Once we receive the first key\r\n        // message we can set this flag to determine if more sessions are allowed\r\n        moreSessionsAllowed,\r\n\r\n        // This is our main event handler for all desired HTMLMediaElement events\r\n        // related to EME.  These events are translated into our API-independent\r\n        // versions of the same events\r\n        eventHandler;\r\n\r\n    function setup() {\r\n        logger = debug.getLogger(instance);\r\n        videoElement = null;\r\n        keySystem = null;\r\n        pendingSessions = [];\r\n        sessions = [];\r\n        protectionKeyController = ProtectionKeyController(context).getInstance();\r\n        eventHandler = createEventHandler();\r\n    }\r\n\r\n    function reset() {\r\n        if (videoElement) {\r\n            removeEventListeners();\r\n        }\r\n        for (let i = 0; i < sessions.length; i++) {\r\n            closeKeySession(sessions[i]);\r\n        }\r\n        eventBus.trigger(events.TEARDOWN_COMPLETE);\r\n    }\r\n\r\n    function getKeySystem() {\r\n        return keySystem;\r\n    }\r\n\r\n    function getAllInitData() {\r\n        const retVal = [];\r\n        for (let i = 0; i < pendingSessions.length; i++) {\r\n            retVal.push(pendingSessions[i].initData);\r\n        }\r\n        for (let i = 0; i < sessions.length; i++) {\r\n            retVal.push(sessions[i].initData);\r\n        }\r\n        return retVal;\r\n    }\r\n\r\n    function requestKeySystemAccess(ksConfigurations) {\r\n        let ve = videoElement;\r\n        if (!ve) { // Must have a video element to do this capability tests\r\n            ve = document.createElement('video');\r\n        }\r\n\r\n        // Try key systems in order, first one with supported key system configuration\r\n        // is used\r\n        let found = false;\r\n        for (let ksIdx = 0; ksIdx < ksConfigurations.length; ksIdx++) {\r\n            const systemString = ksConfigurations[ksIdx].ks.systemString;\r\n            const configs = ksConfigurations[ksIdx].configs;\r\n            let supportedAudio = null;\r\n            let supportedVideo = null;\r\n\r\n            // Try key system configs in order, first one with supported audio/video\r\n            // is used\r\n            for (let configIdx = 0; configIdx < configs.length; configIdx++) {\r\n                //let audios = configs[configIdx].audioCapabilities;\r\n                const videos = configs[configIdx].videoCapabilities;\r\n                // Look for supported video container/codecs\r\n                if (videos && videos.length !== 0) {\r\n                    supportedVideo = []; // Indicates that we have a requested video config\r\n                    for (let videoIdx = 0; videoIdx < videos.length; videoIdx++) {\r\n                        if (ve.canPlayType(videos[videoIdx].contentType, systemString) !== '') {\r\n                            supportedVideo.push(videos[videoIdx]);\r\n                        }\r\n                    }\r\n                }\r\n\r\n                // No supported audio or video in this configuration OR we have\r\n                // requested audio or video configuration that is not supported\r\n                if ((!supportedAudio && !supportedVideo) ||\r\n                    (supportedAudio && supportedAudio.length === 0) ||\r\n                    (supportedVideo && supportedVideo.length === 0)) {\r\n                    continue;\r\n                }\r\n\r\n                // This configuration is supported\r\n                found = true;\r\n                const ksConfig = new KeySystemConfiguration(supportedAudio, supportedVideo);\r\n                const ks = protectionKeyController.getKeySystemBySystemString(systemString);\r\n                eventBus.trigger(events.KEY_SYSTEM_ACCESS_COMPLETE, { data: new KeySystemAccess(ks, ksConfig) });\r\n                break;\r\n            }\r\n        }\r\n        if (!found) {\r\n            eventBus.trigger(events.KEY_SYSTEM_ACCESS_COMPLETE, {error: 'Key system access denied! -- No valid audio/video content configurations detected!'});\r\n        }\r\n    }\r\n\r\n    function selectKeySystem(keySystemAccess) {\r\n        keySystem = keySystemAccess.keySystem;\r\n        eventBus.trigger(events.INTERNAL_KEY_SYSTEM_SELECTED);\r\n    }\r\n\r\n    function setMediaElement(mediaElement) {\r\n        if (videoElement === mediaElement) {\r\n            return;\r\n        }\r\n\r\n        // Replacing the previous element\r\n        if (videoElement) {\r\n            removeEventListeners();\r\n\r\n            // Close any open sessions - avoids memory leak on LG webOS 2016/2017 TVs\r\n            for (var i = 0; i < sessions.length; i++) {\r\n                closeKeySession(sessions[i]);\r\n            }\r\n            sessions = [];\r\n        }\r\n\r\n        videoElement = mediaElement;\r\n\r\n        // Only if we are not detaching from the existing element\r\n        if (videoElement) {\r\n            videoElement.addEventListener(api.keyerror, eventHandler);\r\n            videoElement.addEventListener(api.needkey, eventHandler);\r\n            videoElement.addEventListener(api.keymessage, eventHandler);\r\n            videoElement.addEventListener(api.keyadded, eventHandler);\r\n            eventBus.trigger(events.VIDEO_ELEMENT_SELECTED);\r\n        }\r\n    }\r\n\r\n    function createKeySession(initData /*, protData, keySystemType */) {\r\n        if (!keySystem) {\r\n            throw new Error('Can not create sessions until you have selected a key system');\r\n        }\r\n\r\n        // Determine if creating a new session is allowed\r\n        if (moreSessionsAllowed || sessions.length === 0) {\r\n            const newSession = { // Implements SessionToken\r\n                sessionID: null,\r\n                initData: initData,\r\n                getSessionID: function () {\r\n                    return this.sessionID;\r\n                },\r\n\r\n                getExpirationTime: function () {\r\n                    return NaN;\r\n                },\r\n\r\n                getSessionType: function () {\r\n                    return 'temporary';\r\n                }\r\n            };\r\n            pendingSessions.push(newSession);\r\n\r\n            // Send our request to the CDM\r\n            videoElement[api.generateKeyRequest](keySystem.systemString, new Uint8Array(initData));\r\n\r\n            return newSession;\r\n\r\n        } else {\r\n            throw new Error('Multiple sessions not allowed!');\r\n        }\r\n\r\n    }\r\n\r\n    function updateKeySession(sessionToken, message) {\r\n        const sessionID = sessionToken.sessionID;\r\n        if (!protectionKeyController.isClearKey(keySystem)) {\r\n            // Send our request to the CDM\r\n            videoElement[api.addKey](keySystem.systemString,\r\n                new Uint8Array(message), new Uint8Array(sessionToken.initData), sessionID);\r\n        } else {\r\n            // For clearkey, message is a ClearKeyKeySet\r\n            for (let i = 0; i < message.keyPairs.length; i++) {\r\n                videoElement[api.addKey](keySystem.systemString,\r\n                    message.keyPairs[i].key, message.keyPairs[i].keyID, sessionID);\r\n            }\r\n        }\r\n    }\r\n\r\n    function closeKeySession(sessionToken) {\r\n        // Send our request to the CDM\r\n        try {\r\n            videoElement[api.cancelKeyRequest](keySystem.systemString, sessionToken.sessionID);\r\n        } catch (error) {\r\n            eventBus.trigger(events.KEY_SESSION_CLOSED, {data: null, error: 'Error closing session (' + sessionToken.sessionID + ') ' + error.message});\r\n        }\r\n    }\r\n\r\n    function setServerCertificate(/*serverCertificate*/) { /* Not supported */ }\r\n    function loadKeySession(/*sessionID*/) { /* Not supported */ }\r\n    function removeKeySession(/*sessionToken*/) { /* Not supported */ }\r\n\r\n    function createEventHandler() {\r\n        return {\r\n            handleEvent: function (event) {\r\n                let sessionToken = null;\r\n                switch (event.type) {\r\n                    case api.needkey:\r\n                        let initData = ArrayBuffer.isView(event.initData) ? event.initData.buffer : event.initData;\r\n                        eventBus.trigger(events.NEED_KEY, {key: new NeedKey(initData, 'cenc')});\r\n                        break;\r\n\r\n                    case api.keyerror:\r\n                        sessionToken = findSessionByID(sessions, event.sessionId);\r\n                        if (!sessionToken) {\r\n                            sessionToken = findSessionByID(pendingSessions, event.sessionId);\r\n                        }\r\n\r\n                        if (sessionToken) {\r\n                            let code = ProtectionErrors.MEDIA_KEYERR_CODE;\r\n                            let msg = '';\r\n                            switch (event.errorCode.code) {\r\n                                case 1:\r\n                                    code = ProtectionErrors.MEDIA_KEYERR_UNKNOWN_CODE;\r\n                                    msg += 'MEDIA_KEYERR_UNKNOWN - ' + ProtectionErrors.MEDIA_KEYERR_UNKNOWN_MESSAGE;\r\n                                    break;\r\n                                case 2:\r\n                                    code = ProtectionErrors.MEDIA_KEYERR_CLIENT_CODE;\r\n                                    msg += 'MEDIA_KEYERR_CLIENT - ' + ProtectionErrors.MEDIA_KEYERR_CLIENT_MESSAGE;\r\n                                    break;\r\n                                case 3:\r\n                                    code = ProtectionErrors.MEDIA_KEYERR_SERVICE_CODE;\r\n                                    msg += 'MEDIA_KEYERR_SERVICE - ' + ProtectionErrors.MEDIA_KEYERR_SERVICE_MESSAGE;\r\n                                    break;\r\n                                case 4:\r\n                                    code = ProtectionErrors.MEDIA_KEYERR_OUTPUT_CODE;\r\n                                    msg += 'MEDIA_KEYERR_OUTPUT - ' + ProtectionErrors.MEDIA_KEYERR_OUTPUT_MESSAGE;\r\n                                    break;\r\n                                case 5:\r\n                                    code = ProtectionErrors.MEDIA_KEYERR_HARDWARECHANGE_CODE;\r\n                                    msg += 'MEDIA_KEYERR_HARDWARECHANGE - ' + ProtectionErrors.MEDIA_KEYERR_HARDWARECHANGE_MESSAGE;\r\n                                    break;\r\n                                case 6:\r\n                                    code = ProtectionErrors.MEDIA_KEYERR_DOMAIN_CODE;\r\n                                    msg += 'MEDIA_KEYERR_DOMAIN - ' + ProtectionErrors.MEDIA_KEYERR_DOMAIN_MESSAGE;\r\n                                    break;\r\n                            }\r\n                            msg += '  System Code = ' + event.systemCode;\r\n                            // TODO: Build error string based on key error\r\n                            eventBus.trigger(events.KEY_ERROR, {data: new DashJSError(code, msg, sessionToken)});\r\n                        } else {\r\n                            logger.error('No session token found for key error');\r\n                        }\r\n                        break;\r\n\r\n                    case api.keyadded:\r\n                        sessionToken = findSessionByID(sessions, event.sessionId);\r\n                        if (!sessionToken) {\r\n                            sessionToken = findSessionByID(pendingSessions, event.sessionId);\r\n                        }\r\n\r\n                        if (sessionToken) {\r\n                            logger.debug('DRM: Key added.');\r\n                            eventBus.trigger(events.KEY_ADDED, {data: sessionToken});//TODO not sure anything is using sessionToken? why there?\r\n                        } else {\r\n                            logger.debug('No session token found for key added');\r\n                        }\r\n                        break;\r\n\r\n                    case api.keymessage:\r\n                        // If this CDM does not support session IDs, we will be limited\r\n                        // to a single session\r\n                        moreSessionsAllowed = (event.sessionId !== null) && (event.sessionId !== undefined);\r\n\r\n                        // SessionIDs supported\r\n                        if (moreSessionsAllowed) {\r\n                            // Attempt to find an uninitialized token with this sessionID\r\n                            sessionToken = findSessionByID(sessions, event.sessionId);\r\n                            if (!sessionToken && pendingSessions.length > 0) {\r\n\r\n                                // This is the first message for our latest session, so set the\r\n                                // sessionID and add it to our list\r\n                                sessionToken = pendingSessions.shift();\r\n                                sessions.push(sessionToken);\r\n                                sessionToken.sessionID = event.sessionId;\r\n\r\n                                eventBus.trigger(events.KEY_SESSION_CREATED, {data: sessionToken});\r\n                            }\r\n                        } else if (pendingSessions.length > 0) { // SessionIDs not supported\r\n                            sessionToken = pendingSessions.shift();\r\n                            sessions.push(sessionToken);\r\n\r\n                            if (pendingSessions.length !== 0) {\r\n                                errHandler.error(new DashJSError(ProtectionErrors.MEDIA_KEY_MESSAGE_ERROR_CODE, ProtectionErrors.MEDIA_KEY_MESSAGE_ERROR_MESSAGE));\r\n                            }\r\n                        }\r\n\r\n                        if (sessionToken) {\r\n                            let message = ArrayBuffer.isView(event.message) ? event.message.buffer : event.message;\r\n\r\n                            // For ClearKey, the spec mandates that you pass this message to the\r\n                            // addKey method, so we always save it to the token since there is no\r\n                            // way to tell which key system is in use\r\n                            sessionToken.keyMessage = message;\r\n                            eventBus.trigger(events.INTERNAL_KEY_MESSAGE, {data: new KeyMessage(sessionToken, message, event.defaultURL)});\r\n\r\n                        } else {\r\n                            logger.warn('No session token found for key message');\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        };\r\n    }\r\n\r\n\r\n    /**\r\n     * Helper function to retrieve the stored session token based on a given\r\n     * sessionID value\r\n     *\r\n     * @param {Array} sessionArray - the array of sessions to search\r\n     * @param {*} sessionID - the sessionID to search for\r\n     * @returns {*} the session token with the given sessionID\r\n     */\r\n    function findSessionByID(sessionArray, sessionID) {\r\n        if (!sessionID || !sessionArray) {\r\n            return null;\r\n        } else {\r\n            const len = sessionArray.length;\r\n            for (let i = 0; i < len; i++) {\r\n                if (sessionArray[i].sessionID == sessionID) {\r\n                    return sessionArray[i];\r\n                }\r\n            }\r\n            return null;\r\n        }\r\n    }\r\n\r\n    function removeEventListeners() {\r\n        videoElement.removeEventListener(api.keyerror, eventHandler);\r\n        videoElement.removeEventListener(api.needkey, eventHandler);\r\n        videoElement.removeEventListener(api.keymessage, eventHandler);\r\n        videoElement.removeEventListener(api.keyadded, eventHandler);\r\n    }\r\n\r\n    instance = {\r\n        getAllInitData: getAllInitData,\r\n        requestKeySystemAccess: requestKeySystemAccess,\r\n        getKeySystem: getKeySystem,\r\n        selectKeySystem: selectKeySystem,\r\n        setMediaElement: setMediaElement,\r\n        createKeySession: createKeySession,\r\n        updateKeySession: updateKeySession,\r\n        closeKeySession: closeKeySession,\r\n        setServerCertificate: setServerCertificate,\r\n        loadKeySession: loadKeySession,\r\n        removeKeySession: removeKeySession,\r\n        stop: reset,\r\n        reset: reset\r\n    };\r\n\r\n    setup();\r\n\r\n    return instance;\r\n}\r\n\r\nProtectionModel_01b.__dashjs_factory_name = 'ProtectionModel_01b';\r\nexport default dashjs.FactoryMaker.getClassFactory(ProtectionModel_01b); /* jshint ignore:line */\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\n/**\r\n * Most recent EME implementation\r\n *\r\n * Implemented by Google Chrome v36+ (Windows, OSX, Linux)\r\n *\r\n * @implements ProtectionModel\r\n * @class\r\n */\r\nimport ProtectionKeyController from '../controllers/ProtectionKeyController';\r\nimport NeedKey from '../vo/NeedKey';\r\nimport ProtectionErrors from '../errors/ProtectionErrors';\r\nimport DashJSError from '../../vo/DashJSError';\r\nimport KeyMessage from '../vo/KeyMessage';\r\nimport KeySystemAccess from '../vo/KeySystemAccess';\r\nimport ProtectionConstants from '../../constants/ProtectionConstants';\r\n\r\nfunction ProtectionModel_21Jan2015(config) {\r\n\r\n    config = config || {};\r\n    const context = this.context;\r\n    const eventBus = config.eventBus;//Need to pass in here so we can use same instance since this is optional module\r\n    const events = config.events;\r\n    const debug = config.debug;\r\n\r\n    let instance,\r\n        logger,\r\n        keySystem,\r\n        videoElement,\r\n        mediaKeys,\r\n        sessions,\r\n        eventHandler,\r\n        protectionKeyController;\r\n\r\n    function setup() {\r\n        logger = debug.getLogger(instance);\r\n        keySystem = null;\r\n        videoElement = null;\r\n        mediaKeys = null;\r\n        sessions = [];\r\n        protectionKeyController = ProtectionKeyController(context).getInstance();\r\n        eventHandler = createEventHandler();\r\n    }\r\n\r\n    function reset() {\r\n        const numSessions = sessions.length;\r\n        let session;\r\n\r\n        if (numSessions !== 0) {\r\n            // Called when we are done closing a session.  Success or fail\r\n            const done = function (session) {\r\n                removeSession(session);\r\n                if (sessions.length === 0) {\r\n                    if (videoElement) {\r\n                        videoElement.removeEventListener('encrypted', eventHandler);\r\n                        videoElement.setMediaKeys(null).then(function () {\r\n                            eventBus.trigger(events.TEARDOWN_COMPLETE);\r\n                        });\r\n                    } else {\r\n                        eventBus.trigger(events.TEARDOWN_COMPLETE);\r\n                    }\r\n                }\r\n            };\r\n            for (let i = 0; i < numSessions; i++) {\r\n                session = sessions[i];\r\n                (function (s) {\r\n                    // Override closed promise resolver\r\n                    session.session.closed.then(function () {\r\n                        done(s);\r\n                    });\r\n                    // Close the session and handle errors, otherwise promise\r\n                    // resolver above will be called\r\n                    closeKeySessionInternal(session).catch(function () {\r\n                        done(s);\r\n                    });\r\n\r\n                })(session);\r\n            }\r\n        } else {\r\n            eventBus.trigger(events.TEARDOWN_COMPLETE);\r\n        }\r\n    }\r\n\r\n    function stop() {\r\n        // Close and remove not usable sessions\r\n        let session;\r\n        for (let i = 0; i < sessions.length; i++) {\r\n            session = sessions[i];\r\n            if (!session.getUsable()) {\r\n                closeKeySessionInternal(session).catch(function () {\r\n                    removeSession(session);\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    function getKeySystem() {\r\n        return keySystem;\r\n    }\r\n\r\n    function getAllInitData() {\r\n        const retVal = [];\r\n        for (let i = 0; i < sessions.length; i++) {\r\n            if (sessions[i].initData) {\r\n                retVal.push(sessions[i].initData);\r\n            }\r\n        }\r\n        return retVal;\r\n    }\r\n\r\n    function requestKeySystemAccess(ksConfigurations) {\r\n        requestKeySystemAccessInternal(ksConfigurations, 0);\r\n    }\r\n\r\n    function selectKeySystem(keySystemAccess) {\r\n        keySystemAccess.mksa.createMediaKeys().then(function (mkeys) {\r\n            keySystem = keySystemAccess.keySystem;\r\n            mediaKeys = mkeys;\r\n            if (videoElement) {\r\n                videoElement.setMediaKeys(mediaKeys).then(function () {\r\n                    eventBus.trigger(events.INTERNAL_KEY_SYSTEM_SELECTED);\r\n                });\r\n            } else {\r\n                eventBus.trigger(events.INTERNAL_KEY_SYSTEM_SELECTED);\r\n            }\r\n\r\n        }).catch(function () {\r\n            eventBus.trigger(events.INTERNAL_KEY_SYSTEM_SELECTED, {error: 'Error selecting keys system (' + keySystemAccess.keySystem.systemString + ')! Could not create MediaKeys -- TODO'});\r\n        });\r\n    }\r\n\r\n    function setMediaElement(mediaElement) {\r\n        if (videoElement === mediaElement)\r\n            return;\r\n\r\n        // Replacing the previous element\r\n        if (videoElement) {\r\n            videoElement.removeEventListener('encrypted', eventHandler);\r\n            if (videoElement.setMediaKeys) {\r\n                videoElement.setMediaKeys(null);\r\n            }\r\n        }\r\n\r\n        videoElement = mediaElement;\r\n\r\n        // Only if we are not detaching from the existing element\r\n        if (videoElement) {\r\n            videoElement.addEventListener('encrypted', eventHandler);\r\n            if (videoElement.setMediaKeys && mediaKeys) {\r\n                videoElement.setMediaKeys(mediaKeys);\r\n            }\r\n        }\r\n    }\r\n\r\n    function setServerCertificate(serverCertificate) {\r\n        if (!keySystem || !mediaKeys) {\r\n            throw new Error('Can not set server certificate until you have selected a key system');\r\n        }\r\n        mediaKeys.setServerCertificate(serverCertificate).then(function () {\r\n            logger.info('DRM: License server certificate successfully updated.');\r\n            eventBus.trigger(events.SERVER_CERTIFICATE_UPDATED);\r\n        }).catch(function (error) {\r\n            eventBus.trigger(events.SERVER_CERTIFICATE_UPDATED, {error: new DashJSError(ProtectionErrors.SERVER_CERTIFICATE_UPDATED_ERROR_CODE, ProtectionErrors.SERVER_CERTIFICATE_UPDATED_ERROR_MESSAGE + error.name)});\r\n        });\r\n    }\r\n\r\n    function createKeySession(initData, protData, sessionType) {\r\n        if (!keySystem || !mediaKeys) {\r\n            throw new Error('Can not create sessions until you have selected a key system');\r\n        }\r\n\r\n        const session = mediaKeys.createSession(sessionType);\r\n        const sessionToken = createSessionToken(session, initData, sessionType);\r\n        const ks = this.getKeySystem();\r\n\r\n        // Generate initial key request.\r\n        // keyids type is used for clearkey when keys are provided directly in the protection data and then request to a license server is not needed\r\n        const dataType = ks.systemString === ProtectionConstants.CLEARKEY_KEYSTEM_STRING && (initData ||  (protData && protData.clearkeys)) ? 'keyids' : 'cenc';\r\n        session.generateRequest(dataType, initData).then(function () {\r\n            logger.debug('DRM: Session created.  SessionID = ' + sessionToken.getSessionID());\r\n            eventBus.trigger(events.KEY_SESSION_CREATED, {data: sessionToken});\r\n        }).catch(function (error) {\r\n            // TODO: Better error string\r\n            removeSession(sessionToken);\r\n            eventBus.trigger(events.KEY_SESSION_CREATED, {\r\n                data: null,\r\n                error: new DashJSError(ProtectionErrors.KEY_SESSION_CREATED_ERROR_CODE, ProtectionErrors.KEY_SESSION_CREATED_ERROR_MESSAGE + 'Error generating key request -- ' + error.name)\r\n            });\r\n        });\r\n    }\r\n\r\n    function updateKeySession(sessionToken, message) {\r\n        const session = sessionToken.session;\r\n\r\n        // Send our request to the key session\r\n        if (protectionKeyController.isClearKey(keySystem)) {\r\n            message = message.toJWK();\r\n        }\r\n        session.update(message).catch(function (error) {\r\n            eventBus.trigger(events.KEY_ERROR, {data: new DashJSError(ProtectionErrors.MEDIA_KEYERR_CODE, 'Error sending update() message! ' + error.name, sessionToken)});\r\n        });\r\n    }\r\n\r\n    function loadKeySession(sessionID, initData, sessionType) {\r\n        if (!keySystem || !mediaKeys) {\r\n            throw new Error('Can not load sessions until you have selected a key system');\r\n        }\r\n\r\n        // Check if session Id is not already loaded or loading\r\n        for (let i = 0; i < sessions.length; i++) {\r\n            if (sessionID === sessions[i].sessionId) {\r\n                logger.warn('DRM: Ignoring session ID because we have already seen it!');\r\n                return;\r\n            }\r\n        }\r\n\r\n        const session = mediaKeys.createSession(sessionType);\r\n        const sessionToken = createSessionToken(session, initData, sessionType, sessionID);\r\n\r\n        // Load persisted session data into our newly created session object\r\n        session.load(sessionID).then(function (success) {\r\n            if (success) {\r\n                logger.debug('DRM: Session loaded.  SessionID = ' + sessionToken.getSessionID());\r\n                eventBus.trigger(events.KEY_SESSION_CREATED, {data: sessionToken});\r\n            } else {\r\n                removeSession(sessionToken);\r\n                eventBus.trigger(events.KEY_SESSION_CREATED, {\r\n                    data: null,\r\n                    error: new DashJSError(ProtectionErrors.KEY_SESSION_CREATED_ERROR_CODE, ProtectionErrors.KEY_SESSION_CREATED_ERROR_MESSAGE + 'Could not load session! Invalid Session ID (' + sessionID + ')')\r\n                });\r\n            }\r\n        }).catch(function (error) {\r\n            removeSession(sessionToken);\r\n            eventBus.trigger(events.KEY_SESSION_CREATED, {\r\n                data: null,\r\n                error: new DashJSError(ProtectionErrors.KEY_SESSION_CREATED_ERROR_CODE, ProtectionErrors.KEY_SESSION_CREATED_ERROR_MESSAGE + 'Could not load session (' + sessionID + ')! ' + error.name)\r\n            });\r\n        });\r\n    }\r\n\r\n    function removeKeySession(sessionToken) {\r\n        const session = sessionToken.session;\r\n\r\n        session.remove().then(function () {\r\n            logger.debug('DRM: Session removed.  SessionID = ' + sessionToken.getSessionID());\r\n            eventBus.trigger(events.KEY_SESSION_REMOVED, {data: sessionToken.getSessionID()});\r\n        }, function (error) {\r\n            eventBus.trigger(events.KEY_SESSION_REMOVED, {\r\n                data: null,\r\n                error: 'Error removing session (' + sessionToken.getSessionID() + '). ' + error.name\r\n            });\r\n\r\n        });\r\n    }\r\n\r\n    function closeKeySession(sessionToken) {\r\n        // Send our request to the key session\r\n        closeKeySessionInternal(sessionToken).catch(function (error) {\r\n            removeSession(sessionToken);\r\n            eventBus.trigger(events.KEY_SESSION_CLOSED, {\r\n                data: null,\r\n                error: 'Error closing session (' + sessionToken.getSessionID() + ') ' + error.name\r\n            });\r\n        });\r\n    }\r\n\r\n    function requestKeySystemAccessInternal(ksConfigurations, idx) {\r\n\r\n        if (navigator.requestMediaKeySystemAccess === undefined ||\r\n            typeof navigator.requestMediaKeySystemAccess !== 'function') {\r\n            eventBus.trigger(events.KEY_SYSTEM_ACCESS_COMPLETE, {error: 'Insecure origins are not allowed'});\r\n            return;\r\n        }\r\n\r\n        (function (i) {\r\n            const keySystem = ksConfigurations[i].ks;\r\n            const configs = ksConfigurations[i].configs;\r\n            let systemString = keySystem.systemString;\r\n\r\n            // PATCH to support persistent licenses on Edge browser (see issue #2658)\r\n            if (systemString === ProtectionConstants.PLAYREADY_KEYSTEM_STRING && configs[0].persistentState === 'required') {\r\n                systemString += '.recommendation';\r\n            }\r\n\r\n            navigator.requestMediaKeySystemAccess(systemString, configs).then(function (mediaKeySystemAccess) {\r\n                // Chrome 40 does not currently implement MediaKeySystemAccess.getConfiguration()\r\n                const configuration = (typeof mediaKeySystemAccess.getConfiguration === 'function') ?\r\n                    mediaKeySystemAccess.getConfiguration() : null;\r\n                const keySystemAccess = new KeySystemAccess(keySystem, configuration);\r\n                keySystemAccess.mksa = mediaKeySystemAccess;\r\n                eventBus.trigger(events.KEY_SYSTEM_ACCESS_COMPLETE, {data: keySystemAccess});\r\n\r\n            }).catch(function (error) {\r\n                if (++i < ksConfigurations.length) {\r\n                    requestKeySystemAccessInternal(ksConfigurations, i);\r\n                } else {\r\n                    eventBus.trigger(events.KEY_SYSTEM_ACCESS_COMPLETE, {error: 'Key system access denied! ' + error.message});\r\n                }\r\n            });\r\n        })(idx);\r\n    }\r\n\r\n    function closeKeySessionInternal(sessionToken) {\r\n        const session = sessionToken.session;\r\n\r\n        // Remove event listeners\r\n        session.removeEventListener('keystatuseschange', sessionToken);\r\n        session.removeEventListener('message', sessionToken);\r\n\r\n        // Send our request to the key session\r\n        return session.close();\r\n    }\r\n\r\n    // This is our main event handler for all desired HTMLMediaElement events\r\n    // related to EME.  These events are translated into our API-independent\r\n    // versions of the same events\r\n    function createEventHandler() {\r\n        return {\r\n            handleEvent: function (event) {\r\n                switch (event.type) {\r\n                    case 'encrypted':\r\n                        if (event.initData) {\r\n                            let initData = ArrayBuffer.isView(event.initData) ? event.initData.buffer : event.initData;\r\n                            eventBus.trigger(events.NEED_KEY, {key: new NeedKey(initData, event.initDataType)});\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        };\r\n    }\r\n\r\n    function removeSession(token) {\r\n        // Remove from our session list\r\n        for (let i = 0; i < sessions.length; i++) {\r\n            if (sessions[i] === token) {\r\n                sessions.splice(i, 1);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    function parseKeyStatus(args) {\r\n        // Edge and Chrome implement different version of keystatues, param are not on same order\r\n        let status, keyId;\r\n        if (args && args.length > 0) {\r\n            if (args[0]) {\r\n                if (typeof args[0] === 'string') {\r\n                    status = args[0];\r\n                } else {\r\n                    keyId = args[0];\r\n                }\r\n            }\r\n\r\n            if (args[1]) {\r\n                if (typeof args[1] === 'string') {\r\n                    status = args[1];\r\n                } else {\r\n                    keyId = args[1];\r\n                }\r\n            }\r\n        }\r\n        return {\r\n            status: status,\r\n            keyId: keyId\r\n        };\r\n    }\r\n\r\n    // Function to create our session token objects which manage the EME\r\n    // MediaKeySession and session-specific event handler\r\n    function createSessionToken(session, initData, sessionType, sessionID) {\r\n        const token = { // Implements SessionToken\r\n            session: session,\r\n            initData: initData,\r\n            sessionId: sessionID,\r\n\r\n            // This is our main event handler for all desired MediaKeySession events\r\n            // These events are translated into our API-independent versions of the\r\n            // same events\r\n            handleEvent: function (event) {\r\n                switch (event.type) {\r\n                    case 'keystatuseschange':\r\n                        eventBus.trigger(events.KEY_STATUSES_CHANGED, {data: this});\r\n                        event.target.keyStatuses.forEach(function () {\r\n                            let keyStatus = parseKeyStatus(arguments);\r\n                            switch (keyStatus.status) {\r\n                                case 'expired':\r\n                                    eventBus.trigger(events.INTERNAL_KEY_STATUS_CHANGED, {error: new DashJSError(ProtectionErrors.KEY_STATUS_CHANGED_EXPIRED_ERROR_CODE, ProtectionErrors.KEY_STATUS_CHANGED_EXPIRED_ERROR_MESSAGE)});\r\n                                    break;\r\n                                default:\r\n                                    eventBus.trigger(events.INTERNAL_KEY_STATUS_CHANGED, keyStatus);\r\n                                    break;\r\n                            }\r\n                        });\r\n                        break;\r\n\r\n                    case 'message':\r\n                        let message = ArrayBuffer.isView(event.message) ? event.message.buffer : event.message;\r\n                        eventBus.trigger(events.INTERNAL_KEY_MESSAGE, {data: new KeyMessage(this, message, undefined, event.messageType)});\r\n                        break;\r\n                }\r\n            },\r\n\r\n            getSessionID: function () {\r\n                return session.sessionId;\r\n            },\r\n\r\n            getExpirationTime: function () {\r\n                return session.expiration;\r\n            },\r\n\r\n            getKeyStatuses: function () {\r\n                return session.keyStatuses;\r\n            },\r\n\r\n            getUsable: function () {\r\n                let usable = false;\r\n                session.keyStatuses.forEach(function () {\r\n                    let keyStatus = parseKeyStatus(arguments);\r\n                    if (keyStatus.status === 'usable') {\r\n                        usable = true;\r\n                    }\r\n                });\r\n                return usable;\r\n            },\r\n\r\n            getSessionType: function () {\r\n                return sessionType;\r\n            }\r\n        };\r\n\r\n        // Add all event listeners\r\n        session.addEventListener('keystatuseschange', token);\r\n        session.addEventListener('message', token);\r\n\r\n        // Register callback for session closed Promise\r\n        session.closed.then(function () {\r\n            removeSession(token);\r\n            logger.debug('DRM: Session closed.  SessionID = ' + token.getSessionID());\r\n            eventBus.trigger(events.KEY_SESSION_CLOSED, {data: token.getSessionID()});\r\n        });\r\n\r\n        // Add to our session list\r\n        sessions.push(token);\r\n\r\n        return token;\r\n    }\r\n\r\n    instance = {\r\n        getAllInitData: getAllInitData,\r\n        requestKeySystemAccess: requestKeySystemAccess,\r\n        getKeySystem: getKeySystem,\r\n        selectKeySystem: selectKeySystem,\r\n        setMediaElement: setMediaElement,\r\n        setServerCertificate: setServerCertificate,\r\n        createKeySession: createKeySession,\r\n        updateKeySession: updateKeySession,\r\n        loadKeySession: loadKeySession,\r\n        removeKeySession: removeKeySession,\r\n        closeKeySession: closeKeySession,\r\n        stop: stop,\r\n        reset: reset\r\n    };\r\n\r\n    setup();\r\n\r\n    return instance;\r\n}\r\n\r\nProtectionModel_21Jan2015.__dashjs_factory_name = 'ProtectionModel_21Jan2015';\r\nexport default dashjs.FactoryMaker.getClassFactory(ProtectionModel_21Jan2015); /* jshint ignore:line */\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\n/**\r\n * Implementation of the EME APIs as of the 3 Feb 2014 state of the specification.\r\n *\r\n * Implemented by Internet Explorer 11 (Windows 8.1)\r\n *\r\n * @implements ProtectionModel\r\n * @class\r\n */\r\n\r\nimport ProtectionKeyController from '../controllers/ProtectionKeyController';\r\nimport NeedKey from '../vo/NeedKey';\r\nimport DashJSError from '../../vo/DashJSError';\r\nimport ProtectionErrors from '../errors/ProtectionErrors';\r\nimport KeyMessage from '../vo/KeyMessage';\r\nimport KeySystemConfiguration from '../vo/KeySystemConfiguration';\r\nimport KeySystemAccess from '../vo/KeySystemAccess';\r\n\r\nfunction ProtectionModel_3Feb2014(config) {\r\n\r\n    config = config || {};\r\n    const context = this.context;\r\n    const eventBus = config.eventBus;//Need to pass in here so we can use same instance since this is optional module\r\n    const events = config.events;\r\n    const debug = config.debug;\r\n    const api = config.api;\r\n\r\n    let instance,\r\n        logger,\r\n        videoElement,\r\n        keySystem,\r\n        mediaKeys,\r\n        keySystemAccess,\r\n        sessions,\r\n        eventHandler,\r\n        protectionKeyController;\r\n\r\n    function setup() {\r\n        logger = debug.getLogger(instance);\r\n        videoElement = null;\r\n        keySystem = null;\r\n        mediaKeys = null;\r\n        keySystemAccess = null;\r\n        sessions = [];\r\n        protectionKeyController = ProtectionKeyController(context).getInstance();\r\n        eventHandler = createEventHandler();\r\n    }\r\n\r\n    function reset() {\r\n        try {\r\n            for (let i = 0; i < sessions.length; i++) {\r\n                closeKeySession(sessions[i]);\r\n            }\r\n            if (videoElement) {\r\n                videoElement.removeEventListener(api.needkey, eventHandler);\r\n            }\r\n            eventBus.trigger(events.TEARDOWN_COMPLETE);\r\n        } catch (error) {\r\n            eventBus.trigger(events.TEARDOWN_COMPLETE, { error: 'Error tearing down key sessions and MediaKeys! -- ' + error.message });\r\n        }\r\n    }\r\n\r\n    function getKeySystem() {\r\n        return keySystem;\r\n    }\r\n\r\n    function getAllInitData() {\r\n        const retVal = [];\r\n        for (let i = 0; i < sessions.length; i++) {\r\n            retVal.push(sessions[i].initData);\r\n        }\r\n        return retVal;\r\n    }\r\n\r\n    function requestKeySystemAccess(ksConfigurations) {\r\n\r\n        // Try key systems in order, first one with supported key system configuration\r\n        // is used\r\n        let found = false;\r\n        for (let ksIdx = 0; ksIdx < ksConfigurations.length; ksIdx++) {\r\n            const systemString = ksConfigurations[ksIdx].ks.systemString;\r\n            const configs = ksConfigurations[ksIdx].configs;\r\n            let supportedAudio = null;\r\n            let supportedVideo = null;\r\n\r\n            // Try key system configs in order, first one with supported audio/video\r\n            // is used\r\n            for (let configIdx = 0; configIdx < configs.length; configIdx++) {\r\n                const audios = configs[configIdx].audioCapabilities;\r\n                const videos = configs[configIdx].videoCapabilities;\r\n\r\n                // Look for supported audio container/codecs\r\n                if (audios && audios.length !== 0) {\r\n                    supportedAudio = []; // Indicates that we have a requested audio config\r\n                    for (let audioIdx = 0; audioIdx < audios.length; audioIdx++) {\r\n                        if (window[api.MediaKeys].isTypeSupported(systemString, audios[audioIdx].contentType)) {\r\n                            supportedAudio.push(audios[audioIdx]);\r\n                        }\r\n                    }\r\n                }\r\n\r\n                // Look for supported video container/codecs\r\n                if (videos && videos.length !== 0) {\r\n                    supportedVideo = []; // Indicates that we have a requested video config\r\n                    for (let videoIdx = 0; videoIdx < videos.length; videoIdx++) {\r\n                        if (window[api.MediaKeys].isTypeSupported(systemString, videos[videoIdx].contentType)) {\r\n                            supportedVideo.push(videos[videoIdx]);\r\n                        }\r\n                    }\r\n                }\r\n\r\n                // No supported audio or video in this configuration OR we have\r\n                // requested audio or video configuration that is not supported\r\n                if ((!supportedAudio && !supportedVideo) ||\r\n                    (supportedAudio && supportedAudio.length === 0) ||\r\n                    (supportedVideo && supportedVideo.length === 0)) {\r\n                    continue;\r\n                }\r\n\r\n                // This configuration is supported\r\n                found = true;\r\n                const ksConfig = new KeySystemConfiguration(supportedAudio, supportedVideo);\r\n                const ks = protectionKeyController.getKeySystemBySystemString(systemString);\r\n                eventBus.trigger(events.KEY_SYSTEM_ACCESS_COMPLETE, { data: new KeySystemAccess(ks, ksConfig) });\r\n                break;\r\n            }\r\n        }\r\n        if (!found) {\r\n            eventBus.trigger(events.KEY_SYSTEM_ACCESS_COMPLETE, { error: 'Key system access denied! -- No valid audio/video content configurations detected!' });\r\n        }\r\n    }\r\n\r\n    function selectKeySystem(ksAccess) {\r\n        try {\r\n            mediaKeys = ksAccess.mediaKeys = new window[api.MediaKeys](ksAccess.keySystem.systemString);\r\n            keySystem = ksAccess.keySystem;\r\n            keySystemAccess = ksAccess;\r\n            if (videoElement) {\r\n                setMediaKeys();\r\n            }\r\n            eventBus.trigger(events.INTERNAL_KEY_SYSTEM_SELECTED);\r\n        } catch (error) {\r\n            eventBus.trigger(events.INTERNAL_KEY_SYSTEM_SELECTED, { error: 'Error selecting keys system (' + keySystem.systemString + ')! Could not create MediaKeys -- TODO' });\r\n        }\r\n    }\r\n\r\n    function setMediaElement(mediaElement) {\r\n        if (videoElement === mediaElement)\r\n            return;\r\n\r\n        // Replacing the previous element\r\n        if (videoElement) {\r\n            videoElement.removeEventListener(api.needkey, eventHandler);\r\n        }\r\n\r\n        videoElement = mediaElement;\r\n\r\n        // Only if we are not detaching from the existing element\r\n        if (videoElement) {\r\n            videoElement.addEventListener(api.needkey, eventHandler);\r\n            if (mediaKeys) {\r\n                setMediaKeys();\r\n            }\r\n        }\r\n    }\r\n\r\n    function createKeySession(initData, protData, sessionType, cdmData) {\r\n        if (!keySystem || !mediaKeys || !keySystemAccess) {\r\n            throw new Error('Can not create sessions until you have selected a key system');\r\n        }\r\n\r\n        // Use the first video capability for the contentType.\r\n        // TODO:  Not sure if there is a way to concatenate all capability data into a RFC6386-compatible format\r\n\r\n        // If player is trying to playback Audio only stream - don't error out.\r\n        let capabilities = null;\r\n\r\n        if (keySystemAccess.ksConfiguration.videoCapabilities && keySystemAccess.ksConfiguration.videoCapabilities.length > 0) {\r\n            capabilities = keySystemAccess.ksConfiguration.videoCapabilities[0];\r\n        }\r\n\r\n        if (capabilities === null && keySystemAccess.ksConfiguration.audioCapabilities && keySystemAccess.ksConfiguration.audioCapabilities.length > 0) {\r\n            capabilities = keySystemAccess.ksConfiguration.audioCapabilities[0];\r\n        }\r\n\r\n        if (capabilities === null) {\r\n            throw new Error('Can not create sessions for unknown content types.');\r\n        }\r\n\r\n        const contentType = capabilities.contentType;\r\n        const session = mediaKeys.createSession(contentType, new Uint8Array(initData), cdmData ? new Uint8Array(cdmData) : null);\r\n        const sessionToken = createSessionToken(session, initData);\r\n\r\n        // Add all event listeners\r\n        session.addEventListener(api.error, sessionToken);\r\n        session.addEventListener(api.message, sessionToken);\r\n        session.addEventListener(api.ready, sessionToken);\r\n        session.addEventListener(api.close, sessionToken);\r\n\r\n        // Add to our session list\r\n        sessions.push(sessionToken);\r\n        logger.debug('DRM: Session created.  SessionID = ' + sessionToken.getSessionID());\r\n        eventBus.trigger(events.KEY_SESSION_CREATED, { data: sessionToken });\r\n    }\r\n\r\n    function updateKeySession(sessionToken, message) {\r\n        const session = sessionToken.session;\r\n\r\n        if (!protectionKeyController.isClearKey(keySystem)) {\r\n            // Send our request to the key session\r\n            session.update(new Uint8Array(message));\r\n        } else {\r\n            // For clearkey, message is a ClearKeyKeySet\r\n            session.update(new Uint8Array(message.toJWK()));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Close the given session and release all associated keys.  Following\r\n     * this call, the sessionToken becomes invalid\r\n     *\r\n     * @param {Object} sessionToken - the session token\r\n     */\r\n    function closeKeySession(sessionToken) {\r\n        const session = sessionToken.session;\r\n\r\n        // Remove event listeners\r\n        session.removeEventListener(api.error, sessionToken);\r\n        session.removeEventListener(api.message, sessionToken);\r\n        session.removeEventListener(api.ready, sessionToken);\r\n        session.removeEventListener(api.close, sessionToken);\r\n\r\n        // Remove from our session list\r\n        for (let i = 0; i < sessions.length; i++) {\r\n            if (sessions[i] === sessionToken) {\r\n                sessions.splice(i, 1);\r\n                break;\r\n            }\r\n        }\r\n\r\n        // Send our request to the key session\r\n        session[api.release]();\r\n    }\r\n\r\n    function setServerCertificate(/*serverCertificate*/) { /* Not supported */ }\r\n    function loadKeySession(/*sessionID*/) { /* Not supported */ }\r\n    function removeKeySession(/*sessionToken*/) { /* Not supported */ }\r\n\r\n\r\n    function createEventHandler() {\r\n        return {\r\n            handleEvent: function (event) {\r\n                switch (event.type) {\r\n\r\n                    case api.needkey:\r\n                        if (event.initData) {\r\n                            const initData = ArrayBuffer.isView(event.initData) ? event.initData.buffer : event.initData;\r\n                            eventBus.trigger(events.NEED_KEY, { key: new NeedKey(initData, 'cenc') });\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        };\r\n    }\r\n\r\n\r\n    // IE11 does not let you set MediaKeys until it has entered a certain\r\n    // readyState, so we need this logic to ensure we don't set the keys\r\n    // too early\r\n    function setMediaKeys() {\r\n        let boundDoSetKeys = null;\r\n        const doSetKeys = function () {\r\n            videoElement.removeEventListener('loadedmetadata', boundDoSetKeys);\r\n            videoElement[api.setMediaKeys](mediaKeys);\r\n            eventBus.trigger(events.VIDEO_ELEMENT_SELECTED);\r\n        };\r\n        if (videoElement.readyState >= 1) {\r\n            doSetKeys();\r\n        } else {\r\n            boundDoSetKeys = doSetKeys.bind(this);\r\n            videoElement.addEventListener('loadedmetadata', boundDoSetKeys);\r\n        }\r\n\r\n    }\r\n\r\n    // Function to create our session token objects which manage the EME\r\n    // MediaKeySession and session-specific event handler\r\n    function createSessionToken(keySession, initData) {\r\n        return {\r\n            // Implements SessionToken\r\n            session: keySession,\r\n            initData: initData,\r\n\r\n            getSessionID: function () {\r\n                return this.session.sessionId;\r\n            },\r\n\r\n            getExpirationTime: function () {\r\n                return NaN;\r\n            },\r\n\r\n            getSessionType: function () {\r\n                return 'temporary';\r\n            },\r\n            // This is our main event handler for all desired MediaKeySession events\r\n            // These events are translated into our API-independent versions of the\r\n            // same events\r\n            handleEvent: function (event) {\r\n                switch (event.type) {\r\n                    case api.error:\r\n                        let errorStr = 'KeyError'; // TODO: Make better string from event\r\n                        eventBus.trigger(events.KEY_ERROR, { data: new DashJSError(ProtectionErrors.MEDIA_KEYERR_CODE, errorStr, this) });\r\n                        break;\r\n                    case api.message:\r\n                        let message = ArrayBuffer.isView(event.message) ? event.message.buffer : event.message;\r\n                        eventBus.trigger(events.INTERNAL_KEY_MESSAGE, { data: new KeyMessage(this, message, event.destinationURL) });\r\n                        break;\r\n                    case api.ready:\r\n                        logger.debug('DRM: Key added.');\r\n                        eventBus.trigger(events.KEY_ADDED);\r\n                        break;\r\n\r\n                    case api.close:\r\n                        logger.debug('DRM: Session closed.  SessionID = ' + this.getSessionID());\r\n                        eventBus.trigger(events.KEY_SESSION_CLOSED, { data: this.getSessionID() });\r\n                        break;\r\n                }\r\n            }\r\n        };\r\n    }\r\n\r\n    instance = {\r\n        getAllInitData: getAllInitData,\r\n        requestKeySystemAccess: requestKeySystemAccess,\r\n        getKeySystem: getKeySystem,\r\n        selectKeySystem: selectKeySystem,\r\n        setMediaElement: setMediaElement,\r\n        createKeySession: createKeySession,\r\n        updateKeySession: updateKeySession,\r\n        closeKeySession: closeKeySession,\r\n        setServerCertificate: setServerCertificate,\r\n        loadKeySession: loadKeySession,\r\n        removeKeySession: removeKeySession,\r\n        stop: reset,\r\n        reset: reset\r\n    };\r\n\r\n    setup();\r\n\r\n    return instance;\r\n}\r\n\r\nProtectionModel_3Feb2014.__dashjs_factory_name = 'ProtectionModel_3Feb2014';\r\nexport default dashjs.FactoryMaker.getClassFactory(ProtectionModel_3Feb2014); /* jshint ignore:line */\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\n/**\r\n * CableLabs ClearKey license server implementation\r\n *\r\n * For testing purposes and evaluating potential uses for ClearKey, we have developed\r\n * a dirt-simple API for requesting ClearKey licenses from a remote server.\r\n *\r\n * @implements LicenseServer\r\n * @class\r\n */\r\nimport KeyPair from '../vo/KeyPair';\r\nimport ClearKeyKeySet from '../vo/ClearKeyKeySet';\r\n\r\nfunction ClearKey() {\r\n\r\n    let instance;\r\n\r\n    function getServerURLFromMessage(url /* message, messageType*/) {\r\n        return url;\r\n    }\r\n\r\n    function getHTTPMethod(/*messageType*/) {\r\n        return 'POST';\r\n    }\r\n\r\n    function getResponseType(/*keySystemStr*/) {\r\n        return 'json';\r\n    }\r\n\r\n    function getLicenseMessage(serverResponse/*, keySystemStr, messageType*/) {\r\n        if (!serverResponse.hasOwnProperty('keys')) {\r\n            return null;\r\n        }\r\n        let keyPairs = [];\r\n        for (let i = 0; i < serverResponse.keys.length; i++) {\r\n            let keypair = serverResponse.keys[i];\r\n            let keyid = keypair.kid.replace(/=/g, '');\r\n            let key = keypair.k.replace(/=/g, '');\r\n\r\n            keyPairs.push(new KeyPair(keyid, key));\r\n        }\r\n        return new ClearKeyKeySet(keyPairs);\r\n    }\r\n\r\n    function getErrorResponse(serverResponse/*, keySystemStr, messageType*/) {\r\n        return String.fromCharCode.apply(null, new Uint8Array(serverResponse));\r\n    }\r\n\r\n    instance = {\r\n        getServerURLFromMessage: getServerURLFromMessage,\r\n        getHTTPMethod: getHTTPMethod,\r\n        getResponseType: getResponseType,\r\n        getLicenseMessage: getLicenseMessage,\r\n        getErrorResponse: getErrorResponse\r\n    };\r\n\r\n    return instance;\r\n}\r\n\r\nClearKey.__dashjs_factory_name = 'ClearKey';\r\nexport default dashjs.FactoryMaker.getSingletonFactory(ClearKey); /* jshint ignore:line */\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\n/**\r\n * CastLabs DRMToday License Server implementation\r\n *\r\n * @implements LicenseServer\r\n * @class\r\n */\r\n\r\nimport ProtectionConstants from '../../constants/ProtectionConstants';\r\n\r\nfunction DRMToday(config) {\r\n\r\n    config = config || {};\r\n    const BASE64 = config.BASE64;\r\n\r\n    const keySystems = {};\r\n    keySystems[ProtectionConstants.WIDEVINE_KEYSTEM_STRING] = {\r\n        responseType: 'json',\r\n        getLicenseMessage: function (response) {\r\n            return BASE64.decodeArray(response.license);\r\n        },\r\n        getErrorResponse: function (response) {\r\n            return response;\r\n        }\r\n    };\r\n    keySystems[ProtectionConstants.PLAYREADY_KEYSTEM_STRING] = {\r\n        responseType: 'arraybuffer',\r\n        getLicenseMessage: function (response) {\r\n            return response;\r\n        },\r\n        getErrorResponse: function (response) {\r\n            return String.fromCharCode.apply(null, new Uint8Array(response));\r\n        }\r\n    };\r\n\r\n    let instance;\r\n\r\n    function checkConfig() {\r\n        if (!BASE64 || !BASE64.hasOwnProperty('decodeArray')) {\r\n            throw new Error('Missing config parameter(s)');\r\n        }\r\n    }\r\n\r\n    function getServerURLFromMessage(url /*, message, messageType*/) {\r\n        return url;\r\n    }\r\n\r\n    function getHTTPMethod(/*messageType*/) {\r\n        return 'POST';\r\n    }\r\n\r\n    function getResponseType(keySystemStr/*, messageType*/) {\r\n        return keySystems[keySystemStr].responseType;\r\n    }\r\n\r\n    function getLicenseMessage(serverResponse, keySystemStr/*, messageType*/) {\r\n        checkConfig();\r\n        return keySystems[keySystemStr].getLicenseMessage(serverResponse);\r\n    }\r\n\r\n    function getErrorResponse(serverResponse, keySystemStr/*, messageType*/) {\r\n        return keySystems[keySystemStr].getErrorResponse(serverResponse);\r\n    }\r\n\r\n    instance = {\r\n        getServerURLFromMessage: getServerURLFromMessage,\r\n        getHTTPMethod: getHTTPMethod,\r\n        getResponseType: getResponseType,\r\n        getLicenseMessage: getLicenseMessage,\r\n        getErrorResponse: getErrorResponse\r\n    };\r\n\r\n    return instance;\r\n}\r\n\r\nDRMToday.__dashjs_factory_name = 'DRMToday';\r\nexport default dashjs.FactoryMaker.getSingletonFactory(DRMToday); /* jshint ignore:line */","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\n/* global escape: true */\r\n\r\n/**\r\n * Microsoft PlayReady Test License Server\r\n *\r\n * For testing content that uses the PlayReady test server at\r\n *\r\n * @implements LicenseServer\r\n * @class\r\n * @ignore\r\n */\r\n\r\nfunction PlayReady() {\r\n\r\n    let instance;\r\n\r\n    const soap = 'http://schemas.xmlsoap.org/soap/envelope/';\r\n\r\n    function uintToString(arrayBuffer) {\r\n        const encodedString = String.fromCharCode.apply(null, new Uint8Array(arrayBuffer));\r\n        const decodedString = decodeURIComponent(escape(encodedString));\r\n        return decodedString;\r\n    }\r\n\r\n    function parseServerResponse(serverResponse) {\r\n        if (window.DOMParser) {\r\n            const stringResponse = uintToString(serverResponse);\r\n            const parser = new window.DOMParser();\r\n            const xmlDoc = parser.parseFromString(stringResponse, 'text/xml');\r\n            const envelope = xmlDoc ? xmlDoc.getElementsByTagNameNS(soap, 'Envelope')[0] : null;\r\n            const body = envelope ? envelope.getElementsByTagNameNS(soap, 'Body')[0] : null;\r\n            const fault = body ? body.getElementsByTagNameNS(soap, 'Fault')[0] : null;\r\n\r\n            if (fault) {\r\n                return null;\r\n            }\r\n        }\r\n        return serverResponse;\r\n    }\r\n\r\n    function parseErrorResponse(serverResponse) {\r\n        let faultstring = '';\r\n        let statusCode = '';\r\n        let message = '';\r\n        let idStart = -1;\r\n        let idEnd = -1;\r\n\r\n        if (window.DOMParser) {\r\n            const stringResponse = uintToString(serverResponse);\r\n            const parser = new window.DOMParser();\r\n            const xmlDoc = parser.parseFromString(stringResponse, 'text/xml');\r\n            const envelope = xmlDoc ? xmlDoc.getElementsByTagNameNS(soap, 'Envelope')[0] : null;\r\n            const body = envelope ? envelope.getElementsByTagNameNS(soap, 'Body')[0] : null;\r\n            const fault = body ? body.getElementsByTagNameNS(soap, 'Fault')[0] : null;\r\n            const detail = fault ? fault.getElementsByTagName('detail')[0] : null;\r\n            const exception = detail ? detail.getElementsByTagName('Exception')[0] : null;\r\n            let node = null;\r\n\r\n            if (fault === null) {\r\n                return stringResponse;\r\n            }\r\n\r\n            node = fault.getElementsByTagName('faultstring')[0].firstChild;\r\n            faultstring = node ? node.nodeValue : null;\r\n\r\n            if (exception !== null) {\r\n                node = exception.getElementsByTagName('StatusCode')[0];\r\n                statusCode = node ? node.firstChild.nodeValue : null;\r\n                node = exception.getElementsByTagName('Message')[0];\r\n                message = node ? node.firstChild.nodeValue : null;\r\n                idStart = message ? message.lastIndexOf('[') + 1 : -1;\r\n                idEnd = message ? message.indexOf(']') : -1;\r\n                message = message ? message.substring(idStart, idEnd) : '';\r\n            }\r\n        }\r\n\r\n        let errorString = `code: ${statusCode}, name: ${faultstring}`;\r\n        if (message) {\r\n            errorString += `, message: ${message}`;\r\n        }\r\n\r\n        return errorString;\r\n    }\r\n\r\n    function getServerURLFromMessage(url /*, message, messageType*/) {\r\n        return url;\r\n    }\r\n\r\n    function getHTTPMethod(/*messageType*/) {\r\n        return 'POST';\r\n    }\r\n\r\n    function getResponseType(/*keySystemStr, messageType*/) {\r\n        return 'arraybuffer';\r\n    }\r\n\r\n    function getLicenseMessage(serverResponse/*, keySystemStr, messageType*/) {\r\n        return parseServerResponse.call(this, serverResponse);\r\n    }\r\n\r\n    function getErrorResponse(serverResponse/*, keySystemStr, messageType*/) {\r\n        return parseErrorResponse.call(this, serverResponse);\r\n    }\r\n\r\n    instance = {\r\n        getServerURLFromMessage: getServerURLFromMessage,\r\n        getHTTPMethod: getHTTPMethod,\r\n        getResponseType: getResponseType,\r\n        getLicenseMessage: getLicenseMessage,\r\n        getErrorResponse: getErrorResponse\r\n    };\r\n\r\n    return instance;\r\n}\r\n\r\nPlayReady.__dashjs_factory_name = 'PlayReady';\r\nexport default dashjs.FactoryMaker.getSingletonFactory(PlayReady); /* jshint ignore:line */","\n/**\n * Modified CastLabs DRMToday License Server implementation\n *\n * @implements LicenseServer\n * @class\n */\n\n//import ProtectionConstants from '../../constants/ProtectionConstants';\n\nfunction ThePlatform(config) {\n\n    function log(...args) { args.unshift('ThePlatform'); console.log.apply(console, args); }\n\n    log('ThePlatform', config);\n\n    config = config || {};\n    const BASE64 = config.BASE64;\n    const tpData = config.tpData || {};\n\n    let instance;\n\n    function checkConfig() {\n        log('checkConfig');\n        if (!BASE64 || !BASE64.hasOwnProperty('decodeArray')) {\n            throw new Error('Missing config parameter(s)');\n        }\n    }\n\n    function getServerURLFromMessage(url /*, message, messageType*/) {\n        console.log('getServerURLFromMessage', url);\n        // return url + '/wv/web/ModularDrm/getWidevineLicense?form=json&schema=1.0'\n        //     + '&_releasePid=' + config.releasePid\n        url = 'https://widevine.entitlement.theplatform.eu';\n        return url + '/wv/web/ModularDrm?form=json&schema=1.0' +\n            '&account=' + encodeURIComponent(tpData.accountId) +\n            '&token=' + encodeURIComponent(tpData.token);\n        // return url;\n    }\n\n    function getHTTPMethod(/*messageType*/) {\n        return 'POST';\n    }\n\n    function getResponseType(keySystemStr/*, messageType*/) {\n        log('getResponseType', keySystemStr);\n        return 'json';\n    }\n\n    function getLicenseMessage(serverResponse, keySystemStr/*, messageType*/) {\n        log('getLicenseMessage', serverResponse, keySystemStr);\n        checkConfig();\n        var licenceValue = serverResponse.getWidevineLicenseResponse.license;\n        log('Widevine getLicenseMessage::licence value is::' + licenceValue);\n        var formattedResponse = _base64ToArrayBuffer(licenceValue);\n        return formattedResponse;\n    }\n\n    function getErrorResponse(serverResponse, keySystemStr/*, messageType*/) {\n        log('getErrorResponse', serverResponse, keySystemStr);\n        return serverResponse;\n    }\n\n    function _base64ToArrayBuffer(base64) {\n        var binary_string =  window.atob(base64);\n        var len = binary_string.length;\n        var bytes = new Uint8Array( len );\n        for (var i = 0; i < len; i++)        {\n            bytes[i] = binary_string.charCodeAt(i);\n        }\n        return bytes.buffer;\n    }\n\n    instance = {\n        getServerURLFromMessage: getServerURLFromMessage,\n        getHTTPMethod: getHTTPMethod,\n        getResponseType: getResponseType,\n        getLicenseMessage: getLicenseMessage,\n        getErrorResponse: getErrorResponse\n    };\n\n    return instance;\n}\n\nThePlatform.__dashjs_factory_name = 'ThePlatform';\nexport default dashjs.FactoryMaker.getSingletonFactory(ThePlatform); /* jshint ignore:line */","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\n/**\r\n * @ignore\r\n */\r\nfunction Widevine() {\r\n\r\n    function log(msg) { console.log('Widevine.js::init', msg); }\r\n\r\n    let instance;\r\n\r\n    function getServerURLFromMessage(url /*, message, messageType*/) {\r\n        return url;\r\n    }\r\n\r\n    function getHTTPMethod(/*messageType*/) {\r\n        //log('Widevine.js::getHTTPMethod', keySystemStr);\r\n        return 'GET';\r\n    }\r\n\r\n    function getResponseType(/*keySystemStr, messageType*/) {\r\n        // log('Widevine.js::getResponseType', keySystemStr);\r\n        return 'json';\r\n    }\r\n\r\n    function getLicenseMessage(serverResponse/*, keySystemStr, messageType*/) {\r\n        log('getLicenseMessage:' + serverResponse);\r\n        return serverResponse;\r\n    }\r\n\r\n    function getErrorResponse(serverResponse/*, keySystemStr, messageType*/) {\r\n        log('getErrorResponse:' + serverResponse);\r\n        return String.fromCharCode.apply(null, new Uint8Array(serverResponse));\r\n    }\r\n\r\n    instance = {\r\n        getServerURLFromMessage: getServerURLFromMessage,\r\n        getHTTPMethod: getHTTPMethod,\r\n        getResponseType: getResponseType,\r\n        getLicenseMessage: getLicenseMessage,\r\n        getErrorResponse: getErrorResponse\r\n    };\r\n\r\n    return instance;\r\n}\r\n\r\nWidevine.__dashjs_factory_name = 'Widevine';\r\nexport default dashjs.FactoryMaker.getSingletonFactory(Widevine); /* jshint ignore:line */","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\n/**\r\n * @classdesc A collection of ClearKey encryption keys with an (optional) associated\r\n *  type\r\n * @ignore\r\n */\r\nclass ClearKeyKeySet {\r\n    /**\r\n     * @param {Array.<KeyPair>} keyPairs\r\n     * @param {string} type the type of keys in this set.  One of either 'persistent'\r\n     * or 'temporary'.  Can also be null or undefined.\r\n     * @class\r\n     * @ignore\r\n     */\r\n    constructor(keyPairs, type) {\r\n        if (type && type !== 'persistent' && type !== 'temporary')\r\n            throw new Error('Invalid ClearKey key set type!  Must be one of \\'persistent\\' or \\'temporary\\'');\r\n        this.keyPairs = keyPairs;\r\n        this.type = type;\r\n    }\r\n\r\n    /**\r\n     * Convert this key set to its JSON Web Key (JWK) representation\r\n     *\r\n     * @return {ArrayBuffer} JWK object UTF-8 encoded as ArrayBuffer\r\n     */\r\n    toJWK() {\r\n        let i;\r\n        let numKeys = this.keyPairs.length;\r\n        let jwk = {keys: []};\r\n\r\n        for (i = 0; i < numKeys; i++) {\r\n            let key = {\r\n                kty: 'oct',\r\n                alg: 'A128KW',\r\n                kid: this.keyPairs[i].keyID,\r\n                k: this.keyPairs[i].key\r\n            };\r\n            jwk.keys.push(key);\r\n        }\r\n        if (this.type) {\r\n            jwk.type = this.type;\r\n        }\r\n        let jwkString = JSON.stringify(jwk);\r\n        const len = jwkString.length;\r\n\r\n        // Convert JSON string to ArrayBuffer\r\n        let buf = new ArrayBuffer(len);\r\n        let bView = new Uint8Array(buf);\r\n        for (i = 0; i < len; i++)\r\n            bView[i] = jwkString.charCodeAt(i);\r\n        return buf;\r\n    }\r\n}\r\n\r\nexport default ClearKeyKeySet;\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n/**\r\n * @classdesc EME-independent KeyMessage\r\n * @ignore\r\n */\r\nclass KeyMessage {\r\n    /**\r\n     * @param {SessionToken} sessionToken the session\r\n     * to which the key message is associated\r\n     * @param {ArrayBuffer} message the key message\r\n     * @param {string} defaultURL license acquisition URL provided by the CDM\r\n     * @param {string} messageType Supported message types can be found\r\n     * {@link https://w3c.github.io/encrypted-media/#idl-def-MediaKeyMessageType|here}.\r\n     * @class\r\n     */\r\n    constructor(sessionToken, message, defaultURL, messageType) {\r\n        this.sessionToken = sessionToken;\r\n        this.message = message;\r\n        this.defaultURL = defaultURL;\r\n        this.messageType = messageType ? messageType : 'license-request';\r\n    }\r\n}\r\n\r\nexport default KeyMessage;\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n/**\r\n * @classdesc Represents a 128-bit keyID and 128-bit encryption key\r\n * @ignore\r\n */\r\nclass KeyPair {\r\n    /**\r\n     * @param {string} keyID 128-bit key ID, base64 encoded, with no padding\r\n     * @param {string} key 128-bit encryption key, base64 encoded, with no padding\r\n     * @class\r\n     * @ignore\r\n     */\r\n    constructor(keyID, key) {\r\n        this.keyID = keyID;\r\n        this.key = key;\r\n    }\r\n}\r\n\r\nexport default KeyPair;\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n/**\r\n * @classdesc Creates a new key system access token.  Represents a valid key system for\r\n * given piece of content and key system requirements.  Used to initialize license\r\n * acquisition operations.\r\n * @ignore\r\n */\r\nclass KeySystemAccess {\r\n    /**\r\n     * @param {MediaPlayer.dependencies.protection.KeySystem} keySystem the key system\r\n     * @param {KeySystemConfiguration} ksConfiguration the\r\n     * subset of configurations passed to the key system access request that are supported\r\n     * by this user agent\r\n     * @class\r\n     * @ignore\r\n     */\r\n    constructor(keySystem, ksConfiguration) {\r\n        this.keySystem = keySystem;\r\n        this.ksConfiguration = ksConfiguration;\r\n    }\r\n}\r\n\r\nexport default KeySystemAccess;\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\n/**\r\n * @classdesc Represents a set of configurations that describe the capabilities desired for\r\n *  support by a given CDM\r\n * @ignore\r\n */\r\nclass KeySystemConfiguration {\r\n    /**\r\n     * @param {Array.<MediaCapability>} audioCapabilities array of\r\n     * desired audio capabilities.  Higher preference capabilities should be placed earlier\r\n     * in the array.\r\n     * @param {Array.<MediaCapability>} videoCapabilities array of\r\n     * desired video capabilities.  Higher preference capabilities should be placed earlier\r\n     * in the array.\r\n     * @param {string} distinctiveIdentifier desired use of distinctive identifiers.\r\n     * One of \"required\", \"optional\", or \"not-allowed\"\r\n     * @param {string} persistentState desired support for persistent storage of\r\n     * key systems.  One of \"required\", \"optional\", or \"not-allowed\"\r\n     * @param {Array.<string>} sessionTypes List of session types that must\r\n     * be supported by the key system\r\n     * @class\r\n     */\r\n    constructor(audioCapabilities, videoCapabilities, distinctiveIdentifier, persistentState, sessionTypes) {\r\n        this.initDataTypes = [ 'cenc' ];\r\n        if (audioCapabilities && audioCapabilities.length) {\r\n            this.audioCapabilities = audioCapabilities;\r\n        }\r\n        if (videoCapabilities && videoCapabilities.length) {\r\n            this.videoCapabilities = videoCapabilities;\r\n        }\r\n        this.distinctiveIdentifier = distinctiveIdentifier;\r\n        this.persistentState = persistentState;\r\n        this.sessionTypes = sessionTypes;\r\n    }\r\n}\r\n\r\nexport default KeySystemConfiguration;\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n/**\r\n * @classdesc A media capability\r\n * @ignore\r\n */\r\nclass MediaCapability {\r\n    /**\r\n     * @param {string} contentType MIME type and codecs (RFC6386)\r\n     * @param {string} robustness\r\n     * @class\r\n     * @ignore\r\n     */\r\n    constructor(contentType, robustness) {\r\n        this.contentType = contentType;\r\n        this.robustness = robustness;\r\n    }\r\n}\r\n\r\nexport default MediaCapability;\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n/**\r\n * @classdesc NeedKey\r\n * @ignore\r\n */\r\nclass NeedKey {\r\n    /**\r\n     * @param {ArrayBuffer} initData the initialization data\r\n     * @param {string} initDataType initialization data type\r\n     * @class\r\n     */\r\n    constructor(initData, initDataType) {\r\n        this.initData = initData;\r\n        this.initDataType = initDataType;\r\n    }\r\n}\r\n\r\nexport default NeedKey;\r\n","/**\r\n * The copyright in this software is being made available under the BSD License,\r\n * included below. This software may be subject to other third party and contributor\r\n * rights, including patent rights, and no such rights are granted under this license.\r\n *\r\n * Copyright (c) 2013, Dash Industry Forum.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without modification,\r\n * are permitted provided that the following conditions are met:\r\n *  * Redistributions of source code must retain the above copyright notice, this\r\n *  list of conditions and the following disclaimer.\r\n *  * Redistributions in binary form must reproduce the above copyright notice,\r\n *  this list of conditions and the following disclaimer in the documentation and/or\r\n *  other materials provided with the distribution.\r\n *  * Neither the name of Dash Industry Forum nor the names of its\r\n *  contributors may be used to endorse or promote products derived from this software\r\n *  without specific prior written permission.\r\n *\r\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\r\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\r\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\r\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\r\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\r\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n *  POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n/**\r\n * @class\r\n * @ignore\r\n */\r\nclass DashJSError {\r\n    constructor(code, message, data) {\r\n        this.code = code || null;\r\n        this.message = message || null;\r\n        this.data = data || null;\r\n    }\r\n}\r\n\r\nexport default DashJSError;"],"names":["f","g","exports","module","define","amd","window","global","self","this","dashjs","Protection","r","e","n","t","o","i","c","require","u","a","Error","code","p","call","length","1","_dereq_","ErrorsBase","errors","config","err","override","publicOnly","hasOwnProperty","indexOf","EventsBase","events","evt","ProtectionConstants","init","constants","CLEARKEY_KEYSTEM_STRING","WIDEVINE_KEYSTEM_STRING","PLAYREADY_KEYSTEM_STRING","CommonEncryption","cpArray","retVal","cp","schemeIdUri","toLowerCase","value","pssh","offset","view","DataView","version","getUint8","getUint32","slice","keySystem","initData","psshList","parsePSSHList","uuid","cpData","BASE64","__text","replace","decodeArray","buffer","data","dv","byteCursor","nextBox","systemID","undefined","boxStart","byteLength","val","toString","APIS_ProtectionModel_01b","generateKeyRequest","addKey","cancelKeyRequest","needkey","keyerror","keyadded","keymessage","APIS_ProtectionModel_3Feb2014","setMediaKeys","MediaKeys","release","error","message","ready","close","instance","context","getAPI","videoElement","apis","api","Object","keys","createProtectionSystem","controller","protectionKeyController","_controllersProtectionKeyController2","getInstance","setConfig","debug","initialize","logger","eventBus","errHandler","protectionModel","getLogger","videoModel","getElement","onencrypted","mediaKeys","info","_modelsProtectionModel_3Feb20142","create","_modelsProtectionModel_01b2","warn","_modelsProtectionModel_21Jan20152","_controllersProtectionController2","capabilities","setEncryptedMediaSupported","__dashjs_factory_name","factory","FactoryMaker","getClassFactory","_ProtectionEvents2","_errorsProtectionErrors2","updateClassFactory","ProtectionEvents","_get","getPrototypeOf","prototype","INTERNAL_KEY_MESSAGE","INTERNAL_KEY_SYSTEM_SELECTED","INTERNAL_KEY_STATUS_CHANGED","KEY_ADDED","KEY_ERROR","KEY_MESSAGE","KEY_SESSION_CLOSED","KEY_SESSION_CREATED","KEY_SESSION_REMOVED","KEY_STATUSES_CHANGED","KEY_SYSTEM_ACCESS_COMPLETE","KEY_SYSTEM_SELECTED","LICENSE_REQUEST_COMPLETE","NEED_KEY","PROTECTION_CREATED","PROTECTION_DESTROYED","SERVER_CERTIFICATE_UPDATED","TEARDOWN_COMPLETE","VIDEO_ELEMENT_SELECTED","protectionEvents","ProtectionController","needkeyRetries","pendingNeedKeyData","mediaInfoArr","protDataSet","sessionType","robustnessLevel","checkConfig","createKeySession","cdmData","initDataForKS","_CommonEncryption2","getPSSHForKeySystem","protData","getProtData","currentInitData","getAllInitData","initDataEquals","getSessionType","trigger","_voDashJSError2","KEY_SESSION_CREATED_ERROR_CODE","KEY_SESSION_CREATED_ERROR_MESSAGE","systemString","loadKeySession","sessionID","setMediaElement","element","on","onNeedKey","off","keySystemString","getKeySystemConfiguration","audioCapabilities","videoCapabilities","audioRobustness","videoRobustness","ksSessionType","distinctiveIdentifier","persistentState","forEach","media","type","AUDIO","push","_voMediaCapability2","codec","VIDEO","_voKeySystemConfiguration2","selectKeySystem","supportedKS","fromManifest","requestedKeySystems","sort","ksA","ksB","ks","priority","onKeySystemSelected","ksIdx","configs","onKeySystemAccessComplete","event","KEY_SYSTEM_ACCESS_DENIED_ERROR_CODE","KEY_SYSTEM_ACCESS_DENIED_ERROR_MESSAGE","isClearKey","kids","clearkeys","TextEncoder","encode","JSON","stringify","sessionId","requestKeySystemAccess","keySystemAccess","getKeySystem","serverCertificate","setServerCertificate","sendLicenseRequestCompleteEvent","onKeyStatusChanged","status","onKeyMessage","keyMessage","messageType","sessionToken","licenseServerData","getLicenseServer","eventData","getSessionID","processClearKeyLicenseRequest","updateKeySession","reqHeaders","withCredentials","reportError","reqMethod","url","serverURL","laURL","getLicenseServerUrlFromMediaInfo","psshData","getPSSHData","getLicenseServerURLFromInitData","getServerURLFromMessage","updateHeaders","headers","key","httpRequestHeaders","getRequestHeadersFromMessage","xhr","errorMsg","response","getErrorResponse","MEDIA_KEY_MESSAGE_LICENSER_ERROR_CODE","MEDIA_KEY_MESSAGE_LICENSER_ERROR_MESSAGE","statusText","readyState","reqPayload","getLicenseRequestFromMessage","getHTTPMethod","responseType","getResponseType","timeout","isNaN","httpTimeout","doLicenseRequest","method","payload","retriesCount","onLoad","onAbort","onError","XMLHttpRequest","open","setRequestHeader","retryRequest","setTimeout","onload","ontimeout","onerror","onabort","send","licenseMessage","getLicenseMessage","MEDIA_KEY_MESSAGE_NO_LICENSE_SERVER_URL_ERROR_CODE","MEDIA_KEY_MESSAGE_NO_LICENSE_SERVER_URL_ERROR_MESSAGE","MEDIA_KEY_MESSAGE_NO_CHALLENGE_ERROR_CODE","MEDIA_KEY_MESSAGE_NO_CHALLENGE_ERROR_MESSAGE","retry","initDataType","abInitData","ArrayBuffer","isView","String","fromCharCode","apply","Uint8Array","getSupportedKeySystems","initializeForMedia","mediaInfo","getSupportedKeySystemsFromContentProtection","contentProtection","removeKeySession","closeKeySession","setSessionType","setRobustnessLevel","level","setProtectionData","cps","getKeySystems","setKeySystems","keySystems","stop","reset","retryTimeout","clearTimeout","ProtectionKeyController","clearkeyKeySystem","clearkeyW3CKeySystem","_drmKeySystemPlayReady2","_drmKeySystemWidevine2","_drmKeySystemClearKey2","_drmKeySystemW3CClearKey2","protectionDataSet","initData1","initData2","data1","data2","j","newKeySystems","getKeySystemBySystemString","cpIdx","cencContentProtection","findCencContentProtection","schemeIdURI","getInitData","getCDMData","getSessionId","shouldNotFilterOutKeySystem","console","log","arguments","_serversThePlatform2","tpData","theplatform","_serversDRMToday2","_constantsProtectionConstants2","_serversWidevine2","_serversPlayReady2","_serversClearKey2","getClearKeysFromProtectionData","getSingletonFactory","KeySystemClearKey","LICENSE_SERVER_MANIFEST_CONFIGURATIONS","attributes","prefixes","parseInitDataFromContentProtection","cencDefaultKid","kid","btoa","match","map","parseInt","join","cencDefaultKidToBase64Representation","Content-Type","parse","licenseServer","clearkeyProtData","filter","ckData","k","l","attribute","prefix","__prefix","protectionData","clearkeySet","jsonMsg","keyPairs","clearkeyID","clearkey","_voKeyPair2","_voClearKeyKeySet2","KeySystemPlayReady","messageFormat","PROSize","PSSHSize","PSSHBoxType","playreadySystemID","uint8arraydecodedPROHeader","PSSHBox","PSSHData","pro","prheader","PSSHBoxBuffer","setUint32","set","xmlDoc","parser","DOMParser","dataview","Uint16Array","msg","headerNameList","parseFromString","getElementsByTagName","headerValueList","childNodes","nodeValue","Content","licenseRequest","Challenge","decode","numRecords","getUint16","recordType","recordLength","recordData","record","laurl","luiurl","customData","cdmDataBytes","charCodeAt","setPlayReadyMessageFormat","format","KeySystemW3CClearKey","KeySystemWidevine","args","Array","_len","_key","unshift","tp","widevineChallenge","binary","bytes","len","_arrayBufferToBase64","requestContents","getWidevineLicense","releasePid","ProtectionErrors","MEDIA_KEYERR_CODE","MEDIA_KEYERR_UNKNOWN_CODE","MEDIA_KEYERR_CLIENT_CODE","MEDIA_KEYERR_SERVICE_CODE","MEDIA_KEYERR_OUTPUT_CODE","MEDIA_KEYERR_HARDWARECHANGE_CODE","MEDIA_KEYERR_DOMAIN_CODE","MEDIA_KEY_MESSAGE_ERROR_CODE","SERVER_CERTIFICATE_UPDATED_ERROR_CODE","KEY_STATUS_CHANGED_EXPIRED_ERROR_CODE","MEDIA_KEYERR_UNKNOWN_MESSAGE","MEDIA_KEYERR_CLIENT_MESSAGE","MEDIA_KEYERR_SERVICE_MESSAGE","MEDIA_KEYERR_OUTPUT_MESSAGE","MEDIA_KEYERR_HARDWARECHANGE_MESSAGE","MEDIA_KEYERR_DOMAIN_MESSAGE","MEDIA_KEY_MESSAGE_ERROR_MESSAGE","SERVER_CERTIFICATE_UPDATED_ERROR_MESSAGE","KEY_STATUS_CHANGED_EXPIRED_ERROR_MESSAGE","protectionErrors","ProtectionModel_01b","pendingSessions","sessions","moreSessionsAllowed","eventHandler","removeEventListeners","findSessionByID","sessionArray","removeEventListener","ksConfigurations","ve","document","createElement","found","supportedAudio","supportedVideo","configIdx","videos","videoIdx","canPlayType","contentType","ksConfig","_voKeySystemAccess2","mediaElement","addEventListener","newSession","getExpirationTime","NaN","keyID","handleEvent","_voNeedKey2","errorCode","systemCode","shift","_voKeyMessage2","defaultURL","ProtectionModel_21Jan2015","closeKeySessionInternal","session","removeSession","token","splice","parseKeyStatus","keyId","createSessionToken","target","keyStatuses","keyStatus","expiration","getKeyStatuses","getUsable","usable","closed","then","requestKeySystemAccessInternal","idx","navigator","requestMediaKeySystemAccess","mediaKeySystemAccess","configuration","getConfiguration","mksa","createMediaKeys","mkeys","name","createSession","dataType","generateRequest","toJWK","update","load","success","remove","numSessions","done","s","ProtectionModel_3Feb2014","doSetKeys","boundDoSetKeys","bind","audios","audioIdx","isTypeSupported","ksAccess","ksConfiguration","destinationURL","ClearKey","serverResponse","keypair","keyid","DRMToday","license","keySystemStr","PlayReady","soap","uintToString","arrayBuffer","encodedString","decodeURIComponent","escape","stringResponse","envelope","getElementsByTagNameNS","body","faultstring","statusCode","fault","detail","exception","node","firstChild","idStart","lastIndexOf","idEnd","substring","errorString","ThePlatform","encodeURIComponent","accountId","licenceValue","getWidevineLicenseResponse","base64","binary_string","atob","_base64ToArrayBuffer","Widevine","ClearKeyKeySet","numKeys","jwk","kty","alg","jwkString","buf","bView","KeyMessage","KeyPair","KeySystemAccess","KeySystemConfiguration","sessionTypes","initDataTypes","MediaCapability","robustness","NeedKey","DashJSError"],"mappings":"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"}